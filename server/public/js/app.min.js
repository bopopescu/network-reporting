(function($, Backbone, _) {

    /*
     * ## AccountRollUp
     * This model holds the rolled up ad network reporting data for an account
     */
    var AccountRollUp = Backbone.Model.extend({
        defaults : {
            revenue: 0,
            attempts: 0,
            impressions: 0,
            cpm: 0,
            fill_rate: 0,
            clicks: 0,
            cpc: 0,
            ctr: 0,
        },
        url: function () {
            return '/api/ad_network/account_roll_up/';
        },
    });

    /*
     * ## DailyStatsCollection
     * Holds the stats to render the chart.
     */
    var DailyStatsCollection = Backbone.Collection.extend({
        model: AppOnNetwork,

        get_daily_stats: function (stat) {
            return _.map(this.models, function(model){
                return model.get(stat);
            });
        },

        url: function () {
            return '/api/ad_network/daily_stats/';
        },
    });

    /*
     * ## RollUp
     * This model holds the ad network reporting data for either an application
     * or an ad network.
     */
    var RollUp = Backbone.Model.extend({
        defaults : {
            revenue: 0,
            attempts: 0,
            impressions: 0,
            cpm: 0,
            fill_rate: 0,
            clicks: 0,
            cpc: 0,
            ctr: 0,
        },
        url: function () {
            return '/api/ad_network/roll_up/'
                + this.get('type')
                + '/id/'
                + this.id;
        },
    });

    /*
     * ## AppOnNetwork
     * This model holds the ad network reporting data for an application on a a specific network.
     */
    var AppOnNetwork = Backbone.Model.extend({
        defaults : {
            name: '',
            revenue: 0,
            attempts: 0,
            impressions: 0,
            cpm: 0,
            fill_rate: 0,
            clicks: 0,
            cpc: 0,
            ctr: 0,
        },
        url: function () {
            return '/api/ad_network/app_on_network/'
                + this.get('network')
                + '/pub_id/'
                + this.id;
        },
    });

    /*
     * ## AppOnNetworkCollection
     */
    var AppOnNetworkCollection = Backbone.Collection.extend({
        model: AppOnNetwork,
    });

    window.AccountRollUp = AccountRollUp;
    window.DailyStatsCollection = DailyStatsCollection;
    window.RollUp = RollUp;
    window.AppOnNetwork = AppOnNetwork;
    window.AppOnNetworkCollection = AppOnNetworkCollection;


})(this.jQuery, this.Backbone, this._);

/*
 * # models.js
 *
 * Backbone models
 */

/*jslint browser:true,
  fragment: true,
  maxlen: 110,
  nomen: true,
  indent: 4,
  vars: true,
  white: true
 */

var mopub = mopub || {};

(function ($, Backbone, _) {
    "use strict";

    /*
     * ## AdGroups
     */

    /*
     * Helper functions for stats
     */
    function calculate_ctr(imp, clk) {
        if (imp === null || clk === null || imp === undefined || clk === undefined) {
            return null;
        }
        return (imp === 0) ? 0 : clk / imp;
    }

    function calculate_fill_rate(req, imp) {
        if (req === null || imp === null || req === undefined || imp === undefined) {
            return null;
        }
        return (req === 0) ? 0 : imp / req;
    }

    function calculate_cpm(imp, rev) {
        if (imp === null || rev === null || imp === undefined || rev === undefined) {
            return null;
        }
        return (imp === 0) ? 0 : rev / imp * 1000;
    }

    function format_stat(stat, value) {
        if (value === null || value === undefined) {
            return '--';
        }
        switch (stat) {
          case 'att':
          case 'clk':
          case 'conv':
          case 'goal':
          case 'imp':
          case 'imp':
          case 'req':
          case 'att':
            return mopub.Utils.formatNumberWithCommas(value);
          case 'cpm':
          case 'rev':
            return '$' + mopub.Utils.formatNumberWithCommas(value.toFixed(2));
          case 'conv_rate':
          case 'ctr':
          case 'fill_rate':
            return mopub.Utils.formatNumberAsPercentage(value);
          case 'status':
            return value;
          case 'pace':
            return (value*100).toFixed() + '%';
        default:
            throw 'Unsupported stat "' + stat + '".';
        }
    }
    
    // Records an event in all of the metrics tracking services we
    // use.
    function record_metric (name, args) {
        try {
            _kmq.push(['record', name, args]);
        } catch (x) {
            console.log(x);
        }

        try {
            mixpanel.track(name, args);
        } catch (x) {
            console.log(x);
        }
    }

    
    var ModelHelpers = {
        calculate_ctr: calculate_ctr,
        calculate_fill_rate: calculate_fill_rate,
        format_stat: format_stat
    };


    /*
     * ## StatsModel
     */
    var StatsModel = Backbone.Model.extend({
        get_stat: function(stat) {
            switch(stat) {
                case 'ctr':
                    return calculate_ctr(this.get('imp'),
                                         this.get('clk'));
                case 'fill_rate':
                    return calculate_fill_rate(this.get('req'),
                                               this.get('imp'));
                case 'cpm':
                    return this.get(stat) || calculate_cpm(this.get('imp'),
                                                           this.get('rev'));
                case 'clk':
                case 'conv':
                case 'imp':
                case 'req':
                case 'att':
                case 'rev':
                case 'goal':
                case 'pace':
                case 'conv_rate':
                    return this.get(stat);
                default:
                    throw 'Unsupported stat "' + stat + '".';
            }
        },

        get_formatted_stat: function(stat) {
            return format_stat(stat, this.get_stat(stat));
        },

        get_stat_for_day: function(stat, day) {
            if (!this.has("daily_stats")) {
                return null;
            }
            var daily_stats = this.get("daily_stats");
            if (day >= daily_stats.length) {
                return null;
            }
            var day_stats = daily_stats[day];

            if (!day_stats.hasOwnProperty(stat)) {
                return null;
            }
            return day_stats[stat];
        },
    });

    /*
     * ## StatsModels Collection
     */
    var StatsModels = Backbone.Collection.extend({
        model: StatsModel,

        get_stat_sum: function(stat) {
            return this.reduce(function(memo, adgroup) {
                if (memo === null || !adgroup.has(stat)) {
                    return null;
                }
                return memo + adgroup.get(stat);
            }, 0);
        },

        get_stat: function(stat) {
            switch(stat) {
                case 'ctr':
                    return calculate_ctr(this.get_stat('imp'),
                                         this.get_stat('clk'));
                case 'fill_rate':
                    return calculate_fill_rate(this.get_stat('req'),
                                               this.get_stat('imp'));
                case 'cpm':
                    return this.get(stat) || calculate_cpm(this.get_stat('imp'),
                                                           this.get_stat('rev'));
                case 'clk':
                case 'conv':
                case 'imp':
                case 'req':
                case 'att':
                case 'rev':
                    return this.get_stat_sum(stat);
                default:
                    throw 'Unsupported stat "' + stat + '".';
            }
        },

        get_formatted_stat: function(stat) {
            return format_stat(stat, this.get_stat(stat));
        },

        get_stat_sum_for_day: function(stat, day) {
            return this.reduce(function(memo, adgroup) {
                if (memo === null ||
                    !adgroup.has('daily_stats') ||
                    day >= adgroup.get('daily_stats').length ||
                    !(adgroup.get('daily_stats')[day]).hasOwnProperty(stat)) {
                    return null;
                }

                return memo + adgroup.get('daily_stats')[day][stat];
            }, 0);
        },

        get_stat_for_day: function(stat, day) {
            // TODO: Standardize field naming
            switch(stat) {
                case 'ctr':
                    return calculate_ctr(this.get_stat_for_day('imp', day),
                                         this.get_stat_for_day('clk', day));
                case 'fill_rate':
                    return calculate_fill_rate(this.get_stat_for_day('req', day),
                                               this.get_stat_for_day('imp', day));
                case 'cpm':
                    return calculate_cpm(this.get_stat_for_day('imp', day),
                                         this.get_stat_for_day('rev', day));
                case 'clk':
                case 'conv':
                case 'imp':
                case 'req':
                case 'att':
                case 'rev':
                    return this.get_stat_sum_for_day(stat, day);
                default:
                    throw 'Unsupported stat "' + stat + '".';
            }
        },

        get_formatted_stat_for_day: function(stat, day) {
            return format_stat(stat, this.get_stat_for_day(stat, day));
        },

        get_total_daily_stats: function(stat) {
            var total_daily_stats = [];
            var day;
            for(day in this.at(0).get('daily_stats')) {
                total_daily_stats.push(this.get_stat_for_day(stat, day));
            }
            return total_daily_stats;
        },

        get_formatted_total_daily_stats: function(stat) {
            var formatted_total_daily_stats = [];
            var day;
            for(day in this.at(0).get('daily_stats')) {
                formatted_total_daily_stats.push(this.get_formatted_stat_for_day(stat, day));
            }
            return formatted_total_daily_stats;
        },

        get_chart_data: function(stat, mopub_optimized) {
            var adgroups = this.filter(function(adgroup) {
                return adgroup.has(stat) && adgroup.has('daily_stats');
            });
            if (adgroups.length === 0) {
                return [];
            }
            var sorted_adgroups = _.sortBy(adgroups, function(adgroup) {
                // dash because we're sorting in reverse order
                return -adgroup.get('imp');
            });
            var top_three_adgroups = sorted_adgroups.splice(0, 3);
            var other_adgroups = new AdGroups(sorted_adgroups);
            var chart_data = top_three_adgroups.map(function(adgroup) {
                var adgroup_data = {};
                adgroup_data[adgroup.get('name')] = _.map(adgroup.get('daily_stats'), function(day) {
                    return day[stat];
                });
                return adgroup_data;
            });
            if (other_adgroups.size()) {
                chart_data.push({
                    'Others': other_adgroups.get_total_daily_stats(stat)
                });
            }
            if (stat === 'ctr' && mopub_optimized) {
                chart_data.push({
                    'MoPub Optimized': this.get_total_daily_stats('ctr')
                });
            }
            return chart_data;
        },

        get_days: function() {
            // TODO: make this less hacky
            return this.reduce(function(memo, adgroup) {
                return (adgroup.has('daily_stats') &&
                        adgroup.get('daily_stats').length > memo) ? adgroup.get('daily_stats').length : memo;
            }, 0);
        },

        isFullyLoaded: function() {
            // TODO: make this less hacky
            return this.reduce(function(memo, adgroup) {
                return memo && adgroup.has('imp');
            }, true);
        }
    });

    
    /*
     * ## Campaign Model
     */

    var Campaign = StatsModel.extend({
        defaults : {
            stats_endpoint: 'all'
        },
        url: function() {
            // window.location.search.substring(1) is used to preserve date ranges from the url
            // this makes the fetching work with the datepicker.
            var stats_endpoint = this.get('stats_endpoint');
            return '/api/campaign/'
                + this.id
                + '?'
                + window.location.search.substring(1)
                + '&endpoint='
                + stats_endpoint;
        },
        parse: function(response) {
            if (response) {
                var campaign_data = response.sum;
                campaign_data.daily_stats = response.daily_stats;

                // REFACTOR attempts vs requests
                if(campaign_data.req == null || campaign_data.req == undefined) {
                    campaign_data.req = campaign_data.att;
                } else if(campaign_data.att == null || campaign_data.att == undefined) {
                    campaign_data.att = campaign_data.req;
                } 

                return campaign_data;
            }
        }
    });


    /*
     * ## Campaigns Collection
     */
    var Campaigns = StatsModels.extend({
        model: Campaign,
    });


    /*
     * ## AdGroup model
     * This will most likely need to be refactored soon when we change how
     * AdGroups work on the backend.
     */

    var AdGroup = StatsModel.extend({
        url: function() {
            return '/api/adgroup/' + this.id;
        }
    });


    /*
     * ## Adgroup Collection
     */
    var AdGroups = StatsModels.extend({
        model: AdGroup,
    });


    /*
     * ## AdUnit
     */
    var AdUnit = StatsModel.extend({
        // If we don't set defaults, the templates will explode
        defaults : {
            active: false,
            att: 0,
            clk: 0,
            ctr: 0,
            cpm: 0,
            fill_rate: 0,
            imp: 0,
            name: '',
            price_floor: 0,
            requests: 0,
            rev: 0,
            stats_endpoint: 'all'
        },
        validate: function(attributes) {
            var current_price_floor = this.get('price_floor');
            if (typeof(attributes.price_floor) !== 'undefined') {
                var valid_number = Number(attributes.price_floor);
                if (isNaN(valid_number)) {
                    return "Please enter a valid number for the price floor";
                } else {
                    if (current_price_floor !== valid_number) {
                        record_metric('MPX Price Floor Changed', {
                            'from': current_price_floor,
                            'to': valid_number
                        });
                    }
                }
            }
        },
        url: function() {
            // window.location.search.substring(1) is used to preserve date ranges from the url
            // this makes the fetching work with the datepicker.
            var stats_endpoint = this.get('stats_endpoint');
            return '/api/app/'
                + this.app_id
                + '/adunits/'
                + this.id
                + '?'
                + window.location.search.substring(1)
                + '&endpoint='
                + stats_endpoint;
        }
    });

    /*
     * ## AdUnitCollection
     *
     * Should collections be named 'collection' or should we pluralize their
     * model name?
     */
    var AdUnitCollection = Backbone.Collection.extend({
        model: AdUnit,
        url: function() {
            // window.location.search.substring(1) is used to preserve date ranges from the url
            // this makes the fetching work with the datepicker.
            if (this.campaign_id) {
                return '/api/campaign/'
                    + this.campaign_id
                    + '/adunits/'
                    + '?'
                    + window.location.search.substring(1)
                    + '&endpoint='
                    + this.stats_endpoint;
            } else {
                return '/api/app/'
                    + this.app_id
                    + '/adunits/'
                    + '?'
                    + window.location.search.substring(1)
                    + '&endpoint='
                    + this.stats_endpoint;
            }
        },

        parse: function(response) {
            // REFACTOR attempts vs requests
            _.each(response, function(adunit) {
                if(adunit.req == null || adunit.req == undefined) {
                    adunit.req = adunit.att;
                } else if (adunit.att == null || adunit.att == undefined) {
                    adunit.att = adunit.req;
                }
            });

            return response;
        },

        isFullyLoaded: function() {
            // TODO: make this less hacky
            return this.reduce(function(memo, adunit) {
                return memo && adunit.has('imp');
            }, true);
        }
    });


    /*
     * ## App
     * We might consider turning derivative values (cpm, fill_rate, ctr) into
     * functions.
     */
    var App = StatsModel.extend({
        defaults : {
            name: '',
            url:'#',
            icon_url: "/placeholders/image.gif",
            app_type: '',
            active: false,
            att: 0,
            clk: 0,
            ctr: 0,
            cpm: 0,
            fill_rate: 0,
            imp: 0,
            price_floor: 0,
            requests: 0,
            rev: 0,
            status: 'Running',
            stats_endpoint: 'all'
        },
        url: function () {
            var stats_endpoint = this.get('stats_endpoint');
            if (this.get('campaign_id')) {
                return '/api/campaign/'
                    + this.get('campaign_id')
                    + '/apps/'
                    + this.id
                    + "?"
                    + window.location.search.substring(1)
                    + '&endpoint='
                    + stats_endpoint;
            } else {
                return '/api/app/'
                    + this.id
                    + "?"
                    + window.location.search.substring(1)
                    + '&endpoint='
                    + stats_endpoint;
            }
        },
        parse: function (response) {
            // The api returns everything from this url as a list,
            // so that you can request one or all apps.
            var app = response[0];

            // REFACTOR attempts vs requests
            if(app.req == null || app.req == undefined) {
                app.req = app.att;
            } else if (app.att == null || app.att == undefined) {
                app.att = app.req;
            }

            if (app.app_type === 'iphone') {
                app.app_type = 'iOS';
            }
            if (app.app_type === 'android') {
                app.app_type = 'Android';
            }
            if (app.app_type === 'mweb') {
                app.app_type = 'Mobile Web';
            }
            return app;
        },
        get_summed: function (attr) {
            if (typeof(this.get(attr)) !== 'undefined') {
                var series = this.get(attr);
                var sum = _.reduce(series, function(memo, num){
                    return memo + num;
                }, 0);
                return sum;
            }
            return null;
        }
    });

    /*
     * ## AppCollection
     */
    var AppCollection = Backbone.Collection.extend({
        model: App,
        // If an app key isn't passed to the url, it'll return a list
        // of all of the apps for the account
        url: function() {
            var stats_endpoint = this.stats_endpoint;
            return '/api/app/' +
                '?' + window.location.search.substring(1) +
                '&endpoint=' + stats_endpoint;
        },
        // Not used anymore, but could come in handy
        fetchAdUnits: function() {
            this.each(function (app) {
                app.adunits = new AdUnitCollection();
                app.adunits.app_id = app.id;
                app.adunits.fetch();
            });
        }
    });


    /*
     * EXPOSE HIS JUNK
     * (We should find a better way to do this.)
     */
    window.StatsModel = StatsModel;
    window.AdUnit = AdUnit;
    window.AdUnitCollection = AdUnitCollection;
    window.App = App;
    window.AppCollection = AppCollection;
    window.AdGroup = AdGroup;
    window.AdGroups = AdGroups;
    window.Campaign = Campaign;
    window.Campaigns = Campaigns;
    window.ModelHelpers = ModelHelpers;


}(this.jQuery, this.Backbone, this._));

(function($, Backbone) {

    /*
     * ## AccountRollUpView
     *
     */
    var AccountRollUpView = Backbone.View.extend({

        initialize: function () {
            this.model.bind('change', this.render, this);
        },

        render: function () {
            var stats_div = "#dashboard-stats .stats-breakdown";
            var inner = ".stats-breakdown-value .inner";
            $("#stats-breakdown-revenue " + inner, stats_div).text(mopub.Utils.formatCurrency(this.model.get("revenue")));
            $("#stats-breakdown-impressions " + inner, stats_div).text(mopub.Utils.formatNumberWithCommas(this.model.get("impressions")));
            $("#stats-breakdown-clicks " + inner, stats_div).html('<span class="muted unbold">(' + mopub.Utils.formatNumberWithCommas(this.model.get("clicks")) + ')</span> ' + mopub.Utils.formatNumberAsPercentage(this.model.get("ctr")));

            return this;
        },
    });

    /*
     * ## DailyStatsView
     *
     * View for rendering the chart out of the daily stats.
     */
    var DailyStatsView = Backbone.View.extend({

        initialize: function () {
            this.collection.bind('reset', this.render, this);
        },

        render: function () {
            models = this.collection.models;
            var daily_stats = models.map(function(model) {
                  return model.attributes;
            });
            populateGraphWithStats(daily_stats);

            return this;
        },
    });

    /*
     * ## RollUpView
     *
     */
    var RollUpView = Backbone.View.extend({

        initialize: function () {
            this.model.bind('change', this.render, this);
        },

        render: function () {
            if(this.model.get("type") == 'network' && this.model.get("sync_date")) {
                $("#" + this.model.id + "-row .network-status span:first").append(this.model.get("sync_date"));
            }

            var mapper_row = $("tr#" + this.model.id + "-row");
            $(".revenue", mapper_row).text(mopub.Utils.formatCurrency(this.model.get("revenue")));
            $(".attempts", mapper_row).text(mopub.Utils.formatNumberWithCommas(this.model.get("attempts")));
            $(".impressions", mapper_row).text(mopub.Utils.formatNumberWithCommas(this.model.get("impressions")));
            $(".cpm", mapper_row).text(mopub.Utils.formatCurrency(this.model.get("cpm")));
            $(".fill-rate", mapper_row).text(mopub.Utils.formatNumberAsPercentage(this.model.get("fill_rate")));
            $(".clicks", mapper_row).text(mopub.Utils.formatNumberWithCommas(this.model.get("clicks")));
            $(".cpc", mapper_row).text(mopub.Utils.formatCurrency(this.model.get("cpc")));
            $(".ctr", mapper_row).text(mopub.Utils.formatNumberAsPercentage(this.model.get("ctr")));

            return this;
        },
    });

    /*
     * ## AppOnNetworkView
     *
     * See templates/partials/app_on_network.html to see how this is rendered in HTML.
     * This renders an app on a network as a table row.
     */
    var AppOnNetworkView = Backbone.View.extend({

        initialize: function () {
            this.model.bind('change', this.render, this);
        },

        render: function () {
            console.log('i was called');
            var context_dict = {
                name: this.model.get('app_name') + '  ',
                network: this.model.get('network_name'),
                key: this.model.get('mapper_key'),
                url: '/ad_network_reports/app_view/' + this.model.get('mapper_key'),
                revenue: mopub.Utils.formatCurrency(this.model.get('revenue')),
                attempts: mopub.Utils.formatNumberWithCommas(this.model.get('attempts')),
                impressions: mopub.Utils.formatNumberWithCommas(this.model.get('impressions')),
                cpm: mopub.Utils.formatCurrency(this.model.get('cpm')),
                fill_rate: mopub.Utils.formatNumberAsPercentage(this.model.get('fill_rate')),
                clicks: mopub.Utils.formatNumberWithCommas(this.model.get('clicks')),
                cpc: mopub.Utils.formatCurrency(this.model.get('cpc')),
                ctr: mopub.Utils.formatNumberAsPercentage(this.model.get('ctr'))
            };
            var network_html = _.template($('#app-on-network-row-template').html(), context_dict);

            $('#app-on-' + this.model.get('network')).append(network_html);

            // It will always insert in alphabetical order since we pull stats
            // from the networks in alphabetical order
            context_dict['name'] = this.model.get('network_name') + '  ';
            var app_html = _.template($('#app-on-network-row-template').html(), context_dict);
            $('#' + this.model.get('app_key') + '-on-networks').append(app_html);

            $('.details-row').mouseover(function () {
                var key = $(this).attr('id');
                $('.details-' + key).removeClass('hidden');
            });

            $('.details-row').mouseout(function () {
                var key = $(this).attr('id');
                $('.details-' + key).addClass('hidden');
            });

            return this;
        }
    });

    window.AccountRollUpView = AccountRollUpView;
    window.DailyStatsView = DailyStatsView;
    window.AppOnNetworkView = AppOnNetworkView;
    window.RollUpView = RollUpView;

})(this.jQuery, this.Backbone);

/*
 * # views.js
 * Reusable UI elements written with Backbone.
 */

/*jslint browser:true,
  fragment: true,
  maxlen: 110,
  nomen: true,
  indent: 4,
  vars: true,
  white: true
 */

var mopub = window.mopub || {};

(function ($, Backbone, _) {
    "use strict";
    /*
     * ## CampaignView
     * Parameters:
     * * model: Campaign
     */
    var CampaignView = Backbone.View.extend({
        initialize: function () {
            this.model.bind('change', this.render, this);
        },
        render: function () {
            var metrics = ['att', 'imp', 'fill_rate', 'clk', 'ctr'];
            var this_view = this;
            var row = $("tr#" + this_view.model.id + "-row");

            if (this_view.model.get('stats_endpoint') == 'networks') {
                var selector = ' .network-data';

                $('.rev', row).text(this_view.model.get_formatted_stat('rev'));
                $('.cpm' + selector, row).text(this_view.model.get_formatted_stat('cpm'));
            } else {
                var selector = ' .mopub-data';
            }

            _.each(metrics, function (metric) {
                var stat = this_view.model.get_stat(metric);
                if ((stat || stat == 0) && (this_view.model.get('stats_endpoint') != 'networks'
                        || this_view.model.get('network') != 'mobfox' || (metric != 'att' 
                        && metric != 'fill_rate'))) {
                    $('.' + metric + selector, row).text(this_view.model.get_formatted_stat(metric));
                }
            });

            return this;
        }
    });

    
    /*
     * ## AdGroupsView
     * Parameters:
     * * collection: AdGroups
     * * el: element that will hold the content
     * * title: title that will be an h2 at the top of the content
     * * type: 'network', 'gtee', 'promo', or 'backfill_promo' -- affects which fields are shown
     * * tables: mapping of... MAPPING OF WHAT? I'M DYING TO KNOW
     */
    var AdGroupsView = Backbone.View.extend({
        initialize: function () {
            this.collection.bind('change', this.render, this);
        },
        filtered_collection: function () {
            // TODO: uses elements not in this view
            var status = $('#campaigns-filterOptions').find(':checked').val();
            var app = $('#campaigns-appFilterOptions').val();
            return new AdGroups(this.collection.reject(function (adgroup) {
                return (status && status !== adgroup.get('status')) ||
                       (app && adgroup.get('apps').indexOf(app) === -1);
            }));
        },
        render: function () {
            var adgroups = this.filtered_collection();

            // TODO: uses elements not in this view, with multiple views there are conflicts

            var html;
            if (adgroups.size() === 0) {
                html = '<h2>No ' + this.options.title + '</h2>';
            } else {
                html = _.template($('#adgroups-rollup-template').html(), {
                    adgroups: adgroups,
                    title: this.options.title,
                    type: this.options.type
                });

                if (this.options.tables) {
                    var type = this.options.type;
                    _.each(this.options.tables, function (filter, title) {
                        var filtered_adgroups = new AdGroups(adgroups.filter(filter));
                        if(filtered_adgroups.length) {
                            html += _.template($('#adgroups-table-template').html(), {
                                adgroups: filtered_adgroups,
                                title: title,
                                type: type,
                            });
                        }
                    });
                } else {
                    html += _.template($('#adgroups-table-template').html(), {
                        adgroups: adgroups,
                        title: 'Name',
                        type: this.options.type
                    });
                }
            }
            $(this.el).html(html);
            return this;
        }
    });

    var NetworkAdGroupsView = Backbone.View.extend({
        initialize: function () {
            this.collection.bind('change', this.render, this);
        },
        filtered_collection: function () {
            // TODO: uses elements not in this view
            var status = $('#campaigns-filterOptions').find(':checked').val();
            var app = $('#campaigns-appFilterOptions').val();
            return new AdGroups(this.collection.reject(function (adgroup) {
                return (status && status !== adgroup.get('status')) ||
                       (app && adgroup.get('apps').indexOf(app) === -1);
            }));
        },
        render: function () {
            var adgroups = this.filtered_collection();

            // TODO: uses elements not in this view, with multiple views there are conflicts

            var html;
            if (adgroups.size() === 0) {
                html = '<h2>No ' + this.options.title + '</h2>';
            } else {
                html = _.template($('#adgroups-rollup-template').html(), {
                    adgroups: adgroups,
                    title: this.options.title,
                    type: this.options.type
                });

                if (this.options.tables) {
                    var type = this.options.type;
                    _.each(this.options.tables, function (filter, title) {
                        var filtered_adgroups = new AdGroups(adgroups.filter(filter));
                        if(filtered_adgroups.length) {
                            html += _.template($('#adgroups-table-template').html(), {
                                adgroups: filtered_adgroups,
                                title: title,
                                type: type
                            });
                        }
                    });
                } else {
                    html += _.template($('#adgroups-table-template').html(), {
                        adgroups: adgroups,
                        title: 'Name',
                        type: this.options.type
                    });
                }
            }
            $(this.el).html(html);
            return this;
        }
    });



    /*
     * # CollectionGraphView
     * Renders a collection as a graph
     */

    var CollectionGraphView = Backbone.View.extend({
        initialize: function () {
            this.collection.bind('change', this.render, this);
        },

        show_chart: function () {
            var this_view = this;
            if(this.collection.isFullyLoaded()) {
                var active_chart = $('#dashboard-stats .stats-breakdown .active');
                var use_ctr = active_chart.attr('id') === 'stats-breakdown-ctr';
                mopub.Chart.setupDashboardStatsChart((use_ctr || this_view.options.line_graph) ? 'line' : 'area');
                $('#dashboard-stats-chart').show();
            }
        },

        render: function () {
            var this_view = this;
            if (this_view.collection.isFullyLoaded()) {

                var metrics = ['imp', 'rev', 'clk', 'ctr'];

                // Render the stats breakdown for "all""
                $.each(metrics, function (iter, metric) {
                    var selector = '#stats-breakdown-' + metric + ' .all .inner';
                    $(selector).html(this_view.collection.get_formatted_stat(metric));
                });

                if (this_view.options.yesterday !== null && this_view.options.today !== null) {

                    // Render the stats breakdown for yesterday
                    $.each(metrics, function (iter, metric) {
                        var selector = '#stats-breakdown-' + metric + ' .yesterday .inner';
                        $(selector).html(this_view.collection.get_formatted_stat_for_day(metric,
                                         this_view.options.yesterday));
                    });

                    // Render the stats breakdown for yesterday
                    $.each(metrics, function (iter, metric) {
                        var selector = '#stats-breakdown-' + metric + ' .today .inner';
                        $(selector).html(this_view.collection.get_formatted_stat_for_day(metric,
                                         this_view.options.today));
                    });
                }

                // Chart
                mopub.dashboardStatsChartData = {
                    pointStart: this_view.options.start_date,
                    pointInterval: 86400000,
                    imp: this_view.collection.get_chart_data('imp', this_view.options.mopub_optimized),
                    rev: this_view.collection.get_chart_data('rev', this_view.options.mopub_optimized),
                    clk: this_view.collection.get_chart_data('clk', this_view.options.mopub_optimized),
                    ctr: this_view.collection.get_chart_data('ctr', this_view.options.mopub_optimized),
                    total: false
                };
                this.show_chart();
            }
        }
    });

    var NetworkGraphView = CollectionGraphView.extend({
        render: function () {
            var this_view = this;

            if (this_view.collection.isFullyLoaded()) {
                var metrics = ['rev', 'imp', 'clk', 'ctr'];

                var network_campaigns = new Campaigns(_.filter(this.collection.models,
                    function(campaign){
                        return campaign.get('stats_endpoint') == 'networks';
                        }));;
                var mopub_campaigns = new Campaigns(_.filter(this.collection.models,
                    function(campaign){
                        return campaign.get('stats_endpoint') == 'all';
                        }));

                // Render the stats breakdown for each metric
                _.each(metrics, function (metric) {
                    var selector = '#stats-breakdown-' + metric;
                    // Mopub doesn't track rev
                    if (metric == 'rev') {
                        var mopub_selector = null;
                        var network_selector = selector + ' .network-chart-rev';
                    } else {
                        var mopub_selector = selector + ' .mopub-chart-data';
                        var network_selector = selector + ' .network-chart-data';
                    }
                    $(mopub_selector).html(mopub_campaigns.get_formatted_stat(metric));
                    $(network_selector).html(network_campaigns.get_formatted_stat(metric));
                });

                // Chart
                if (_.isEmpty(network_campaigns.models)) {
                    mopub.dashboardStatsChartData = {
                        pointStart: this_view.options.start_date,
                        pointInterval: 86400000,
                        imp: [{'Total': mopub_campaigns.get_total_daily_stats('imp')}],
                        clk: [{'Total': mopub_campaigns.get_total_daily_stats('clk')}],
                        ctr: [{'Total': mopub_campaigns.get_total_daily_stats('ctr')}],
                        total: false
                    };
                } else {
                    mopub.dashboardStatsChartData = {
                        pointStart: this_view.options.start_date,
                        pointInterval: 86400000,
                        imp: [{'From MoPub': mopub_campaigns.get_total_daily_stats('imp')}, {'From Networks': network_campaigns.get_total_daily_stats('imp')}],
                        rev: [{'From Networks': {'data': network_campaigns.get_total_daily_stats('rev'), 'color': '#e57300'}}],
                        clk: [{'From MoPub': mopub_campaigns.get_total_daily_stats('clk')}, {'From Networks': network_campaigns.get_total_daily_stats('clk')}],
                        ctr: [{'From MoPub': mopub_campaigns.get_total_daily_stats('ctr')}, {'From Networks': network_campaigns.get_total_daily_stats('ctr')}],
                        total: false
                    };
                }
                mopub.Chart.setupDashboardStatsChart('line');
                $('#dashboard-stats-chart').show();
            }
        }
    });


    var NetworkDailyCountsView = Backbone.View.extend({
        initialize: function () {
            this.collection.bind('change', this.render, this);
        },

        render: function () {
            var this_view = this;

            if (this_view.collection.isFullyLoaded()) {
                var metrics = ['rev', 'cpm', 'imp', 'clk', 'ctr'];

                var network_campaigns = new Campaigns(_.filter(this.collection.models,
                    function(campaign){
                        return campaign.get('stats_endpoint') == 'networks';
                        }));;
                var mopub_campaigns = new Campaigns(_.filter(this.collection.models,
                    function(campaign){
                        return campaign.get('stats_endpoint') == 'all';
                        }));

                // Render Total daily count stats
                _.each(metrics, function (metric) {
                    var selector = '#dailyCounts-totals';
                    // Mopub doesn't track rev
                    if (metric == 'rev' || metric == 'cpm') {
                        var mopub_selector = null;
                        var network_selector = selector + ' .' + metric;
                    } else {
                        var mopub_selector = selector + ' .' + metric + ' .mopub-data';
                        var network_selector = selector + ' .' + metric + ' .network-data';
                    }
                    $(mopub_selector).text(mopub_campaigns.get_formatted_stat(metric));
                    if (!_.isEmpty(network_campaigns.models)) {
                        $(network_selector).text(network_campaigns.get_formatted_stat(metric));
                    }

                    function renderColumn(campaigns, selector) {
                        var totals = campaigns.get_formatted_total_daily_stats(metric).reverse();
                        // Render td in rows a column at a time
                        $('.dailyCounts-stats').each(function (index, row) {
                            var value = totals[index];
                            if (metric == 'rev' || metric == 'cpm') {
                                $(row).find('.' + metric).text(value);
                            } else {
                                $(row).find('.' + metric + selector).text(value);
                            }
                        });
                    }
                    renderColumn(mopub_campaigns, ' .mopub-data');
                    if (!_.isEmpty(network_campaigns.models)) {
                        renderColumn(network_campaigns, ' .network-data');
                    }
                });

            }
        }
    });


    /*
     * ## AppView
     *
     * See templates/partials/app.html to see how this is rendered in HTML.
     * This renders an app as a table row. It also adds the call to load
     * adunits over ajax and put them in the table.
     */
    var AppView = Backbone.View.extend({
        initialize: function () {
            if (this.options.endpoint_specific) {
                this.model.bind('change', this.render, this);
            }
            try {
                this.template = _.template($('#app-template').html());
            } catch (e) {
                // the template wasn't specified. this is ok if you
                // intend to renderInline
            }
        },

        renderInline: function () {
            var this_view = this;
            // Will there be multiple stats endpoints in this app row?
            if (this_view.options.endpoint_specific) {
                if (this_view.model.get('stats_endpoint') == 'networks') {
                    var selector = ' .network-data';
                } else {
                    var selector = ' .mopub-data';
                }
            } else {
                var selector = ''
            }
            var app_row = $('tr.app-row#app-' + this_view.model.id, this_view.el);

            /*jslint maxlen: 200 */
            if (!this_view.options.endpoint_specific || this_view.model.get('stats_endpoint') == 'networks') {
                $('.rev', app_row).text(this_view.model.get_formatted_stat('rev'));
            }
            var metrics = ['cpm', 'imp', 'clk', 'ctr', 'fill_rate', 'req', 'att', 'conv', 'conv_rate'];
            _.each(metrics, function (metric) {
                if (this_view.model.get('stats_endpoint') != 'networks'
                        || this_view.options.network != 'mobfox' || (metric != 'att'
                        && metric != 'fill_rate')) {
                    $('.' + metric + selector, app_row).text(this_view.model.get_formatted_stat(metric));
                }
            });
            /*jslint maxlen: 110 */

            $(".loading-img", app_row).hide();

            return this;
        },
        render: function () {
            if(!this.template) {
                return this.renderInline();
            }

            var renderedContent = $(this.template(this.model.toJSON()));

            // When we render an appview, we also attach a handler to fetch
            // and render it's adunits when a link is clicked.
            $('tbody', this.el).append(renderedContent);
            return this;
        }
    });

    /*
     * ## AdUnitView
     *
     * See templates/partials/adunit.html to see how this is rendered in HTML
     * Renders an adunit as a row in a table. Also ads the event handler to
     * submit the price floor change over ajax when the price_floor field is changed.
     */
    var AdUnitView = Backbone.View.extend({
        initialize: function () {
            try {
                this.template = _.template($('#adunit-template').html());
            } catch (e) {
                // you load the template partial in the page. ok if
                // you intend to renderInline.
            }
        },

        /*
         * Render the AdUnit into a table row that already exists. Adds handlers
         * for changing AdUnit attributes over ajax.
         */
        renderInline: function () {
            /*jslint maxlen: 200 */
            var current_model = this.model;
            var adunit_row = $('tr.adunit-row#adunit-' + this.model.id, this.el);
            var metrics = ['rev', 'cpm', 'imp', 'clk', 'ctr', 'fill_rate', 'req', 'att', 'conv', 'conv_rate'];

            _.each(metrics, function (metric) {
                $('.' + metric, adunit_row).text(current_model.get_formatted_stat(metric));
            });

            $('.price_floor', adunit_row).html('<img class="loading-img hidden" ' +
                                               'src="/images/icons-custom/spinner-12.gif">' +
                                               '</img> ' +
                                               '<input id="' + this.model.id + '" ' +
                                               'type="text" ' +
                                               'class="input-text input-text-number number" ' +
                                               'style="width:50px;margin: -3px 0;" ' +
                                               'value="' + this.model.get('price_floor') +
                                               '"> ');
            $('.targeting', adunit_row).html('<img class="loading-img hidden" ' +
                                             'src="/images/icons-custom/spinner-12.gif"></img> ' +
                                             '<input class="targeting-box" type="checkbox">');

            /*jslint maxlen: 110 */

            if (this.model.get('active')) {
                $('input.targeting-box', adunit_row).attr('checked', 'checked');
            }

            // Add the event handler to submit targeting changes over ajax.
            $('input.targeting-box', adunit_row).click(function () {
                var loading_img = $('.targeting .loading-img', adunit_row);
                loading_img.show();
                current_model.save({'active': $(this).is(':checked')}, {
                    success: function () {
                        setTimeout(function () {
                            loading_img.hide();
                        }, 2000);
                    }
                });
            });

            // Add the event handler to submit price floor changes over ajax.
            $('.price_floor .input-text', adunit_row).keyup(function () {
                var input_field = $(this);
                input_field.removeClass('error');
                var loading_img = $(".price_floor .loading-img", adunit_row);
                loading_img.show();

                var promise = current_model.save({
                    price_floor: $(this).val()
                });
                if (promise) {
                    promise.success(function () {
                        loading_img.hide();
                    });
                    promise.error(function () {
                        loading_img.hide();
                    });
                } else {
                    loading_img.hide();
                    input_field.addClass('error');
                }
            });


            return this;
        },

        /*
         * Render the adunit model in the template. This assumes that the table
         * row for the app has already been rendered. This will render underneath
         * it's app's row.
         */
        render: function () {
            if(!this.template) {
                return this.renderInline();
            }

            // render the adunit and attach it to the table after it's adunit's row
            var current_model = this.model;
            var renderedContent = $(this.template(this.model.toJSON()));

            // Add the event handler to submit price floor changes over ajax.
            $('.price_floor_change', renderedContent)
                .change(function () {
                    current_model.set({'price_floor': $(this).val()});
                    // Save when they click the save button in the price floor cell
                    var save_link = $('.save', $(this).parent());
                    save_link.click(function (e) {
                        e.preventDefault();
                        save_link.addClass('disabled').text('Saving...');
                        current_model.save({}, {
                            success: function () {
                                setTimeout(function () {
                                    save_link.removeClass('disabled').text('Saved');
                                    save_link.text('Save');
                                }, 2000);
                            }
                        });
                    });
                });

            // Add the event handler to submit targeting changes over ajax.
            $('input.targeting-box', renderedContent).click(function () {
                var targeting = $(this).attr('name');
                var activation = $(this).is(':checked') ? 'On' : 'Off';
                $('label[for="' + targeting + '"]', renderedContent).text(activation);

                current_model.set({'active': $(this).is(':checked')});
                current_model.save();
            });

            // Add the right background color based on where the app is in the table
            var app_row = $('tr#app-' + this.model.get('app_id'), this.el);
            var zebra = app_row.hasClass('even') ? 'even' : 'odd';
            renderedContent.addClass(zebra);

            app_row.after(renderedContent);

            return this;
        }
    });

    /*
     * ## AdUnitCollectionView
     */
    var AdUnitCollectionView = Backbone.View.extend({
        initialize: function () {
            this.collection.bind('reset', this.render, this);
        },

        render: function () {
            if(this.collection.isFullyLoaded()) {
                this.collection.each(function(adunit) {
                    var adunit_view = new AdUnitView({model: adunit,
                                                      el: 'div#content'});
                    adunit_view.renderInline();
                });
            }

            // hide spinner
            $('#' + this.options.campaign.id + '-loading').hide();

            return this;
        },
    });

    window.NetworkDailyCountsView = NetworkDailyCountsView;
    window.AdUnitView = AdUnitView;
    window.AdUnitCollectionView = AdUnitCollectionView;
    window.AppView = AppView;
    window.AdGroupsView = AdGroupsView;
    window.CampaignView = CampaignView;
    window.CollectionGraphView = CollectionGraphView;
    window.NetworkGraphView = NetworkGraphView;

}(this.jQuery, this.Backbone, this._));


/*
	MoPub Dashboard JS
*/

// global mopub object
var mopub = mopub || {};

(function($){
	// dom ready
	$(document).ready(function() {
		
		// Hack to add the correct class to input fields
		$('input:text').addClass('input-text');
	    $('input:password').addClass('input-text');
	    

		$(".button.continue")
    		.button({ 
    			icons: { secondary: "ui-icon-circle-triangle-e" } 
    		});
		
    	$('#paymentchange-submit')
    		.button({ 
                icons: { secondary: "ui-icon-circle-triangle-e" }
            })
            .click(function(e) {
				e.preventDefault();
				$('#paymentchange').submit();
			});

		$('#accountForm-submit')
        	.button({ 
                icons: { secondary: "ui-icon-circle-triangle-e" }
            })
            .click(function(e) {
				e.preventDefault();
				$('#accountForm').submit();
			});

		// set up showing/hiding of app details
		$('.adForm').each(function() {
			var details = $(this);
			var data = $('.formFields', details);
			var button = $('.adForm-fields-toggleButton', details);
			var infobutton = $('.adForm-fields-infoButton', details);
			var infodialog = $('.accountInfoForm', details);
			var appbutton = $('.adForm-fields-appButton', details);
			var apps = $('.adForm-apps', details);
			
			data.togglebutton = button;
			data.togglebutton.showText = 'Show details';
			data.togglebutton.hideText = 'Hide details';
			
			apps.togglebutton = appbutton;
			apps.togglebutton.showText = 'Show apps';
			apps.togglebutton.hideText = 'Hide apps';

			function getButtonTextElement(buttonElement) {
				var buttonTextElement = $('.ui-button-text', buttonElement);
				if(buttonTextElement.length == 0) buttonTextElement = buttonElement;
				return buttonTextElement;
			}
			
			function setButtonTextElement(buttonElement, text) {
			  getButtonTextElement(buttonElement).text(text);
			}

			function didShowContainer(container) {
				container.removeClass('hide');
				container.addClass('show');
				container.togglebutton.button('option', {icons: { primary: 'ui-icon-triangle-1-n' }});
				setButtonTextElement(container.togglebutton, container.togglebutton.hideText);
			}
			
			function didHideContainer(container) {
				container.removeClass('show');
				container.addClass('hide');
				container.togglebutton.button('option', {icons: { primary: 'ui-icon-triangle-1-s' }});
				setButtonTextElement(container.togglebutton, container.togglebutton.showText);
			}

			if (data.hasClass('show')) {
				didShowContainer(data);
			}
			else {
				data.hide();
				didHideContainer(data);
			}
			
			button.click(function(e) {
				e.preventDefault();
				if(data.hasClass('show')) {
					data.slideUp('fast');
					didHideContainer(data);
				}
				else {
					data.slideDown('fast');
					didShowContainer(data);
				}
			});
			
			infobutton.button({ 
				icons: { secondary: "ui-icon-info" } 
			})
			.click(function(e) {
				e.preventDefault();
				infodialog.dialog({
				  width: 570,
					buttons: [
						{
							text: 'Close', 
							click: function() {
								$(this).dialog("close");
							}
						}
					]
				});
			});
			
			appbutton.button({
			  icons: { primary: "ui-icon-triangle-1-s" }
			})
			.click(function(e) {
			  e.preventDefault();
				if(apps.hasClass('show')) {
					apps.slideUp('fast');
					didHideContainer(apps);
				}
				else {
					apps.slideDown('fast');
					didShowContainer(apps);
				}
			}).click();
			
            if (apps.hasClass('show')) {
                didShowContainer(apps);
            }
            else {
                apps.hide();
                didHideContainer(apps);
            }
			
		});
	});
})(this.jQuery);

$(function() {


    // Make 'Sort by network', 'Sort by app' sticky
    // NOTE: Would be cleaner if we had the jQuery cookie plugin
    function setCookie(name,value,days) {
        if (days) {
            var date = new Date();
            date.setTime(date.getTime()+(days*24*60*60*1000));
            var expires = "; expires="+date.toGMTString();
        }
        else var expires = "";
        document.cookie = name+"="+value+expires+"; path=/";
    }

    function getCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        var i;
        for (i=0;i < ca.length;i++) {
            var c = ca[i];
            while (c.charAt(0)==' ') c = c.substring(1,c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
        }
        return null;
    }

    function deleteCookie(name) {
        setCookie(name,"",-1);
    }

    //move to a utils package
    // checks if email is valid
    function isValidEmailAddress(emailAddress) {
        var pattern = new RegExp(/^(\s*)(("[\w-+\s]+")|([\w-+]+(?:\.[\w-+]+)*)|("[\w-+\s]+")([\w-+]+(?:\.[\w-+]+)*))(@((?:[\w-+]+\.)*\w[\w-+]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][\d]\.|1[\d]{2}\.|[\d]{1,2}\.))((25[0-5]|2[0-4][\d]|1[\d]{2}|[\d]{1,2})\.){2}(25[0-5]|2[0-4][\d]|1[\d]{2}|[\d]{1,2})\]?$)/i);
        return pattern.test(emailAddress);
    };




    var AdNetworkReportsController = {

        initializeAdReportsIndex: function(bootstrapping_data) {
            var networks_data = bootstrapping_data.networks_data,
                apps_data = bootstrapping_data.apps_data,
                ajax_query_string = bootstrapping_data.ajax_query_string;

            // Load account level roll up stats
            var account_roll_up = new AccountRollUp();
            var account_roll_up_view = new AccountRollUpView({
                model: account_roll_up
            });
            account_roll_up.fetch({ data: ajax_query_string });

            // Load graph data
            var daily_stats = new DailyStatsCollection();
            var daily_stats_view = new DailyStatsView({
                collection: daily_stats
            });
            daily_stats.fetch({ data: ajax_query_string });

            // Load rolled up network stats
            var i;
            for (i=0; i < networks_data.length; i++) {
                var network_data = networks_data[i];
                if(network_data['models'].length > 0 || bootstrapping_data.only_networks) {
                    var roll_up = new RollUp({
                        id: network_data['network'],
                        type: 'network'
                    });
                    var roll_up_view = new RollUpView({
                        model: roll_up
                    });
                    roll_up.fetch({ data: ajax_query_string });
                }
            }

            // Load rolled up apps stats
            for (i=0; i < apps_data.length; i++) {
                var app_data = apps_data[i];
                var roll_up = new RollUp({
                    id: app_data['id'],
                    type: 'app'
                });
                var roll_up_view = new RollUpView({
                    model: roll_up
                });
                roll_up.fetch({ data: ajax_query_string });
            }

            // Load stats for app on network
            for (i=0; i < networks_data.length; i++) {
                var network_data = networks_data[i];
                if(network_data['models'].length > 0) {
                    var apps_on_network = new AppOnNetworkCollection(network_data['models']);
                    apps_on_network.each(function(app_on_network) {
                        var app_on_network_view = new AppOnNetworkView({
                            model: app_on_network
                        });
                        app_on_network.fetch({ data: ajax_query_string });
                    });
                }
            }


            $('.addcreds').click(function(e) {
                e.preventDefault();

                var network_name = $(this).attr('href').replace('#', '');

                $("#" + network_name + "-fields").show();

                $("#ad_network_selector").val(network_name);

                $('#credential-form').dialog({
                    buttons: { "Close": function() { $(this).dialog('close');} },
                    width: 500
                });
            });

            // taken from mopub-dashboard.js #appEditForm (could be combined)
            $('#networkSettingsForm-submit')
                .button({
                    icons: { secondary: "ui-icon-circle-triangle-e" }
                })
                .click(function(e) {
                    e.preventDefault();
                    $('#networkSettingsForm-loading').show();
                    $('#settings-form-message').hide();

                    // check if all emails are valid
                    var valid = true;
                    var list = $('#network-settingsForm textarea').val().split(',');
                    for (var i = 0; i < list.length; i++) {
                        if (!isValidEmailAddress(list[i])) {
                            valid = false;
                        }
                    }

                    if (valid) {
                        $.ajax({
                            type: 'POST',
                            url: '/ad_network_reports/settings/',
                            data : $('#networkForm').serialize(),
                            success : function(resp) {
                                $('#networkSettingsForm-loading').hide();
                                $('#network-settingsForm').slideUp('fast');
                            },
                            error : function(jqXHR, textStatus, errorThrown) {
                                $('#settings-form-message').html("Couldn't update settings.");
                                $('#settings-form-message').show();
                                $('#networkSettingsForm-loading').hide();
                            }
                        });
                        //$('#networkForm').submit();
                    } else {
                        $('#settings-form-message')
                            .html("Please enter a valid email address or a list of valid email addresses.");
                        $('#settings-form-message').show();
                        $('#networkSettingsForm-loading').hide();
                    }
                });

            $('#networkSettingsForm-cancel')
                .click(function(e) {
                    e.preventDefault();
                    $('#network-settingsForm').slideUp('fast');
                });

            $('#network-settingsButton')
                .button({ icons: { primary: "ui-icon-wrench" } })
                .click(function(e) {
                    e.preventDefault();
                    if ($('#network-settingsForm').is(':visible')) {
                        $('#network-settingsForm').slideUp('fast');
                    } else {
                        $('#network-settingsForm').slideDown('fast');
                    }
                });

            $('#dashboard-sort-network').click(function () {
                deleteCookie('network-reports-tab');
                //$.cookie('network-reports-tab', null);
            });

            $('#dashboard-sort-app').click(function () {
                setCookie('network-reports-tab', '#dashboard-sort-app', 7);
                //$.cookie('network-reports-tab', '#dashboard-sort-app', { expires: 7, path: '/ad_network_reports' });
            });

            if (getCookie('network-reports-tab') == '#dashboard-sort-app') {
                $('#dashboard-sort-app').click();
                $('.apps').addClass('active');
                $('.networks').removeClass('active');
            }

            $('.show-status').click(function () {
                var key = $(this).attr('id');
                var div = $('.' + key);
                div.dialog({
                    buttons: {
                        "Update": function() { $('form.loginCredentials',div).submit(); },
                        "Close": function() { $(this).dialog('close');} }
                });
            });

            $('#delete-network-button').click(function () {
                var key = $(this).attr('id');
                var div = $('.' + key);
                div.dialog({
                    buttons: {
                        "Update": function() { $('form.loginCredentials',div).submit(); },
                        "Close": function() { $(this).dialog('close');} }
                });
            });

            $('#dashboard-sort input').click(function() {
                $('.tab-section').hide();
                $('.tab-section.'+$(this).val()).show();
            });

            $('.show-hide').click(function () {
                var key = $(this).attr('id');
                var rows = $('.' + key + '-row');
                var button = $(this).children('span');
                $.each(rows, function (iter, row) {
                    if ($(row).is(":visible")) {
                        $(row).slideUp('fast');
                        $(button).text('Show Apps');
                    } else {
                        $(row).slideDown('fast');
                        $(button).text('Hide Apps');
                    }
                });
            });
        },

        initializeCredentialsPage: function (account_key) {
            $(".loginCredentials").submit(function(event) {
                event.preventDefault();

                // Check if data submitted in the form is valid login
                // information for the ad network
                var data = $(this).serialize();
                var key = $(this).attr('id');
                data += ("&account_key=" + account_key + "&network=" + key.substr("form-".length));
                var message = $('.' + key + '-message');
                $(message).removeClass('hidden');
                $(message).html("Verifying login credentials...");
                $.ajax({
                    url: 'https://checklogincredentials.mopub.com',
                    data: data,
                    crossDomain: true,
                    dataType: "jsonp",
                    success: function(valid) {
                        // Upon success notify the user
                        if (valid) {
                            $('.' + key + '-enable').html("Pending");
                            $(message)
                                .html("Check back in a couple minutes to see your ad network revenue report. You will receive an email when it is ready.");
                        } else {
                            $(message).html("Invalid login information.");
                        }
                    }
                });
            });


            // Hides/shows network forms based on which was selected
            // in the dropdown
            $("#ad_network_selector").change(function() {
                var network = $(this).val();
                $('.network_form').each(function () {
                    if ($(this).attr('id') == network + '-fields') {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            }).change();
        }
    };

    window.AdNetworkReportsController = AdNetworkReportsController;
});

(function($) {

    var toast_error = function () {
         var message = $("Please <a href='#'>refresh the page</a> and try again.")
            .click(function(e){
                e.preventDefault();
                window.location.reload();
            });
        Toast.error(message, "Error fetching app data.");
    };

    function dateToString(date) {
        var day = date.getDate();
        // FYI, months are indexed from 0
        var month = date.getMonth() + 1;
        var year = date.getFullYear();

        return year + "-" + month + "-" + day;
    }

    function setupAdGroupForm() {
        // select the appropriate campaign_type from the hash
        if (window.location.hash.substring(1) !== '') {
            $('select[name="campaign_type"]').val(window.location.hash.substring(1));
        }

        var validator = $('form#campaign_and_adgroup').validate({
            errorPlacement: function(error, element) {
                element.closest('li > div').append(error);
            },
            submitHandler: function(form) {
                $(form).ajaxSubmit({
                    data: {ajax: true},
                    dataType: 'text',
                    success: function(jsonData, statusText, xhr, $form) {
                        var data = $.parseJSON(jsonData);
                        if(data.success) {
                            window.location = data.redirect;
                            $('form#campaign_and_adgroup #submit').button({
                                label: 'Success...',
                                disabled: true
                            });
                        } else {
                            validator.showErrors(data.errors);
                            $('form#campaign_and_adgroup #submit').button({
                                label: 'Try Again',
                                disabled: false
                            });
                        }
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        $('form#campaign_and_adgroup #submit').button({
                            label: 'Try Again',
                            disabled: false
                        });
                    },
                    beforeSubmit: function(arr, $form, options) {
                        $('form#campaign_and_adgroup #submit').button({
                            label: 'Submitting...',
                            disabled: true
                        });
                    }
                });
            }
        });

        $('form#campaign_and_adgroup #submit')
            .button({ icons : { secondary : 'ui-icon-circle-triangle-e' } })
            .click(function(e) {
                e.preventDefault();
                $('form#campaign_and_adgroup').submit();
            });

        // help links
        // TODO: make sure all of these are necessary, rename?
        $.each(['type', 'priority', 'promo-priority', 'bid', 'keyword'], function(iter, link_type) {
            $('#campaignForm-' + link_type + '-helpLink').click(function(e) {
                e.preventDefault();
                $('#campaignForm-' + link_type + '-helpContent').dialog({
                    buttons: { "Close": function() { $(this).dialog("close"); } }
                });
            });
        });
        $('#campaignForm-customHtml-helpLink').click(function(e) {
            e.preventDefault();
            $('#campaignForm-customHtml-helpContent').dialog({
                buttons: { "Close": function() { $(this).dialog("close"); }},
                width: 700
            });
        });

        // date controls
        $('input[type="text"].date').xdatepicker({minDate: 0});

        function makeValidTime(timeStr, defHour, defMin, defAmPm) {
            // Checks to see if a timeStr is valid, returns valid form
            // AM/PM (and variants) are optional.

            var timePat = /^(\d{1,2}):(\d{2})(\s?(AM|am|PM|pm|aM|pM|Pm|Am))?$/;

            if (defMin < 10) {
                defMin = '0' + defMin;
            }
            var matchArray = timeStr.match(timePat);
            if (matchArray == null) {
                return defHour + ':' + defMin + ' ' + defAmPm;
            }

            hour = matchArray[1];
            minute = matchArray[2];
            ampm = matchArray[4];

            // Handle military time stuff
            if (hour >= 12 && hour <= 23) {
                hour = hour - 12;
                // 12:00 AM to 12:00 PM
                // 12:00    to 12:00 PM
                //
                // 15:00 AM to 3:00 PM
                // 15:00 PM to 3:00 PM
                // 15:00    to 3:00 PM
                if (hour == 0) {
                    hour = 12;
                    if (ampm === undefined) {
                        ampm = 'PM';
                    }
                }
                else {
                    ampm = 'PM';
                }
            }

            if (hour == 0) {
                ampm = 'AM';
                hour = 12;
            }
            // Set invalid times to 0 minutes and 12 hours and default to AM
            if (minute < 0 || minute > 59) {
                minute = defMin;
            }
            if (hour < 0 || hour > 23) {
                hour = defHour;
            }
            if (ampm === undefined) {
                ampm = defAmPm;
            }

            else {
                ampm = ampm.toUpperCase();
            }
            return hour + ':' + minute + ' ' + ampm ;
        }

        $('input[name="start_datetime_0"]').change(function(e) {
            e.preventDefault();
            var val = $(this).val();
            if (val != '') {
                $('input[name="start_datetime_1"]').change();
            }
        });

        $('input[name="end_datetime_0"]').change(function(e) {
            e.preventDefault();
            var val = $(this).val();
            if (val != '') {
                $('input[name="end_datetime_1"]').change();
            }
        });

        $('input[name$="_datetime_1"]').change(function(e){
            e.preventDefault();
            var name = $(this).attr('name');
            var val = $(this).val();
            if (name == 'start_datetime_1') {
                if($('input[name="start_datetime_0"]').val() == '' || $('input[name="start_datetime_0"]').val() == 'MM/DD/YYYY') {
                    val = '';
                } else {
                    val = makeValidTime(val, 12, 0, 'AM');
                }
            }
            else if (name == 'end_datetime_1') {
                if($('input[name="end_datetime_0"]').val() == '' || $('input[name="end_datetime_0"]').val() == 'MM/DD/YYYY') {
                    val = '';
                } else {
                    val = makeValidTime(val, 11, 59, 'PM');
                }
            }
            $(this).val(val);
        });

        $('input[name="end_datetime_0"], input[name="end_datetime_1"], select[name="budget_type"], select[name="budget_strategy"]').change(function(){
            if(!$('input[name="end_datetime_0"]').val() &&
               !$('input[name="end_datetime_1"]').val() &&
               $('select[name="budget_type"]').val() == 'full_campaign') {
                $('input#id_budget_strategy_1').prop('checked', 'checked');
                $('input#id_budget_strategy_0').removeProp('checked');
                $('input#id_budget_strategy_0').attr('disabled', 'disabled');
            }
            else {
                $('input#id_budget_strategy_0').removeAttr('disabled');
            }
        }).change();


        $('#all-adunits').change(function() {
            // select or deselect all adunits
            $('input[name="site_keys"]').prop('checked', $(this).prop('checked'));
        });

        // device targeting
        $('input[name="device_targeting"]').change(function() {
            if($(this).val() == '0') {
                $('#device_targeting').slideUp();
            }
            else {
                $('#device_targeting').slideDown();
            }
        });
        // update on document ready
        if($('input[name="device_targeting"]:checked').val() == '0') {
            $('#device_targeting').hide();
        }

        // change form based on bid_strategy
        $('select[name="bid_strategy"]').change(function() {
            bid_strategy = $(this).val();
                budget_type_options = $('select[name="budget_type"] option');
            if(bid_strategy == 'cpm') {
                budget_type_options[0].innerHTML = 'impressions/day';
                budget_type_options[1].innerHTML = 'total impressions';
            }
            else {
                budget_type_options[0].innerHTML = 'USD/day';
                budget_type_options[1].innerHTML = 'total USD';
            }
        }).change(); // update on document ready

        var pub_ids = {
            'admob_native': 'admob_pub_id',
            'adsense': 'adsense_pub_id',
            'brightroll': 'brightroll_pub_id',
            'ejam': 'ejam_pub_id',
            'inmobi': 'inmobi_pub_id',
            'jumptap': 'jumptap_pub_id',
            'millennial_native': 'millennial_pub_id',
            'mobfox': 'mobfox_pub_id'
        };

        // make necessary changes based on network type
        $('select[name="network_type"]').change(function() {
            var network_type = $(this).val();
            var pub_id = pub_ids[network_type];

            $('.network_type_dependant').each(function() {
                $(this).toggle($(this).hasClass(network_type));
            });

            // for each appropriate input, show either the input or the span and button
            $('ul#apps > li').each(function() {
                var span = $(this).children('div').children('span');
                span.children().hide();
                var input = span.children('input[name$="'+pub_id+'"]');
                var value = input.val();
                $(this).children('div').children('label').attr('for', input.attr('id'));
                if(value) {
                    input.siblings('span.pub_id').html(value).show();
                    input.siblings('a.pub_id').show();
                }
                else {
                    input.show();
                }
                $(this).children('div').children('ul.adunits').children('li').children('span').each(function() {
                    var span = $(this);
                    span.children().hide();
                    var input = span.children('input[name$="'+pub_id+'"]');
                    if(input.length) {
                        var value = input.val();
                        if(value) {
                            input.siblings('span.pub_id').html(value).show();
                        }
                            else {
                                input.siblings('span.pub_id').html('Default').show();
                            }
                        input.siblings('a.pub_id').show();
                    }
                });
            });

            $('a.pub_id').click(function() {
                var network_type = $('select[name="network_type"]').val();
                var pub_id = pub_ids[network_type];
                $(this).siblings('input[name$="'+pub_id+'"]').show();
                $(this).prev('span').hide();
                $(this).hide();
            });
        }).change(); // update on document ready

        $('button.pub_id').click(function() {
            var network_type = $('select[name="network_type"]').val();
            var pub_id = pub_ids[network_type];

            $(this).siblings('input').hide();
            $(this).prev('span').hide();
            $(this).hide();
            $(this).siblings('input[name$="'+pub_id+'"]').show();
        });

        // make necessary changes based on campaign_type
        $('[name="campaign_type"]').change(function() {
            campaign_type = $(this).val();
            $('.campaign_type_dependant').each(function() {
                $(this).toggle($(this).hasClass(campaign_type));
            });
            if(campaign_type == 'network') {
                // make necessary changes based on network type
                $('select[name="network_type"]').change();
                // update label and help text for bid_strategy and bid
                $('label[for="id_bid_strategy"]').html('Network Rate');
                // update bid help link
                $('#bid-promo-helpLink').attr('id', 'bid-network-helpLink');
            }
            else {
                // update label and help text for bid_strategy and bid
                $('label[for="id_bid_strategy"]').html('Rate');
                if(campaign_type == 'promo') {
                    // update bid help link
                    $('#bid-network-helpLink').attr('id', 'bid-promo-helpLink');
                }
            }
        }).change(); // update on document ready

        $('select[name="budget_type"]').change(function() {
            budget_type = $(this).val();
            $('.budget_type_dependent').each(function() {
                $(this).toggle($(this).hasClass(budget_type));
            });
        }).change(); // update on document ready

        // Toggling for advanced options
        $('#toggle_advanced')
            .button('option', {icons: { primary: 'ui-icon-triangle-1-s' }})
            .click(function(e) {
                e.preventDefault();
                var buttonTextElem = $('.ui-button-text', this);
                if ($('fieldset#advanced').is(':hidden')) {
                    $('fieldset#advanced').slideDown('fast');
                    $(this).button('option', {icons: { primary: 'ui-icon-triangle-1-n' }});
                    $('.ui-button-text', this).text('Hide Advanced Details');
                } else {
                    $('fieldset#advanced').slideUp('fast');
                    $(this).button('option', {icons: { primary: 'ui-icon-triangle-1-s' }});
                    $('.ui-button-text', this).text('Show Advanced Details');
                }
            }); // TODO: need to update on document ready

        /* GEO TARGETING */
        var geo_s = 'http://api.geonames.org/searchJSON?username=MoPub&';
        var pre = {type: 'country', data: []};
        var city_pre = {type: 'city', data: []};
        //Not being used right now
        //var state_pre = {type: 'state', data: []};

        window.priors = window.priors || [];

        for(var index in countries) {
            var dat = countries[index];
            if($.inArray(dat.code, window.priors) != -1) {
                pre.data.push(dat);
            }
            if(pre.length == priors.length)
                break;
        }

        window.city_priors = window.city_priors || [];
        //city is ll:ste:name:ccode;
        for(var i in city_priors) {
            if(city_priors.hasOwnProperty(i)) {
                var datas = city_priors[i].split(':');
                var ll = datas[0].split(',');
                var ste = datas[1];
                var name = datas[2];
                var ccode = datas[3];
                city_pre.data.push(
                    { lat: ll[0],
                      lng: ll[1],
                      countryCode: ccode,
                      adminCode1: ste,
                      name: name
                    });
            }
        }

        //Need to create data object that is array of dictionary [ {name, id} ]
        $('#geo_pred_ta').tokenInput(null, {
                data: countries,
            hintText: 'Type in a country name',
            formatResult: function( row ) {
                return row.name;
            },
            formatMatch: function( row, i, max ){
                return [row.name, row.code];
            },
            prePopulate: pre
        });

        $('#city_ta').tokenInput(geo_s, {
            country: 'US',
            doImmediate: false,
            hintText: 'Type in a city name',
            queryParam: 'name_startsWith',
            featureClass: 'P',
            prePopulate: city_pre,
            contentType: 'json',
            type: 'city',
            minChars: 3,
            method: 'get'
        });
        //Verify that all cities in city_pre are in the SINGLE country that is pre

        /* Not doing states atm
           $('#state_ta').tokenInput(geo_s, {
           country: 'US',
           doImmediate: false,
           queryParam: 'name_startsWith',
           featureCode: 'ADM1',
           contentType: 'json',
           prePopulate: state_pre,
           type: 'state',
           minChars: 5,
           method: 'get'
           }); */

        // Show location-dependent fields when location targeting is turned on
        $('#campaign_and_adgroup input[name="region_targeting"]').click(function(e) {
            var loc_targ = $(this).val();
            $('.locationDependent', '#campaign_and_adgroup').hide();
            $('.' + loc_targ + '.locationDependent', '#campaign_and_adgroup').show();
            if ($(this).val() == 'all') {
                $('li.token-input-city span.token-input-delete-token').each(function() {
                    $(this).click();
                });
            }
        }).filter(':checked').click();
    }


    /*
     * ## initializeDateButtons
     * Loads all click handlers/visual stuff for the date buttons. Used
     * on a ton of pages, probably could be refactored by someone brave
     * enough.
     */
    function initializeDateButtons () {
        $('#dashboard-dateOptions input').click(function() {
            var option = $(this).val();
            if (option == 'custom') {
                $('#dashboard-dateOptions-custom-modal').dialog({
                    width: 570,
                    buttons: [
                        {
                            text: 'Set dates',
                            css: { fontWeight: '600' },
                            click: function() {
                                var from_date = $('#dashboard-dateOptions-custom-from').xdatepicker("getDate");
                                var to_date = $('#dashboard-dateOptions-custom-to').xdatepicker("getDate");
                                var num_days = Math.ceil((to_date.getTime()-from_date.getTime())/(86400000)) + 1;

                                var from_day = from_date.getDate();
                                // FYI, months are indexed from 0
                                var from_month = from_date.getMonth() + 1;
                                var from_year = from_date.getFullYear();

                                $(this).dialog("close");
                                var location = document.location.href.replace(/\?.*/,'');
                                document.location.href = location
                                    + '?r=' + num_days
                                    + '&s=' + from_year + "-" + from_month + "-" + from_day;
                            }
                        },
                        {
                            text: 'Cancel',
                            click: function() {
                                $(this).dialog("close");
                            }
                        }
                    ]
                });
            } else {
                // Tell server about selected option to get new data
                var location = document.location.href.replace(/\?.*/,'');
                document.location.href = location + '?r=' + option;
            }
        });


        // set up stats breakdown dateOptions
        $('#stats-breakdown-dateOptions input').click(function() {
            $('.stats-breakdown-value').hide();
            $('.stats-breakdown-value.'+$(this).val()).show();
        });

        // set up custom dateOptions modal dialog
        $('#dashboard-dateOptions-custom-from').xdatepicker({
            defaultDate: '-15d',
            maxDate: '0d',
            onSelect: function(selectedDate) {
                var other = $('#dashboard-dateOptions-custom-to');
                var instance = $(this).data("datepicker");
                var date = $.xdatepicker.parseDate(instance.settings.dateFormat
                                                  || $.xdatepicker._defaults.dateFormat,
                                                  selectedDate,
                                                  instance.settings);
                other.xdatepicker('option', 'minDate', date);
            }
        });

        $('#dashboard-dateOptions-custom-to').xdatepicker({
            defaultDate: '-1d',
            maxDate: '0d',
            onSelect: function(selectedDate) {
                var other = $('#dashboard-dateOptions-custom-from');
                var instance = $(this).data("datepicker");
                var date = $.xdatepicker.parseDate(instance.settings.dateFormat ||
                                                  $.xdatepicker._defaults.dateFormat,
                                                  selectedDate,
                                                  instance.settings);
                other.xdatepicker('option', 'maxDate', date);
            }
        });
    }


    function initializeDailyCounts() {
        $('.appData-details').each(function() {
            var details = $(this);
            var data = $('.appData-details-inner', details);
            var button = $('.appData-details-toggleButton', details);

            function getButtonTextElement() {
                var buttonTextElement = $('.ui-button-text', button);
                if(buttonTextElement.length === 0) {buttonTextElement = button;}
                return buttonTextElement;
            }

            function didShowData() {
                data.removeClass('hide');
                data.addClass('show');
                button.button('option', {icons: { primary: 'ui-icon-triangle-1-n' }});
                getButtonTextElement().text('Hide details');
            }

            function didHideData() {
                data.removeClass('show');
                data.addClass('hide');
                button.button('option', {icons: { primary: 'ui-icon-triangle-1-s' }});
                getButtonTextElement().text('Show details');
            }

            if (data.hasClass('show')) {
                didShowData();
            } else {
                data.hide();
                didHideData();
            }

            button.click(function(e) {
                e.preventDefault();
                if (data.hasClass('show')) {
                    data.slideUp('fast');
                    didHideData();
                } else {
                    data.slideDown('fast');
                    didShowData();
                }
            });
        });
    }


    function manageCreative(action){
        $('#creativeManagementForm-action').val(action);
        var $form = $('#creativeManagementForm');
        $form.find('input[name="key"]').remove();
        $('#advertiser-creativeData').find('input[name="creativeManagementForm-key"]:checked')
            .each(function(i){
                $(this).val(); // key
                $('<input></input>').attr('name','key').attr('type','hidden')
                    .val($(this).val())
                    .appendTo($form);
            });
        $form.submit();
    }

    function initializeCreativeForm() {
        $('#creativeCreateForm [name="ad_type"]')
            .change(function(e){
                $('.adTypeDependent',"#creativeCreateForm").hide();
                $('.adTypeDependent.'+$(this).val(),"#creativeCreateForm").show();
            })
            .change()
            .filter(':checked')
            .change();

        $('.format-options').change(function(e) {
            e.preventDefault();
            if ($(this).val()=="custom"){
                $(this).parents("form").find('.customc_only').show();
            } else {
                $(this).parents("form").find('.customc_only').hide();
            }

            if ($(this).val().search(/full/i) != -1){
                $(this).parents().find('.full_only').show();
            } else {
                // $('input[name$=landscape]').removeAttr('checked');
                $(this).parents().find('.full_only').hide();
            }
        }).change();

        $('#creativeCreateForm-submit')
            .button({
                icons: { secondary: "ui-icon-circle-triangle-e" }
            })
            .click(function(e) {
                e.preventDefault();
                $('#creativeCreateForm-loading').show();
                $('#creativeCreateForm').submit();
            });

        $('#creativeCreateForm-cancel')
            .button()
            .click(function(e) {
                e.preventDefault();
                $('#advertiser-creativeAddForm').slideUp('fast', function() {
                    $('#advertiser-adgroups-addCreativeButton').show();
                });
            });

        $('.creativeEditForm [name="ad_type"]')
            .change(function(e){
                // gets the form to which this belongs
                var form = $(this).parents('form');
                $('.adTypeDependent',form).hide();
                $('.adTypeDependent.'+$(this).val(),form).show();
            })
            .change()
            .filter(':checked')
            .change();


        $('.creativeFormAdvancedToggleButton')
            .button('option', {icons: { primary: 'ui-icon-triangle-1-s' }})
            .click(function(e) {
                e.preventDefault();
                var $options = $(this).parents('form').find('.creativeForm-advanced-options');
                if ($options.is(':hidden')) {
                    $options.slideDown('fast').removeClass('hidden');
                    $(this).button('option', {icons: { primary: 'ui-icon-triangle-1-n' }});
                    $('.ui-button-text', this).text('Less Options');
                } else {
                    $options.slideUp('fast').addClass('hidden');
                    $(this).button('option', {icons: { primary: 'ui-icon-triangle-1-s' }});
                    $('.ui-button-text', this).text('More Options');
                }
            });

        $('.creativeAddForm-url-helpLink').click(function(e) {
            e.preventDefault();
            $('#creativeAddForm-url-helpContent').dialog({
                buttons: { "Close": function() { $(this).dialog("close"); } }
            });
        });

        $('#creativeAddForm input[name="creative_type"]')
            .click(function(e) {
                $('#creativeCreate-text_icon').hide();
                $('#creativeCreate-image').hide();
                $('#creativeCreate-html').hide();
                $('#creativeCreate-'+$(this).val()).show();
            })
            .filter(':checked')
            .click(); // make sure we're in sync when the page loads

        $('#creativeAddForm-cancel')
            .button()
            .click(function(e){
                e.preventDefault();
                $('#advertiser-creativeAddForm').slideUp('fast', function() {
                    $('#advertiser-adgroups-addCreativeButton').show();
                });
            });

        // Creative form ajax options
        $('#creativeCreateForm').ajaxForm({
            data: { ajax: true },
            dataType : 'json',
            success: function(jsonData) {

                $('#creativeCreateForm-loading').hide();
                if (jsonData.success) {
                    $('#creativeCreateForm-success').show();
                    window.location.reload();
                } else {
                    $.each(jsonData.errors, function (iter, item) {
                        $('.form-error-text', "#creativeCreateForm").remove();
                        var name = item[0];
                        var error_div = $("<div>").append(item[1]).addClass('form-error-text');

                        $("input[name=" + name + "]", "#creativeCreateForm")
                            .addClass('error')
                            .parent().append(error_div);

                    });
                    // reimplement the onload event
                    initializeCreativeForm();
                    window.location.hash = '';
                    window.location.hash = 'advertiser-creativeAddForm';
                    $('#campaignAdgroupForm-submit').button({'label':'Continue','disabled':false});
                }
            },
            error: function(jqXHR, textStatus, errorThrown){

            }
        });


        $('.creativeEditForm').each(function(i){
                var $this = $(this);
                var options = {
                    data: { ajax : true },
                    dataType: 'json',
                    success: function(jsonData, statusText, xhr, $form){
                        $form.find('.creativeEditForm-loading').hide();
                        if (jsonData.success){
                            $form.find('.creativeCreateForm-success').show();
                            $form.parent();
                            $form.find('.creativeCreateForm-success').hide();
                            window.location.reload();
                        } else {
                            //$form.find('.creativeEditForm-fragment').html($.decodeHtml(jsonData.html));
                            $('.form-error-text', $form).remove();
                            $.each(jsonData.errors, function (iter, item) {

                                var name = item[0];
                                var error_div = $("<div>").append(item[1]).addClass('form-error-text');

                                $("input[name=" + name + "]", $form)
                                    .addClass('error')
                                    .parent().append(error_div);

                            });
                            // re-implement onload
                            $('.creativeEditForm input[name="ad_type"]')
                                .click(function(e){
                                    $(this).parents('form') // gets the form to which this belongs
                                        .find('.adTypeDependent').hide().end()
                                        .find('.'+$(this).val()).show().end();
                                }).filter(':checked').click();
                            window.location.hash = '';
                            window.location.hash = $form.prev("a").attr('name');
                        }
                    }
                };
            $(this).ajaxForm(options);
        });

        $('.creativeEditForm-submit')
            .button()
            .click(function(e) {
                e.preventDefault();
                $(this).parents('form').find('.creativeEditForm-loading').show();
                $(this).parents('form').submit();
            });

        $('.creativeEditForm-cancel')
            .button()
            .click(function(e) {
                e.preventDefault();
                $(this).parents('.advertiser-creativeEditForm')
                    .dialog('close');
            });
    }


    function initializeChart() {
        function getCurrentChartSeriesType() {
            var activeBreakdownsElem = $('#dashboard-stats .stats-breakdown .active');
            if (activeBreakdownsElem.attr('id') == 'stats-breakdown-ctr') return 'line';
            else return 'area';
        }

        // Use breakdown to switch charts
        $('.stats-breakdown tr').click(function(e) {
            var row = $(this);
            if(!row.hasClass('active')) {
                row.siblings().removeClass('active');
                row.addClass('active');
                $('#dashboard-stats-chart').fadeOut(100, function() {
                    mopub.Chart.setupDashboardStatsChart(getCurrentChartSeriesType());
                    $(this).show();
                });
            }
        });

        mopub.Chart.setupDashboardStatsChart(getCurrentChartSeriesType());
    }


    function fetchInventoryForAdGroup(adgroup_key, start_date, date_range) {
        window.start_date = dateToString(start_date);

        // Set up an adunit collection, but remap the url to the
        // adgroup endpoint. this way, we'll only get adunits that
        // belong to this adgroup.
        var adgroup_inventory = new AdUnitCollection();
        adgroup_inventory.adgroup_key = adgroup_key;
        adgroup_inventory.url = function() {
            return '/api/adgroup/'
                + this.adgroup_key
                + '/adunits/'
                + '?r=' + date_range
                + '&s=' + dateToString(start_date);
        };

        // Once the adgroup's adunit inventory has been fetched from
        // the server, render each of the adunits in the appropriate
        // table row. Additionally, fetch the adunit's app from the
        // server and render it too.
        adgroup_inventory.bind('reset', function(adunits){
            adunits.each(function(adunit){
                var app_key = adunit.get('app_key');
                var app = new App({ id: app_key });
                app.url = function() {
                    return '/api/adgroup/'
                        + adgroup_key
                        + '/apps/'
                        + app_key
                        + '?r=' + date_range
                        + '&s=' + dateToString(start_date);
                };

                app.bind('change', function(current_app) {
                    var appView = new AppView({
                        model: app,
                        el: "dashboard-app"
                    });
                    appView.renderInline();
                });

                app.fetch({
                    error: function () {
                        app.fetch({
                            error: toast_error
                        });
                    }
                });

                var adunitView = new AdUnitView({
                    model: adunit,
                    el: "dashboard-app"
                });
                adunitView.renderInline();
            });
        });

        adgroup_inventory.fetch({
            error: function () {
                adgroup_inventory.fetch({
                    error: toast_error
                });
            }
        });
    }

    var CampaignsController = {
        initializeDirectSold: function(bootstrapping_data) {

            var gtee_adgroups_data = bootstrapping_data.gtee_adgroups_data,
                promo_adgroups_data = bootstrapping_data.promo_adgroups_data,
                backfill_promo_adgroups_data = bootstrapping_data.backfill_promo_adgroups_data,
                ajax_query_string = bootstrapping_data.ajax_query_string;

            // Guaranteed
            var gtee_adgroups = new AdGroups(gtee_adgroups_data);
            var gtee_adgroups_view = new AdGroupsView({
                collection: gtee_adgroups,
                el: '#gtee-adgroups',
                tables: {
                    'High Priority': function(adgroup) {
                        return adgroup.get('level') == 'high';
                    },
                    'Normal Priority': function(adgroup) {
                        return adgroup.get('level') == 'normal';
                    },
                    'Low Priority': function(adgroup) {
                        return adgroup.get('level') == 'low';
                    }
                },
                title: 'Guaranteed Campaigns',
                type: 'gtee'
            });
            gtee_adgroups_view.render();
            gtee_adgroups.each(function(adgroup) {
                adgroup.fetch({
                    data: ajax_query_string,
                    error: function() {
                        adgroup.fetch({ error: toast_error });
                    }
                });
            });

            // Promotional
            var promo_adgroups = new AdGroups(promo_adgroups_data);
            var promo_adgroups_view = new AdGroupsView({
                collection: promo_adgroups,
                el: '#promo-adgroups',
                title: 'Promotional Campaigns',
                type: 'promo'
            });
            promo_adgroups_view.render();
            promo_adgroups.each(function(adgroup) {
                adgroup.fetch({
                    data: ajax_query_string,
                    error: function() {
                        adgroup.fetch({ error: toast_error });
                    }
                });
            });

            // Backfill Promotional
            var backfill_promo_adgroups = new AdGroups(backfill_promo_adgroups_data);
            var backfill_promo_adgroups_view = new AdGroupsView({
                collection: backfill_promo_adgroups,
                el: '#backfill-promo-adgroups',
                title: 'Backfill Promotional Campaigns',
                type: 'backfill_promo'
            });
            backfill_promo_adgroups_view.render();
            backfill_promo_adgroups.each(function(adgroup) {
                adgroup.fetch({
                    data: ajax_query_string,
                    error: function() {
                        adgroup.fetch({ error: toast_error });
                    }
                });
            });


            // TODO: move somewhere else
            $('#campaigns-appFilterOptions').selectmenu({
                style: 'popup',
                maxHeight: 300,
                width:184
            });

            $("#campaigns-filterOptions, #campaigns-appFilterOptions")
                .change(function() {
                    gtee_adgroups_view.render();
                    promo_adgroups_view.render();
                    backfill_promo_adgroups_view.render();
                });

            // Ad Campaign button
            $("#add_campaign_button").button({
                icons : { primary : 'ui-icon-circle-plus'}
            });

            // AdGroups form
            var actions = ['pause', 'resume', 'activate', 'archive', 'delete'];
            $.each(actions, function(iter, action) {
                $('#campaignForm-' + action).click(function(e) {
                    e.preventDefault();
                    $('#campaignForm')
                        .find("#action")
                        .attr("value", action)
                        .end()
                        .submit();
                });
            });

            $('#campaigns-filterOptions').buttonset({
                disabled: false
            });
        },

        initializeAdGroupDetail: function(bootstrapping_data) {
            var kind = bootstrapping_data.kind,
                adgroup_key = bootstrapping_data.adgroup_key;

            initializeCreativeForm();
            initializeChart();
            initializeDailyCounts();
            initializeDateButtons();
            fetchInventoryForAdGroup(adgroup_key,
                                     bootstrapping_data.start_date,
                                     bootstrapping_data.date_range);

            // Set up the click handler for the campaign status menu
            // in the top left of the page.
            $('#campaign-status-options')
                .change(function(e) {
                    var val = $(this).val();
                    $('#fake-campaignForm')
                        .find('#action')
                        .attr('value', val)
                        .end()
                        .submit();
                });

            // Delete redunundant first option
            $('#campaign-status-options-menu')
                .find('li')
                .first()
                .hide();

            // Set up the click handler for the creative status menu
            $.each(['pause', 'resume', 'delete'], function(iter, form_control) {
                $('#creativeManagementForm-' + form_control)
                    .click(function(e){
                        e.preventDefault();
                        manageCreative(form_control);
                    });
            });

            $('.creativeManagementForm-key')
                .change(function(e){
                    $('#creativeManagementForm input[name="key"]').remove(); // remove all keys
                    $('.creativeManagementForm-key:checked')
                        .each(function(i){
                            $(this).val(); // key
                        });
                    var $form = $('#creativeManagementForm');
                });

            $('.advertiser-inLineCreativePreview')
                .button({ icons : { primary : 'ui-icon-search' }})
                .click(function(e){
                    e.preventDefault();
                    var creative_key = $(this).attr("id");
                    var creative_src = $('#'+creative_key+'-preview-src').val();
                    var width = parseInt($("#"+creative_key+"-preview iframe").attr("width"));
                    var height = parseInt($("#"+creative_key+"-preview iframe").attr("height"));
                    $("#"+creative_key+"-preview iframe").attr('src', creative_src);
                    $("#"+creative_key+"-preview").dialog({
                        buttons: [{
                            text: 'Close',
                            click: function() { $(this).dialog("close"); }
                        }],
                        width: width+100,
                        height: height+130
                    });
                });

            $('.advertiser-inLineCreativeToggle')
                .button({ icons : { primary : 'ui-icon-wrench' }})
                .click(function(e){
                    e.preventDefault();
                    var creative_key = $(this).attr("id");
                    var creative_form = $("#"+creative_key+"-edit");
                    creative_form.dialog({width:1000});
                });

            $("#add_campaign_button").button({
                icons : { primary : 'ui-icon-circle-plus'}
            });

            $('#advertiser-adgroups-addCreativeButton')
                .button({ icons : { primary : 'ui-icon-circle-plus'} })
                .click(function(e){
                    e.preventDefault();
                        var creative_form = $('#advertiser-creativeAddForm');
                    if (creative_form.is(":hidden")) {
                        $('#advertiser-creativeAddForm').slideDown('fast');
                    } else {
                        $('#advertiser-creativeAddForm').slideUp('fast');
                    }
                });


            $('#advertisers-addCampaign')
                .button({
                    icons : {primary : 'ui-icon-circle-plus'}
                });

            $('#advertisers-adgroups-editAdGroupButton').button({
                icons: { primary: "ui-icon-wrench" }
            });

            var actions = ['pause', 'resume', 'activate', 'archive', 'delete'];
            $.each(actions, function(iter, action) {
                $('#campaignForm-' + action)
                    .click(function(e) {
                        e.preventDefault();
                        $('#campaignForm')
                            .find("#action")
                            .attr("value", action)
                            .end()
                            .submit();
                    });
            });

            // Delete redunundant first option
            $('#campaign-status-options-menu').find('li').first().hide();

            // Do Campaign Export Select stuff
            $('#advertiser-adgroups-exportSelect')
                .change(function(e) {
                    e.preventDefault();
                    var val = $(this).val();
                    if (val != 'exp') {
                        $('#campaignExportForm')
                            .find('#campaignExportType')
                            .val(val)
                            .end()
                            .submit();
                    }
                    $(this).selectmenu('index', 0);
                });

            // Hide unneeded li entry
            $('#advertiser-adgroups-exportSelect-menu').find('li').first().hide();

            // Set up device targeting
            $("#device_targeting_False").click(function(){
                $("#target-by-device").slideUp();
            });

            $("#device_targeting_True").click(function(){
                $("#target-by-device").slideDown();
            });

            if ($("#device_targeting_True:checked").length === 0) {
                $("#target-by-device").hide();
            }

            if ($(".creativeData").length === 0 && kind != 'network') {
                $('#chartWrapper').hide();
                $('#advertiser-creativeData').hide();
                $('#advertiser-adgroups-addCreativeButton').click();
            }

        },

        initializeCreateCampaign: function (bootstrapping_data) {
            setupAdGroupForm();
        },

        initializeCampaignArchive: function (bootstrapping_data) {
            $.each(['activate', 'delete'], function(iter, action) {
                $('#campaignForm-' + action).click(function(e) {
                    e.preventDefault();
                    $('#campaignForm').find("#action").attr("value", action).end().submit();
                });
            });
        }
    };

    window.CampaignsController = CampaignsController;

})(this.jQuery);

// Load the mopub global.
// **REFACTOR**: modularization
var mopub = mopub || {};

(function($, Backbone, _){

    /*
     * ## Settings
     * Define global settings that are used throughout the module.
     */

    // If the url contains 'localhost', we're debugging.
    var DEBUG = ('' + window.location).indexOf('localhost') !== -1;

    // the origin for the stats service
    var LOCAL_STATS_SERVICE_URL = 'http://localhost:8888/';
    var STATS_SERVICE_URL = 'https://stats-service.mopub.com/';
    var URL = DEBUG ? LOCAL_STATS_SERVICE_URL : STATS_SERVICE_URL;

    // Color theme for the charts and table rows.
    var COLOR_THEME = {
        primary: [
            'hsla(205,79%,61%,0.1)',
            'hsla(180, 50%, 50%, 0.1)',
            'hsla(120, 50%, 50%, 0.1)',
            'hsla(60, 50%, 50%, 0.1)',
            'hsla(0, 50%, 50%, 0.1)',
            'hsla(300, 50%, 50%, 0.1)',
            'hsla(240, 50%, 50%, 0.1)'
        ],
        secondary: [
            'hsla(200,77%,55%,1)',
            'hsla(180, 50%, 50%, 1)',
            'hsla(120, 50%, 50%, 1)',
            'hsla(60, 50%, 50%, 1)',
            'hsla(0, 50%, 50%, 1)',
            'hsla(300, 50%, 50%, 1)',
            'hsla(240, 50%, 50%, 1)'
        ]
    };

    // The number different things we can compare in the chart is
    // dependent on how many different colors we have in our color
    // theme. Add more colors to the color theme if you want more
    // comparisons.
    var MAX_COMPARISONS = COLOR_THEME.primary.length;

    // Map of property name to it's title
    var STATS = {
        'attempts': 'Att.',
        'clk': 'Clk.',
        'conv': 'Cnv.',
        'conv_rate': 'Cnv Rate',
        'cpm': 'CPM',
        'ctr': 'CTR',
        'fill_rate': 'Fill Rate',
        'imp': 'Imp.',
        'req': 'Req.',
        'rev': 'Rev.'
    };

    // Columns to display when the advertiser table has been expanded.
    var ADVERTISER_COLUMNS = [
        'rev',
        'imp',
        'clk',
        'ctr',
        'cpm',
        'attempts',
        'conv',
        'conv_rate'
    ];

    // Columns to display when the advertiser table is first loaded,
    // before expansion.
    var ADVERTISER_DEFAULT_COLUMNS = [
        'rev',
        'imp',
        'clk'
    ];

    // Columns to display when the publisher table has been expanded.
    var PUBLISHER_COLUMNS = [
        'rev',
        'imp',
        'clk',
        'ctr',
        'cpm',
        'conv',
        'conv_rate',
        'fill_rate',
        'req'
    ];

    // Columns to display when the publisher table is first loaded,
    // before expansion.
    var PUBLISHER_DEFAULT_COLUMNS = [
        'rev',
        'imp',
        'clk'
    ];

    // Columns that can be sorted on in either table.
    var SORTABLE_COLUMNS = [
        'attempts',
        'clk',
        'conv',
        'imp',
        'req',
        'rev'
    ];

    // Max number of rows to display per model on page load,
    // before either table has been expanded.
    var MAX_CAMPAIGNS = 6;
    var MAX_APPS = 12;
    var MAX_ADUNITS = 6;

    // Width and height of the charts.
    // *Note:* these are kept in the CSS as well. They'll also
    // need to be changed if you want to adjust the chart size.
    var WIDTH = 400;
    var HEIGHT = 125;


    /*
     * ## Helper functions
     */

     // Pops up a growl-style message when something has
     // gone wrong fetching data. Use this to catch 500/503
     // errors from the server.
    var toast_error = function (error) {
        if (debug) {
            console.log(error);
        }
        var message = $("Please <a href='#'>refresh the page</a> and try again.")
            .click(function(e){
                e.preventDefault();
                window.location.reload();
            });
        Toast.error(message, "Error fetching app data.");
    };


    // Records an event in all of the metrics tracking services we
    // use.
    function record_metric (name, args) {
        try {
            _kmq.push(['record', name, args]);
        } catch (x) {
            console.log(x);
        }

        try {
            mixpanel.track(name, args);
        } catch (x) {
            console.log(x);
        }
    }


    // Gets a date string (MM/DD) from a datapoint object with a
    // stringified date or hour field (like the one we'd get
    // in a response from the stats service).
    function get_date_from_datapoint(datapoint) {
        var timeslice = null;
        if (datapoint.hasOwnProperty('hour')) {
            timeslice = moment(datapoint['hour'], "YYYY-MM-DD-HH");
            timeslice = timeslice.format('M/D HH:00');
        } else if (datapoint.hasOwnProperty('date')) {
            timeslice = moment(datapoint['date'], "YYYY-MM-DD-HH");
            timeslice = timeslice.format('M/D');
        }
        return timeslice;
    }


    // Formats a number for display based on a property name.
    // Currency will get a $, percentages will get a %. All numbers
    // will be formatted with commas and KMBT.
    function format_stat(stat, value) {
        switch (stat) {
          case 'attempts':
          case 'clk':
          case 'conv':
          case 'imp':
          case 'req':
            return format_kmbt(value, true);
          case 'cpm':
          case 'rev':
            return '$' + format_kmbt(value, false);
          case 'conv_rate':
          case 'ctr':
          case 'fill_rate':
            return mopub.Utils.formatNumberAsPercentage(value);
        default:
            throw new Error('Unsupported stat "' + stat + '".');
        }
    }


    // Formats a number in KMBT (thousands, millions, billions,
    // trillions) formatting with three significant digits.
    // Example: 1000000 -> 1M, 1230000000 -> 12.3B
    function format_kmbt(number, integer) {
        if(number <= 0 || number >= 1000000000000000000000000) {
            return number;
        }
        if(number < 0.01) {
            return '~0';
        }
        if(number < 1) {
            return number.toFixed(2);
        }
        if(number < 1000 && integer) {
            return number;
        }
        var endings = ['', 'K', 'M', 'B', 'T', 'Qd', 'Qn', 'Sx'];
        var place = Math.floor(Math.floor(Math.log(number)/Math.log(10))/3);
        var result = (number / Math.pow(1000, place)).toPrecision(3) + endings[place];
        return result;
    }


    // Calculates conversion rate, cpm, ctr, and fill_rate for an object.
    // The object is in the form that we normally expect from the server.
    // The new keys and values are set on the object in place, so nothing
    // is returned.
    function calculate_stats(obj) {
        obj.conv_rate = obj.imp === 0 ? 0 : obj.conv / obj.imp;
        obj.cpm = obj.imp === 0 ? 0 : 1000 * obj.rev / obj.imp;
        obj.ctr = obj.imp === 0 ? 0 : obj.clk / obj.imp;
        obj.fill_rate = obj.req === 0 ? 0 : obj.imp / obj.req;
    }


    // Pads an integer <10 with a 0 on the left. Used for making dates.
    function pad(integer) {
        return integer < 10 ? '0' + integer : integer;
    }

    // Converts a string date to a javascript date object.
    function string_to_date(date_string) {
        var parts = date_string.split('-');
        return new Date(parts[0], parts[1] - 1, parts[2]);
    }


    // Converts a javascript date object to a string in the format we
    // like, "YYYY-MM-DD"
    function date_to_string(date) {
        return date.getFullYear() + '-' +
            (date.getMonth() + 1) + '-' +
            date.getDate();
    }


    // Converts a pretty date string ("03/08/1987") to a javascript
    // date object.
    function pretty_string_to_date(date_string) {
        var parts = date_string.split('/');
        return new Date(parts[2], parts[0] - 1, parts[1]);
    }


    // Converts a javascript date object to a pretty date string
    // e.g.  ("03/08/1987")
    function date_to_pretty_string(date) {
        return pad(date.getMonth() + 1) + '/' + pad(date.getDate()) + '/' + date.getFullYear();
    }


    // Converts a date hour string ("03-08-1987-13") to a javascript
    // date object.
    function string_to_date_hour(date_string) {
        var parts = date_string.split('-');
        return new Date(parts[0], parts[1] - 1, parts[2], parts[3]);
    }


    // Converts a javascript date object to a date hour string.
    // e.g. "2012-10-29-22"
    function date_hour_to_string(date) {
        return date.getFullYear() +
            '-' + (date.getMonth() + 1) +
            '-' + date.getDate() +
            '-' + date.getHours();
    }

    // obvious
    function get_today() {
        var now = new Date();
        return new Date(now.getFullYear(), now.getMonth(), now.getDate());
    }


    /*
     * ## Chart creation
     */

    // Returns a list of the charts that we're going to display.
    // Right now this just returns a hard-coded list, but in the
    // future this could come from user defined settings that are
    // stored in a cookie.
    function get_charts() {
        return ['rev', 'imp', 'clk', 'cpm'];
    }

    // Create a new chart using Rickshaw/d3.
    // `series` is the type of series we're representing (e.g. 'rev',
    // 'imp', 'clk') and is used for formatting axes and tooltips.
    // `element` is the name of the element (e.g. '#chart') to render
    // the chart in. The chart will be rendered when the function is
    // called.
    // `account_data` is all of the data you get back from a query.
    // `options` is not currently used, but will be used in the future
    // to specify stuff like height, width, and other rendering options.
    function createChart(series, element, account_data, options) {
        options = options || {};

        // HACK here.
        // Rickshaw area charts aren't set up well to deal with charts
        // with only one datapoint (charts will just appear blank). To
        // deal with this, we duplicate the datapoint in the list if there's
        // just one. However, if the datapoint value is non-zero, the chart
        // max will be set to that line, which is also annoying, so we have
        // to set a max value for the chart as well.
        var max = 0;
        account_data = _.map(account_data, function (range) {

            if (range.length === 1) {
                var id = range.id;

                // Make the single chart value appear in the middle of the graph
                // by setting the max to 2x the value.
                var new_max = (range[0][series] * 2);
                max = new_max > max ? new_max : max;

                range = range.concat(range);
                range.id = id;

                return range;
            }

            return range;
        });

        var all_chart_data = _.map(account_data, function(range, i){

            // Determine the stroke and fill color for the chart
            var stroke;
            var color;
            if (range.id === 'vs') {
                stroke = 'hsla(0, 0%, 75%, 1)';
                color = 'hsla(0, 0%, 75%, 0.0)';
            } else {
                stroke = COLOR_THEME.secondary[i];
                color = COLOR_THEME.primary[i];
            }

            var chart_data = _.map(range, function(datapoint, j){
                return {
                    x: j,
                    y: datapoint[series]
                };
            });

            // Format the data for rickshaw
            var individual_series_data = {
                data: chart_data,
                stroke: stroke,
                color: color
            };

            return individual_series_data;
        });



        // Hack to clear any current charts from the element. Rickshaw
        // doesn't remove the old chart from the element before it
        // renders a new one, so we have to do it manually.
        $(element).html('');

        // Create the new chart with our series data
        var chart = new Rickshaw.Graph({
            element: document.querySelector(element),
            width: WIDTH,
            height: HEIGHT,
            renderer: 'area',
            stroke: true,
            interpolation: 'linear',
            series: all_chart_data,
            // Second part of the single value hack here --
            max: max > 0 ? max : undefined
        });

        // When the graph is hovered over, we display the date and the
        // current value in a tooltip at the top.
        var hoverDetail = new Rickshaw.Graph.MoPubHoverDetail( {
            graph: chart,
            xFormatter: function(x) {
                var labels = _.map(account_data, function(range){
                    var single_datapoint = range[x];
                    var date = get_date_from_datapoint(single_datapoint);
                    var formatted_stat = format_stat(series, single_datapoint[series]);

                    return date + ": " + formatted_stat;
                });


                return labels.join('<br />');
            }
        });

        // On the X-axis, display the date in MM/DD form.
        var xAxis = new Rickshaw.Graph.Axis.X({
            graph: chart,
            labels: _.map(account_data[0], function(datapoint){
                return get_date_from_datapoint(datapoint);
            }),
            ticksTreatment: 'glow'
        });

        xAxis.render();

        // On the Y-axis, display the amount in KMBT form.
        var yAxis = new Rickshaw.Graph.Axis.Y({
            graph: chart,
            ticksTreatment: 'glow',
            ticks: 5,
            tickFormat: Rickshaw.Fixtures.Number.formatKMBT
        } );

        yAxis.render();

        // Render and return the chart
        chart.renderer.unstack = true;
        chart.render();

        chart.hoverDetail = hoverDetail;
        chart.xAxis = xAxis;
        chart.yAxis = yAxis;

        return chart;
    }


    /*
     * Initialization function that renders all 4 of the charts in the
     * dashboard page.
     */
    function initializeDashboardCharts(account_data) {

        // Get the list of metrics we want to make charts for.
        var charts_for_display = get_charts();

        // Create all of the charts and hold on to references so that
        // we can manipulate all of the charts as a group.
        var charts = [];
        _.each(charts_for_display, function(chart_type) {
            var selector = '#' + chart_type + '_chart';
            var chart = createChart(chart_type, selector, account_data);
            charts.push(chart);
        });

        // When any individual chart is hovered over, pop up the bar/tooltip
        // in every other chart.
        _.each(charts, function(chart_i){

            chart_i.element.addEventListener('mousemove', function(e) {
                _.each(charts, function(chart_j) {
                    chart_j.hoverDetail.visible=true;
                    chart_j.hoverDetail.update(e);
                });
            });

            chart_i.onUpdate(function(){
                _.each(charts, function(chart_j) {
                    chart_j.hoverDetail.update();
                });
            });

            chart_i.element.addEventListener('mouseout', function(e) {
                _.each(charts, function(chart_j) {
                    chart_j.hoverDetail.hide();
                });
            });

        });

        return charts;
    }


    var DashboardHelpers = {
        get_date_from_datapoint: get_date_from_datapoint,
        format_stat: format_stat,
        format_kmbt: format_kmbt,
        string_to_date: string_to_date,
        date_to_string: date_to_string
    };


    /*
     * ## Dashboard controller
     */

    var DashboardController = {
        initializeDashboard: function(bootstrapping_data) {
            var handshake_data = $.cookie('handshake_data');
            var handshake_iv = $.cookie('handshake_iv');

            var $advertiser_table = $('#advertiser');
            var $publisher_table = $('#publisher');

            // Set up JSONP for accessing data from the stats services.
            // We calculate derivative stats (ctr, fill, conversion
            // rate, etc) upon every query response for all datapoints.
            $.jsonp.setup({
                callbackParameter: "callback",
                dataFilter: function (json) {

                    _.each(['sum', 'vs_sum'], function (key) {
                        _.each(json[key], function (obj) {
                            calculate_stats(obj);
                        });
                    });

                    _.each(['daily', 'hourly', 'vs_daily', 'vs_hourly', 'top', 'vs_top'], function (key) {
                        _.each(json[key], function (list) {
                            _.each(list, function (obj) {
                                calculate_stats(obj);
                            });
                        });
                    });

                    return json;
                },
                error: toast_error,
                url: URL + 'stats/'
            });

            // Looks at the publisher or advertiser table rows that
            // have been selected and pulls out the corresponding
            // object id's. This is often used for getting a list of
            // id's to query for.  `type` is one of: `'source'`,
            // `'campaign'`, `'app'`, `'adunit'`
            function get_keys(type) {
                if(((type == 'source' || type == 'campaign') &&
                    !$('tr.source.selected, tr.campaign.selected')) ||
                   ((type == 'app' || type == 'adunit') &&
                    !$('tr.app.selected, tr.adunit.selected'))) {

                    return _.map($('tr.' + type), function (tr) {
                        return tr.id;
                    });
                }

                return _.map($('tr.' + type + '.selected'), function (tr) {
                    return tr.id;
                });
            }


            /*
             * ## Templating
             */
            var filter_body_row = _.template($('#filter_body_row').html());
            var filter_header_row = _.template($('#filter_header_row').html());

            var names = bootstrapping_data.names;

            function render_filter_body_row(context, stats, vs_stats) {
                context.name = names[context.id];

                context.stats = [];
                _.each(context.columns, function (column) {
                    context.stats[column] = format_stat(column, stats[column]);
                });

                if(typeof(vs_stats) !== 'undefined') {
                    context.deltas = {};
                    _.each(context.columns, function (column) {
                        if(vs_stats[column] === 0) {
                            context.deltas[column] = {
                                'class': '',
                                'value': ''
                            };
                        }
                        else {
                            var delta = Math.round(100 * (stats[column] - vs_stats[column]) / vs_stats[column]);
                            if(delta === 0) {
                                context.deltas[column] = {
                                    'class': '',
                                    'value': '~0%'
                                };
                            }
                            else if(delta < 0) {
                                context.deltas[column] = {
                                    'class': 'negative',
                                    'value': delta + '%'
                                };
                            }
                            else if(delta > 999) {
                                context.deltas[column] = {
                                    'class': 'positive',
                                    'value': '>999%'
                                };
                            }
                            else {
                                context.deltas[column] = {
                                    'class': 'positive',
                                    'value': '+' + delta + '%'
                                };
                            }
                        }
                    });
                }

                return filter_body_row(context);
            }


            function get_data() {
                var data = {
                    account: bootstrapping_data['account'],
                    handshake_data: handshake_data,
                    handshake_iv: handshake_iv,
                    start: $('#start').val(),
                    end: $('#end').val()
                };

                if($('#vs_start').val() && $('#vs_end').val()) {
                    data['vs_start'] = $('#vs_start').val();
                    data['vs_end'] = $('#vs_end').val();
                }

                return data;
            }

            function update_dashboard(update_rollups_and_charts, advertiser_table, publisher_table) {
                var data = get_data();
                var advertiser_query = get_advertiser_query();
                var publisher_query = get_publisher_query();

                record_metric('Updated dashboard data', {
                    advertiser: '' + advertiser_query,
                    publisher: '' + publisher_query
                });

                if(update_rollups_and_charts) {
                    var rollups_and_charts_data = _.clone(data);
                    var granularity = get_granularity();
                    rollups_and_charts_data.granularity = granularity;
                    rollups_and_charts_data.query = [_.extend(_.clone(advertiser_query), publisher_query)];

                    if(advertiser_comparison_shown()) {
                        $('tr.selected', $advertiser_table).each(function (index, tr) {
                            var query = _.clone(publisher_query);
                            if($(tr).hasClass('source')) {
                                query.source = [tr.id];
                            }
                            else {
                                query.campaign = [tr.id];
                            }
                            rollups_and_charts_data.query.push(query);
                        });

                        $.jsonp({
                            data: {
                                data: JSON.stringify(rollups_and_charts_data)
                            },
                            success: function (json, textStatus) {
                                // defer so exceptions show up in the console
                                _.defer(function() {
                                    update_rollups(json.sum[0]);
                                    var charts_data = json[granularity].slice(1);
                                    initializeDashboardCharts(charts_data);
                                });
                            },
                            url: URL + 'stats/'
                        });
                    } else if(publisher_comparison_shown()) {
                        $('tr.selected', $publisher_table).each(function (index, tr) {
                            var query = _.clone(advertiser_query);
                            if($(tr).hasClass('app')) {
                                query.app = [tr.id];
                            }
                            else {
                                query.adunit = [tr.id];
                            }
                            rollups_and_charts_data.query.push(query);
                        });

                        $.jsonp({
                            data: {
                                data: JSON.stringify(rollups_and_charts_data)
                            },
                            success: function (json, textStatus) {
                                // defer so exceptions show up in the console
                                _.defer(function() {
                                    update_rollups(json.sum[0]);
                                    var charts_data = json[granularity].slice(1);
                                    initializeDashboardCharts(charts_data);
                                });
                            },
                            url: URL + 'stats/'
                        });
                    } else {
                        $.jsonp({
                            data: {
                                data: JSON.stringify(rollups_and_charts_data)
                            },
                            success: function (json, textStatus) {
                                // defer so exceptions show up in the console
                                _.defer(function() {
                                    var charts_data;
                                    if(json.vs_sum.length) {
                                        update_rollups(json.sum[0], json.vs_sum[0]);
                                        charts_data = [
                                            _.clone(json[granularity][0]),
                                            _.extend(_.clone(json['vs_' + granularity][0]), { id: 'vs' })
                                        ];
                                    } else {
                                        update_rollups(json.sum[0]);
                                        charts_data = [json[granularity][0]];
                                    }
                                    initializeDashboardCharts(charts_data);
                                });
                            },
                            url: URL + 'stats/'
                        });
                    }
                }

                if (advertiser_table) {
                    update_advertiser_table(data, publisher_query);
                }

                if (publisher_table) {
                    update_publisher_table(data, advertiser_query);
                }
            }

            function update_rollups(data, vs_data) {
                _.each(get_charts(), function (stat) {

                    var rollup = $('#' + stat + ' > div');
                    rollup.children('div.value').html(format_stat(stat, data[stat]));

                    if (vs_data && vs_data[stat] !== 0) {
                        var delta = rollup.children('div.delta');
                        var val = Math.round(100 * (data[stat] - vs_data[stat]) / vs_data[stat]);
                        var html = '';
                        if (val > 0) {
                            html += '+';
                            delta.removeClass('negative');
                            delta.addClass('positive');
                        } else if (val < 0) {
                            delta.removeClass('positive');
                            delta.addClass('negative');
                        } else {
                            html += '~';
                            delta.removeClass('positive');
                            delta.removeClass('negative');
                        }
                        html += val + '%';
                        delta.html(html);
                    } else {
                        rollup.children('div.delta').html('');
                    }
                });
            }

            /*
             * ## Tables
             */
            function update_advertiser_table(data, publisher_query) {
                var selected = _.map($('tr.selected', $advertiser_table), function (tr) { return tr.id; });
                var order = get_advertiser_order();

                var source_data = _.clone(data);
                source_data.query = _.map(['direct', 'mpx', 'network'], function (source) {
                    var query = _.clone(publisher_query);
                    query.source = [source];
                    return query;
                });

                $.jsonp({
                    data: {
                        data: JSON.stringify(source_data)
                    },
                    success: function (json) {
                        // defer so exceptions show up in the console
                        _.defer(function() {
                            // render header row
                            $('thead', $advertiser_table).html(filter_header_row({
                                title: 'Ads',
                                columns: ADVERTISER_COLUMNS,
                                default_columns: ADVERTISER_DEFAULT_COLUMNS,
                                orderable_columns: SORTABLE_COLUMNS,
                                order: get_advertiser_order(),
                                deltas: json.vs_sum.length,
                                stats: STATS
                            }));

                            $('tr.campaign, tr.more', $advertiser_table).remove();

                            _.each(source_data.query, function(query, index) {
                                var id = query.source[0];
                                var context = {
                                    type: 'source',
                                    selected: _.include(selected, id),
                                    hidden: false,
                                    id: id,
                                    columns: ADVERTISER_COLUMNS,
                                    default_columns: ADVERTISER_DEFAULT_COLUMNS,
                                    order: order
                                };
                                var stats = json.sum[index];
                                var vs_stats;
                                if(json.vs_sum.length) {
                                    vs_stats = json.vs_sum[index];
                                }
                                $source = $(render_filter_body_row(context, stats, vs_stats));
                                if(advertiser_comparison_shown()) {
                                    $source.css('background-color', COLOR_THEME.primary[selected.indexOf(id)]);
                                }
                                if($('#' + context.id).length) {
                                    $('#' + context.id).replaceWith($source);
                                }
                                else {
                                    $advertiser_table.append($source);
                                }
                            });
                            update_campaigns(data, publisher_query, selected, order);
                        });
                    },
                    url: URL + 'stats/'
                });
            }

            function update_campaigns(data, publisher_query, selected, order) {
                // TODO: make this a single request instead of two, like is done
                // for publisher table
                _.each(['direct', 'network'], function (source) {
                    var campaign_data = _.clone(data);
                    campaign_data.granularity = 'top';
                    campaign_data.query = [_.extend(_.clone(publisher_query), {
                        source: [source],
                        order: order,
                        top: 'campaign'
                    })];

                    $.jsonp({
                        data: {
                            data: JSON.stringify(campaign_data)
                        },
                        success: function(json) {
                            // defer so exceptions show up in the console
                            _.defer(function() {
                                var $last = $('#' + source);
                                var campaigns_hidden = false;
                                _.each(json.top[0], function(top, index) {
                                    var id = top.campaign;
                                    var hidden = index >= MAX_CAMPAIGNS;
                                    var selected = _.include(selected, id) || (!advertiser_comparison_shown() && _.include(selected, source));
                                    if(hidden && !selected) {
                                        campaigns_hidden = true;
                                    }
                                    var context = {
                                        type: 'campaign',
                                        selected: selected,
                                        hidden: hidden,
                                        id: id,
                                        columns: ADVERTISER_COLUMNS,
                                        default_columns: ADVERTISER_DEFAULT_COLUMNS,
                                        order: order
                                    };
                                    var stats = json.top[0][index];
                                    var vs_stats;
                                    if(json.vs_top.length && json.vs_top[0].length) {
                                        vs_stats = json.vs_top[0][index];
                                    }
                                    var $campaign = $(render_filter_body_row(context, stats, vs_stats));
                                    if(advertiser_comparison_shown()) {
                                        $campaign.css('background-color', COLOR_THEME.primary[selected.indexOf(id)]);
                                    }
                                    $last.after($campaign);
                                    $last = $campaign;
                                });

                                if(campaigns_hidden) {
                                    $last.after('<tr class="more"><td>More...</td></tr>');
                                }

                                update_advertiser_stats_display();

                                if(advertiser_columns_shown()) {
                                    show_advertiser_columns();
                                }
                                else {
                                    hide_advertiser_columns();
                                }

                                if(advertiser_rows_shown()) {
                                    show_advertiser_rows();
                                }
                                else {
                                    hide_advertiser_rows();
                                }
                            });
                        },
                        url: URL + 'topN/'
                    });
                });
            }

            function update_publisher_table(data, advertiser_query) {
                var selected = _.map($('tr.selected', $publisher_table), function (tr) { return tr.id; });
                var order = get_publisher_order();

                var app_data = _.clone(data);
                app_data.granularity = 'top';
                app_data.query = [_.extend(_.clone(advertiser_query), {
                    order: order,
                    top: 'app'
                })];

                $.jsonp({
                    data: {
                        data: JSON.stringify(app_data)
                    },
                    success: function(json) {
                        // defer so exceptions show up in the console
                        _.defer(function() {
                            // render header row
                            $('thead', $publisher_table).html(filter_header_row({
                                title: 'Apps',
                                columns: PUBLISHER_COLUMNS,
                                default_columns: PUBLISHER_DEFAULT_COLUMNS,
                                orderable_columns: SORTABLE_COLUMNS,
                                order: get_publisher_order(),
                                deltas: json.vs_top.length,
                                stats: STATS
                            }));

                            $('tr.app, tr.adunit', $publisher_table).remove();

                            _.each(json.top[0], function (top, index) {
                                var id = top.app;
                                var context = {
                                    type: 'app',
                                    selected: _.include(selected, id),
                                    hidden: index >= MAX_APPS,
                                    id: id,
                                    columns: PUBLISHER_COLUMNS,
                                    default_columns: PUBLISHER_DEFAULT_COLUMNS,
                                    order: order
                                };
                                var stats = json.top[0][index];
                                var vs_stats;
                                if(json.vs_top.length && json.vs_top[0].length) {
                                    vs_stats = json.vs_top[0][index];
                                }
                                var $app = $(render_filter_body_row(context, stats, vs_stats));
                                if(publisher_comparison_shown()) {
                                    $app.css('background-color', COLOR_THEME.primary[selected.indexOf(id)]);
                                }
                                $publisher_table.append($app);
                            });
                            update_adunits(data, advertiser_query, selected, order);
                        });
                    },
                    url: URL + 'topN/'
                });
            }

            function update_adunits(data, advertiser_query, selected, order) {
                var $apps = $('tr.app', $publisher_table);
                var $app_groups = [];

                for(var i = 0; i < $apps.length; i += MAX_APPS) {
                    $app_groups.push($apps.slice(i, i + MAX_APPS));
                }

                _.each($app_groups, function(app_group) {
                    var adunit_data = _.clone(data);
                    adunit_data.granularity = 'top';
                    adunit_data.query = [];

                    app_group.each(function () {
                        var app = this.id;

                        var query = _.extend(_.clone(advertiser_query), {
                            app: [app],
                            order: order,
                            top: 'adunit'
                        });
                        adunit_data.query.push(query);
                    });

                    $.jsonp({
                        data: {
                            data: JSON.stringify(adunit_data)
                        },
                        success: function (json) {
                            // defer so exceptions show up in the console
                            _.defer(function() {
                                _.each(adunit_data.query, function (query, query_index) {
                                    var app = query.app[0];
                                    var $last = $('#' + app);
                                    _.each(json.top[query_index], function(top, index) {
                                        var id = top.adunit;
                                        var context = {
                                            type: 'adunit',
                                            selected: _.include(selected, id) || (!publisher_comparison_shown() && _.include(selected, app)),
                                            hidden: $('#' + app).hasClass('hidden') || index >= MAX_ADUNITS,
                                            id: id,
                                            columns: PUBLISHER_COLUMNS,
                                            default_columns: PUBLISHER_DEFAULT_COLUMNS,
                                            order: order
                                        };
                                        var stats = json.top[query_index][index];
                                        var vs_stats;
                                        if(json.vs_top.length && json.vs_top[query_index].length) {
                                            vs_stats = json.vs_top[query_index][index];
                                        }
                                        var $adunit = $(render_filter_body_row(context, stats, vs_stats));
                                        if(publisher_comparison_shown()) {
                                            $adunit.css('background-color', COLOR_THEME.primary[selected.indexOf(id)]);
                                        }
                                        $last.after($adunit);
                                        $last = $adunit;
                                    });
                                });

                                update_publisher_stats_display();

                                if(publisher_columns_shown()) {
                                    show_publisher_columns();
                                }
                                else {
                                    hide_publisher_columns();
                                }

                                if(publisher_rows_shown()) {
                                    show_publisher_rows();
                                }
                                else {
                                    hide_publisher_rows();
                                }
                            });
                        },
                        url: URL + 'topN/'
                    });
                });
            }


            /* Date Range */

            /**
             * @param {string} start_end 'today', 'yesterday', 'last_7_days',
             *     'last_14_days', or 'custom'
             */
            function update_start_end(start_end) {
                var start, end;
                if(start_end == 'custom') {
                    start = pretty_string_to_date($('#custom_start').val());
                    end = pretty_string_to_date($('#custom_end').val());
                    end.setHours(23);
                }
                else {
                    switch(start_end) {
                        case 'today':
                            start = get_today();
                            end = get_today();
                            break;
                        case 'yesterday':
                            start = new Date(get_today() - 86400000);
                            end = new Date(get_today() - 86400000);
                            break;
                        case 'last_7_days':
                            start = new Date(get_today() - 86400000 * 6);
                            end = get_today();
                            break;
                        case 'last_14_days':
                            start = new Date(get_today() - 86400000 * 13);
                            end = get_today();
                            break;
                    }
                    end.setHours(23);

                    $('#custom_start').val(date_to_pretty_string(start));
                    $('#custom_end').val(date_to_pretty_string(end));
                }

                $('#start').val(date_hour_to_string(start));
                $('#end').val(date_hour_to_string(end));

                if(start_end == 'today' || start_end == 'yesterday') {
                    $('#start_end_label').html(date_to_pretty_string(start));
                }
                else {
                    $('#start_end_label').html(date_to_pretty_string(start) + ' to ' + date_to_pretty_string(end));
                }

                $('#vs li').hide();
                $('#vs li.' + start_end).show();

                update_vs_start_end('none');
                return {
                    'start': start,
                    'end': end
                };
            }

            $('#today, #yesterday, #last_7_days, #last_14_days').click(function () {
                update_start_end(this.id);
                record_metric('Changed date', {'date_range': this.id});
                update_dashboard(true, true, true);
            });

            $('#custom').click(function() {
                $('#date_modal').show();
            });

            $('#date_modal_submit').click(function () {
                $('#date_modal').hide();
                var dates = update_start_end('custom');
                record_metric('Changed date', {
                    date_range: 'custom',
                    start: dates.start,
                    end: dates.end
                });
                update_dashboard(true, true, true);
            });

            $('#date_modal_cancel').click(function () {
                $('#date_modal').hide();
            });

            // default start/end
            update_start_end('last_7_days');

            var valid_date_range = {
                endDate: "0d"
            };
            $('#custom_start').datepicker(valid_date_range);
            $('#custom_end').datepicker(valid_date_range);


            /* Comparison Date Range */
            function update_vs_start_end(vs_start_end) {
                if(vs_start_end == 'none') {
                    $('#vs_start').val('');
                    $('#vs_end').val('');
                    $('#vs_start_end_label').html('None');
                }
                else {
                    if(advertiser_comparison_shown()) {
                        hide_advertiser_comparison();
                    }
                    if(publisher_comparison_shown()) {
                        hide_publisher_comparison();
                    }

                    var start = string_to_date_hour($('#start').val());
                    var end = string_to_date_hour($('#end').val());
                    var diff;
                    switch(vs_start_end) {
                        case 'day':
                            diff = 86400000;
                            break;
                        case 'week':
                            diff = 86400000 * 7;
                            break;
                        case '14_days':
                            diff = 86400000 * 14;
                            break;
                    }
                    var vs_start = new Date(start - diff);
                    var vs_end = new Date(end - diff);

                    $('#vs_start').val(date_hour_to_string(vs_start));
                    $('#vs_end').val(date_hour_to_string(vs_end));

                    if(vs_start_end == 'day' || (vs_start_end == 'week' && end - start <= 86400000)) {
                        $('#vs_start_end_label').html(date_to_pretty_string(vs_start));
                    }
                    else {
                        $('#vs_start_end_label').html(date_to_pretty_string(vs_start) + ' to ' + date_to_pretty_string(vs_end));
                    }
                }
            }

            $('#none, #day, #week, #14_days').click(function () {
                update_vs_start_end(this.id);
                record_metric('Changed vs date', {
                    date_range: $(this).attr('id')
                });
                update_dashboard(true, true, true);
            });


            /* Granularity */
            function get_granularity() {
                return 'daily';
            }


            /* Export */
            $('button#export').click(function () {
                $('#export_wizard').modal('show');
            });
            $('button#download').click(function () {
                // Hide the modal when the download button is clicked.
                $('#export_wizard').modal('hide');

                var data = get_data();

                // Determine the query
                var query = {};

                var advertiser_breakdown = $('select[name="advertiser_breakdown"]').val();
                query[advertiser_breakdown] = get_keys(advertiser_breakdown);
                var publisher_breakdown = $('select[name="publisher_breakdown"]').val();
                query[publisher_breakdown] = get_keys(publisher_breakdown);

                _.extend(data, {
                    granularity: get_granularity(),
                    advertiser_breakdown: advertiser_breakdown,
                    publisher_breakdown: publisher_breakdown,
                    query: query
                });

                record_metric('Dashboard Export', {
                    advertiser_breakdown: data.advertiser_breakdown,
                    publisher_breakdown: data.publisher_breakdown
                });

                window.location = URL + 'csv/?data=' + encodeURIComponent(JSON.stringify(data));
            });


            /* Advertiser/Publisher Comparison */
            var $advertiser_comparison = $('#advertiser_comparison');

            function advertiser_comparison_shown() {
                return $advertiser_comparison.hasClass('hide');
            }

            function show_advertiser_comparison() {
                $advertiser_comparison.addClass('hide');
                $advertiser_comparison.removeClass('show');

                // default comparison selection: all sources
                $('tr.source', $advertiser_table).addClass('selected');
                $('tr.campaign', $advertiser_table).removeClass('selected');
            }

            function hide_advertiser_comparison() {
                $advertiser_comparison.addClass('show');
                $advertiser_comparison.removeClass('hide');

                // default no comparison selection: none
                $('tbody tr', $advertiser_table).removeClass('selected');
            }

            $advertiser_comparison.click(function () {
                if(advertiser_comparison_shown()) {
                    hide_advertiser_comparison();
                }
                else {
                    update_vs_start_end('none');
                    if(publisher_comparison_shown()) {
                        hide_publisher_comparison();
                    }
                    show_advertiser_comparison();
                }

                update_dashboard(true, true, true);
            });

            var $publisher_comparison = $('#publisher_comparison');

            function publisher_comparison_shown() {
                return $publisher_comparison.hasClass('hide');
            }

            function show_publisher_comparison() {
                $publisher_comparison.addClass('hide');
                $publisher_comparison.removeClass('show');

                // default comparison selection: all apps
                $('tr.app', $publisher_table).slice(0, MAX_CAMPAIGNS).addClass('selected');
                $('tr.adunit', $publisher_table).removeClass('selected');
            }

            function hide_publisher_comparison() {
                $publisher_comparison.addClass('show');
                $publisher_comparison.removeClass('hide');

                // default no comparison selection: none
                $('tbody tr', $publisher_table).removeClass('selected');
            }

            $publisher_comparison.click(function () {
                if(publisher_comparison_shown()) {
                    hide_publisher_comparison();
                }
                else {
                    update_vs_start_end('none');
                    if(advertiser_comparison_shown()) {
                        hide_advertiser_comparison();
                    }
                    show_publisher_comparison();
                }

                update_dashboard(true, true, true);
            });

            /* Columns */
            var $advertiser_columns = $('#advertiser_columns');

            function advertiser_columns_shown() {
                return $advertiser_columns.hasClass('hide');
            }

            function show_advertiser_columns() {
                $('#publisher_filters').hide();
                $('#advertiser_filters').addClass('expand');
                $('th, td', $advertiser_table).show();
            }

            function hide_advertiser_columns() {
                var order = get_advertiser_order();
                _.each(ADVERTISER_COLUMNS, function (column) {
                    if(!_.include(ADVERTISER_DEFAULT_COLUMNS, column) && column !== order) {
                        $('th.' + column + ', td.' + column, $advertiser_table).hide();
                    }
                });
                $('#advertiser_filters').removeClass('expand');
                $('#publisher_filters').show();
            }

            $advertiser_columns.click(function () {
                if(advertiser_columns_shown()) {
                    $advertiser_columns.addClass('show');
                    $advertiser_columns.removeClass('hide');

                    hide_advertiser_columns();

                    record_metric('Hid advertiser columns');
                }
                else {
                    $advertiser_columns.addClass('hide');
                    $advertiser_columns.removeClass('show');

                    show_advertiser_columns();

                    record_metric('Showed advertiser columns');
                }
            });

            var $publisher_columns = $('#publisher_columns');

            function publisher_columns_shown() {
                return $publisher_columns.hasClass('hide');
            }

            function show_publisher_columns() {
                $('#advertiser_filters').hide();
                $('#publisher_filters').addClass('expand');
                $('th, td', $publisher_table).show();
            }

            function hide_publisher_columns() {
                var order = get_publisher_order();
                _.each(PUBLISHER_COLUMNS, function (column) {
                    if(!_.include(PUBLISHER_DEFAULT_COLUMNS, column) && column !== order) {
                        $('th.' + column + ', td.' + column, $publisher_table).hide();
                    }
                });
                $('#publisher_filters').removeClass('expand');
                $('#advertiser_filters').show();
            }

            $publisher_columns.click(function () {
                if(publisher_columns_shown()) {
                    $publisher_columns.addClass('show');
                    $publisher_columns.removeClass('hide');

                    hide_publisher_columns();

                    record_metric('Hid publisher columns');
                }
                else {
                    $publisher_columns.addClass('hide');
                    $publisher_columns.removeClass('show');

                    show_publisher_columns();

                    record_metric('Showed publisher columns');
                }
            });


            /* Order */
            var $advertiser_order = $('#advertiser_order');

            function get_advertiser_order() {
                return $advertiser_order.val();
            }

            $('th.orderable', $advertiser_table).live('click', function () {
                var $th = $(this);
                var order;
                _.each(STATS, function (title, stat) {
                    if($th.hasClass(stat)) {
                        order = stat;
                        $advertiser_order.val(stat);
                    }
                });

                record_metric('Ordered advertiser table', {dimension: order});

                update_dashboard(false, true, false);
            });

            var $publisher_order = $('#publisher_order');

            function get_publisher_order() {
                return $publisher_order.val();
            }

            $('th.orderable', $publisher_table).live('click', function () {
                var $th = $(this);
                var order;
                _.each(STATS, function (title, stat) {
                    if($th.hasClass(stat)) {
                        order = stat;
                        $publisher_order.val(stat);
                    }
                });

                record_metric('Ordered publisher table', {dimension: order});

                update_dashboard(false, false, true);
            });


            /* Tables */
            /* TODO: refactor, reorganize */
            function update_advertiser_colors() {
                if(advertiser_comparison_shown()) {
                    $('tr', $advertiser_table).not('.selected').css('background-color', 'inherit');
                    $('tr.selected', $advertiser_table).each(function (index, tr) {
                        $(tr).css('background-color', COLOR_THEME.primary[index]);
                    });
                }
                else {
                    $('tr', $advertiser_table).css('background-color', 'inherit');
                }
            }

            function get_advertiser_query() {
                if($('tr.selected', $advertiser_table).length === 0) {
                    return {};
                }

                var use_source = true;
                $('tr.source', $advertiser_table).each(function (index, source) {
                    if(!$(source).hasClass('selected')) {
                        $(source).nextUntil('tr.source').each(function (index, campaign) {
                            if($(campaign).hasClass('selected')) {
                                use_source = false;
                            }
                        });
                    }
                });
                if(use_source) {
                    return { source: get_keys('source') };
                }

                return { campaign: get_keys('campaign') };
            }

            function update_advertiser_stats_display() {
                if($('tr.selected', $advertiser_table).length === 0) {
                    $('tbody tr td.stat span, tbody tr td.delta span', $advertiser_table).show();
                }
                else {
                    $('tbody tr', $advertiser_table).each(function () {
                        $('td.stat span, td.delta span', this).toggle($(this).hasClass('selected'));
                    });
                }
            }

            // select sources
            $('tbody tr.source', $advertiser_table).live('click', function () {
                var $source = $(this);
                $source.toggleClass('selected');

                if(advertiser_comparison_shown()) {
                    // TODO: make sure not more than MAX_COMPARISONS
                    update_advertiser_colors();
                }
                else {
                    // select or deselect this source's campaigns
                    if($source.hasClass('selected')) {
                        $source.nextUntil('.source').addClass('selected');
                    }
                    else{
                        $source.nextUntil('.source').removeClass('selected');
                    }
                }

                // TODO: only need to update this row
                update_advertiser_stats_display();

                record_metric("Selected source(s)", {});

                update_dashboard(true, false, true);
            });

            // select campaigns
            $('tbody tr.campaign', $advertiser_table).live('click', function () {
                var $campaign = $(this);
                $campaign.toggleClass('selected');

                if(advertiser_comparison_shown()) {
                    // TODO: make sure not more than MAX_COMPARISONS
                    update_advertiser_colors();
                }
                else {
                    // TODO: there has to be a better way to select this...
                    var $source = $campaign.prev();
                    while(!$source.hasClass('source')) {
                        $source = $source.prev();
                    }
                    if($campaign.hasClass('selected')) {
                        var selected = true;
                        $source.nextUntil('.source').each(function () {
                            if(!$(this).hasClass('selected')) {
                                selected = false;
                            }
                        });
                        if(selected) {
                            $source.addClass('selected');
                        }
                        else {
                            $source.removeClass('selected');
                        }
                    }
                    else {
                        $source.removeClass('selected');
                    }
                }

                // TODO: only need to update this row
                update_advertiser_stats_display();

                record_metric("Selected campaign(s)", {});

                update_dashboard(true, false, true);
            });

            function update_publisher_colors() {
                $('tr', $publisher_table).removeAttr('style');
                if(publisher_comparison_shown()) {
                    $('tr.selected', $publisher_table).each(function (index, tr) {
                        $(tr).css('background-color', COLOR_THEME.primary[index]);
                    });
                }
            }

            function get_publisher_query() {
                if($('tr.selected', $publisher_table).length === 0) {
                    return {};
                }

                var use_app = true;
                $('tr.app', $publisher_table).each(function (index, app) {
                    if(!$(app).hasClass('selected')) {
                        $(app).nextUntil('tr.app').each(function (index, adunit) {
                            if($(adunit).hasClass('selected')) {
                                use_app = false;
                            }
                        });
                    }
                });
                if(use_app) {
                    return { app: get_keys('app') };
                }

                return { adunit: get_keys('adunit') };
            }

            function update_publisher_stats_display() {
                if($('tr.selected', $publisher_table).length === 0) {
                    $('tbody tr td.stat span, tbody tr td.delta span', $publisher_table).show();
                }
                else {
                    $('tbody tr', $publisher_table).each(function () {
                        $('td.stat span, td.delta span', this).toggle($(this).hasClass('selected'));
                    });
                }
            }

            // select apps
            $('tbody tr.app', $publisher_table).live('click', function () {
                $(this).toggleClass('selected');

                if(publisher_comparison_shown()) {
                    // TODO: make sure not more than MAX_COMPARISONS
                    update_publisher_colors();
                }
                else {
                    // select or deselect this source's campaigns
                    if($(this).hasClass('selected')) {
                        $(this).nextUntil('.app').addClass('selected');
                    }
                    else{
                        $(this).nextUntil('.app').removeClass('selected');
                    }

                    // hide unselected rows' stats
                    if($('tbody tr.selected', $publisher_table).length === 0) {
                        $('tbody tr td.stat span, tbody tr td.delta span', $publisher_table).show();
                    }
                    else {
                        $('tbody tr', $publisher_table).each(function () {
                            $('td.stat span, td.delta span', this).toggle($(this).hasClass('selected'));
                        });
                    }
                }

                update_dashboard(true, true, false);
            });

            // select adunits
            $('tbody tr.adunit', $publisher_table).live('click', function () {
                $(this).toggleClass('selected');

                if(publisher_comparison_shown()) {
                    // TODO: make sure not more than MAX_COMPARISONS
                    update_publisher_colors();
                }
                else {
                    // TODO: there has to be a better way to select this...
                    $app = $(this).prev();
                    while(!$app.hasClass('app')) {
                        $app = $app.prev();
                    }
                    if($(this).hasClass('selected')) {
                        var selected = true;
                        $app.nextUntil('.app').each(function () {
                            if(!$(this).hasClass('selected')) {
                                selected = false;
                            }
                        });
                        if(selected) {
                            $app.addClass('selected');
                        }
                        else {
                            $app.removeClass('selected');
                        }
                    }
                    else {
                        $app.removeClass('selected');
                    }

                    // hide unselected rows' stats
                    if($('tbody tr.selected', $publisher_table).length === 0) {
                        $('tbody tr td.stat span, tbody tr td.delta span', $publisher_table).show();
                    }
                    else {
                        $('tbody tr', $publisher_table).each(function () {
                            $('td.stat span, td.delta span', this).toggle($(this).hasClass('selected'));
                        });
                    }
                }

                update_dashboard(true, true, false);
            });


            /* Rows */
            var $advertiser_rows = $('#advertiser_rows');

            function advertiser_rows_shown() {
                return $advertiser_rows.hasClass('hide');
            }

            function show_advertiser_rows() {
                $('tr', $advertiser_table).not('.more').show();
                $('tr.more', $advertiser_table).hide();
            }

            function hide_advertiser_rows() {
                $('tr.campaign', $advertiser_table).each(function () {
                    var $campaign = $(this);
                    $campaign.toggle(!$campaign.hasClass('hidden') || $campaign.hasClass('selected'));
                });
                $('tr.more', $advertiser_table).show();
            }

            function toggle_advertiser_rows() {
                if(advertiser_rows_shown()) {
                    $advertiser_rows.addClass('show');
                    $advertiser_rows.removeClass('hide');

                    hide_advertiser_rows();

                    record_metric('Hid advertiser rows');
                }
                else {
                    $advertiser_rows.addClass('hide');
                    $advertiser_rows.removeClass('show');

                    show_advertiser_rows();

                    record_metric('Showed advertiser rows');
                }
            }

            $advertiser_rows.click(toggle_advertiser_rows);

            $('tr.more', $advertiser_table).live('click', toggle_advertiser_rows);

            var $publisher_rows = $('#publisher_rows');

            function publisher_rows_shown() {
                return $publisher_rows.hasClass('hide');
            }

            function show_publisher_rows() {
                $('tr', $publisher_table).show();
            }

            function hide_publisher_rows() {
                $('tbody tr.app', $publisher_table).each(function () {
                    var $app = $(this);
                    var adunits_selected = false;
                    $app.nextUntil('tr.app').each(function () {
                        var $adunit = $(this);
                        if($adunit.hasClass('selected')) {
                            adunits_selected = true;
                        }
                        $adunit.toggle(!$adunit.hasClass('hidden') || $adunit.hasClass('selected'));
                    });
                    $app.toggle(!$app.hasClass('hidden') || $app.hasClass('selected') || adunits_selected);
                });
            }

            $publisher_rows.click(function () {
                if(publisher_rows_shown()) {
                    $publisher_rows.addClass('show');
                    $publisher_rows.removeClass('hide');

                    hide_publisher_rows();

                    record_metric('Hid publisher rows');
                }
                else {
                    $publisher_rows.addClass('hide');
                    $publisher_rows.removeClass('show');

                    show_publisher_rows();

                    record_metric('Showed publisher rows');
                }
            });

            // default comparison
            update_vs_start_end('week');

            update_dashboard(true, true, true);
        }
    };

    window.DashboardController = DashboardController;
    window.DashboardHelpers = DashboardHelpers;

})(this.jQuery, this.Backbone, this._);

/*
 * ## initializeDateButtons
 * Loads all click handlers/visual stuff for the date buttons. Used
 * on a ton of pages, probably could be refactored by someone brave
 * enough.
 */
function initializeDateButtons () {
    $('#dashboard-dateOptions input').click(function() {
        var option = $(this).val();
        if (option == 'custom') {
            $('#dashboard-dateOptions-custom-modal').dialog({
                width: 570,
                buttons: [
                    {
                        text: 'Set dates',
                        css: { fontWeight: '600' },
                        click: function() {
                            var from_date = $('#dashboard-dateOptions-custom-from').xdatepicker("getDate");
                            var to_date = $('#dashboard-dateOptions-custom-to').xdatepicker("getDate");
                            var num_days = Math.ceil((to_date.getTime()-from_date.getTime())/(86400000)) + 1;

                            var from_day = from_date.getDate();
                            // FYI, months are indexed from 0
                            var from_month = from_date.getMonth() + 1;
                            var from_year = from_date.getFullYear();

                            $(this).dialog("close");
                            var location = document.location.href.replace(/\?.*/,'');
                            document.location.href = location
                                + '?r=' + num_days
                                + '&s=' + from_year + "-" + from_month + "-" + from_day;
                        }
                    },
                    {
                        text: 'Cancel',
                        click: function() {
                            $(this).dialog("close");
                        }
                    }
                ]
            });
        } else {
            // Tell server about selected option to get new data
            var location = document.location.href.replace(/\?.*/,'');
            document.location.href = location + '?r=' + option;
        }
    });


    // set up stats breakdown dateOptions
    $('#stats-breakdown-dateOptions input').click(function() {
        $('.stats-breakdown-value').hide();
        $('.stats-breakdown-value.'+$(this).val()).show();
    });

    // set up custom dateOptions modal dialog
    $('#dashboard-dateOptions-custom-from').xdatepicker({
        defaultDate: '-15d',
        maxDate: '0d',
        onSelect: function(selectedDate) {
            var other = $('#dashboard-dateOptions-custom-to');
            var instance = $(this).data("datepicker");
            var date = $.xdatepicker.parseDate(instance.settings.dateFormat
                                              || $.xdatepicker._defaults.dateFormat,
                                              selectedDate,
                                              instance.settings);
            other.xdatepicker('option', 'minDate', date);
        }
    });

    $('#dashboard-dateOptions-custom-to').xdatepicker({
        defaultDate: '-1d',
        maxDate: '0d',
        onSelect: function(selectedDate) {
            var other = $('#dashboard-dateOptions-custom-from');
            var instance = $(this).data("datepicker");
            var date = $.xdatepicker.parseDate(instance.settings.dateFormat ||
                                              $.xdatepicker._defaults.dateFormat,
                                              selectedDate,
                                              instance.settings);
            other.xdatepicker('option', 'maxDate', date);
        }
    });
}


/*
 * # Mopub Marketplace JS
 */
var mopub = mopub || {};

// depends underscore, backbone, jquery, mopub.chart, mopub.util
(function($, _) {

    /*
     * ## Marketplace utility methods
     */

    var toast_error = function () {
         var message = $("Please <a href='#'>refresh the page</a> and try again.")
            .click(function(e){
                e.preventDefault();
                window.location.reload();
            });
        Toast.error(message, "Error fetching app data.");
    };

    /*
     * Fetches and renders all apps from a list of app_keys.
     * Useful for bootstrapping table loads.
     */
    function fetchAllApps (app_keys) {
        _.each(app_keys, function(app_key) {
            var app = new App({ id: app_key, stats_endpoint: 'mpx' });
            app.bind('change', function(current_app) {
                var appView = new AppView({
                    model: current_app,
                    el: 'marketplace-apps'
                });
                appView.render();
            });

            app.fetch({
                success: function(){
                    $('table').trigger('update');
                },
                error: function () {
                    app.fetch({
                        error: toast_error
                    });
                }
            });
        });
    }

    /*
     * Fetches all app stats using a list of app keys and renders
     * them into table rows that have already been created in the
     * page. Useful for decreasing page load time along with `fetchAdunitStats`.
     */
    function fetchAppStats (app_keys) {
        _.each(app_keys, function(app_key) {
            var app = new App({id: app_key, stats_endpoint: 'mpx'});
            app.bind('change', function(current_app) {
                var appView = new AppView({
                    model: current_app,
                    el: 'marketplace-apps'
                });
                appView.renderInline();
            });
            app.fetch({
                error: function () {
                    app.fetch({
                        error: toast_error
                    });
                }
            });
        });
    }

    /*
     * Fetches AdUnit stats over ajax and renders them in already
     * existing table rows.  This method is useful for decreasing page
     * load time. Uses a parent app's key to bootstrap the fetch.
     */
    function fetchAdunitStats (app_key, marketplace_active) {
        var adunits = new AdUnitCollection();
        adunits.app_id = app_key;
        adunits.stats_endpoint = 'mpx';
        // Once the adunits have been fetched from the server,
        // render them as well as the app's price floor range
        adunits.bind('reset', function(adunits_collection) {
            // Create the views and render each adunit row
            _.each(adunits_collection.models, function(adunit) {
                adunit.app_id = app_key;
                var adunitView = new AdUnitView({
                    model: adunit,
                    el: '#marketplace_stats'
                });
                adunitView.renderInline();
            });
        });
        adunits.fetch({
            success: function(){
                // Trigger any event handlers that have been attached
                // to the table.  Shouldn't this only trigger for the
                // table that the adunit stats are being placed in?
                $('table').trigger('update');
                $("#" + app_key + "-img").hide();
                if (!marketplace_active) {
                    $(".targeting-box").attr('disabled', true);
                }
            },
            error: function () {
                adunits.fetch({
                    error: toast_error
                });
            }
        });
    }

    /*
     * Fetches and renders all of the adunits from an app key.  Useful
     * for showing adunits when a user has clicked on a 'show adunits'
     * link.
     */
    function fetchAdunitsForApp (app_key) {
        var adunits = new AdUnitCollection();
        adunits.app_id = app_key;

        // Once the adunits have been fetched from the server, render
        // them as well as the app's price floor range
        adunits.bind('reset', function(adunits_collection) {

            // Get the max and min price floors from the adunits so we
            // can use them for the app's price floor range
            var high = _.max(adunits_collection.models, function(adunit){
                 return adunit.get("price_floor");
            }).get("price_floor");

            var low = _.min(adunits_collection.models, function(adunit){
                return adunit.get("price_floor");
            }).get("price_floor");

            // Set the app's price floor cell to the range of the
            // adunits Keep the "Edit Price Floor" button
            var btn = $("<a href='#" + app_key +"'" +
                        " class='edit_price_floor' " +
                        "id='" + app_key + "'> "
                        + "Edit Price Floor</a>");

            // Display the range of price floors for the app. (This is
            // no longer used, but left in because it could be used
            // again in the future).
            if (high == low) {
                $(".app-row#app-" + app_key + " .price_floor").html("All $" + high);
            } else {
                $(".app-row#app-" + app_key + " .price_floor").html("$" + low + " - " + "$" + high);
            }

            // Disable the 'view' link in the app row under the targeting column
            $(".app-row#app-" + app_key + " .view_targeting").addClass("hidden");

            // Create the views and render each adunit row
            _.each(adunits_collection.models, function(adunit) {
                var adunitView = new AdUnitView({
                    model: adunit,
                    el: 'marketplace-apps'
                });
                adunitView.render();
            });
        });

         adunits.fetch({
             error: function() {
                 adunits.fetch({
                     error: toast_error
                 });
             }
         });
    }

    /*
     * If an adunit row has for-app-[app_id] as a class,
     * strip the app_id and return it. Used for sorting
     * adunit rows underneath their apps.
     */
    function getAppId (adunit) {

        adunit = $(adunit);
        var app_id = '';
        var adunit_classes = adunit.attr('class').split(' ');

        _.each(adunit_classes, function(adunit_class) {
            if (adunit_class.search('for-app-') >= 0) {
                app_id = adunit_class.replace('for-app-', '');
            }
        });

        return app_id;
    }

    /*
     * Sends the AJAX request to turn ON the marketplace.
     * This shouldn't just return true, it should return true
     * only when no errors are returned from the server. Fix this.
     */
    function turnOn () {
        var on = $.post('/campaigns/marketplace/activation/', {
            activate: 'true'
        });

        on.error(function() {
            Toast.error("There was an error saving your Marketplace settings. Our support team has been notified. Please refresh your page and try again.");
        });

        on.done(function() { });

        $(".targeting-box").removeAttr('disabled');
        $("#blindness").removeAttr('disabled');
        return true;
    }

    /*
     * Sends the AJAX request to turn OFF the marketplace.
     * This shouldn't just return true, it should return true
     * only when no errors are returned from the server. Fix this.
     */
    function turnOff () {
        var off = $.post('/campaigns/marketplace/activation/', {
            activate: 'false'
        });
        $(".targeting-box").attr('disabled', true);
        $("#blindness").attr('disabled', true);
        return true;
    }

    /*
     * Makes the Creatives Performance tab's datatable
     */
    function makeCreativePerformanceTable (pub_id, blocklist, start_date, end_date) {

        var origin;
        if (!window.location.origin) {
            origin = window.location.protocol
                + "//" + window.location.host + "/";
            window.location.origin = origin;
        } else {
            origin = window.location.origin;
        }

        var creative_data_url = origin
            + "/campaigns/marketplace/creatives/";
        var table = $("#report-table").dataTable({
            bProcessing: true,
            // Use jQueryUI to style the table
            bJQueryUI: true,
            // Add page numbers to the table instead of just prev/next buttons
            sPaginationType: "full_numbers",
            // Message that appears when the table is empty
            oLanguage: {
                sEmptyTable: "No creatives have been displayed for this time range."
            },
            // Column Width
            aoColumns:[
                {sWidth: "330px"}, // Creative iFrame
                {sWidth: "190px"}, // Advertiser
                {sWidth: "120px"}, // Revenue
                {sWidth: "90px"},  // eCPM
                {sWidth: "90px"}   // Impressions
                //{"sWidth": "80px"}, // Clicks
                //{"sWidth": "80px"}, // CTR
            ],
            // Don't resize table columns automatically, we'll do it manually
            bAutoWidth:false,
            // Sort by revenue descending on table load
            aaSorting: [[2,'desc']],
            // Endpoint to fetch table data
            sAjaxSource: creative_data_url,
            // Tell datatables how to fetch and parse server data
            fnServerData: function( sUrl, aoData, fnCallback ) {
                $.ajax({
                    url: sUrl,
                    data: {
                        pub_id: pub_id,
                        start: start_date,
                        end: end_date,
                        format:'jsonp'
                    },
                    // When the data returns from the endpoint, we have to format it the way
                    // datatables wants. We also have to make sure to get the types of each
                    // data the way we want them if we want sorting to work correctly.
                    success: function(data, textStatus, jqXHR) {

                        var creative_data = _.map(data, function(creative, key) {
                            var ecpm = (creative['stats']['pub_rev'] / (creative['stats']['imp']+1))*1000;
                            return [
                                creative["creative"]["url"],
                                creative["creative"]["ad_dmn"],
                                creative["stats"]["pub_rev"].toFixed(2),
                                creative["stats"]["imp"],
                                ecpm
                            ];
                        });

                        var response = {
                            aaData: creative_data
                        };

                        fnCallback(response, textStatus, jqXHR);
                    },
                    dataType: "jsonp",
                    cache: false,
                    error: function(data, textStatus, jqXHR) {
                    }
                } );
            },
            // Callback function that takes table data and renders it
            // as a table row. Called on each row's data right before
            // it's rendered in the table (i.e. when a user clicks
            // 'next'/'prev', or changes the number of displayed rows)
            fnRowCallback: function(nRow, aData, iDisplayIndex) {

                $("td:eq(0)", nRow).html("<iframe width='320px' height='50px' src='" +
                                         aData[0] +
                                         "'></iframe>");

                var domain = aData[1];
                if (_.contains(blocklist, domain)) {
                    $("td:eq(1)", nRow).text(domain + " (Blocked)");
                } else if (domain != null) {
                    // Please leave this commented. This feature will be uncommented and used
                    // in the future. Thanks.
                    // var anchor = $("<a href='#'> Block </a>").click(function (event) {
                    //     var $this = $(this);
                    //     event.preventDefault();
                    //     var blocklist_xhr = $.post("/campaigns/marketplace/settings/blocklist/", {
                    //         action: 'add',
                    //         blocklist: domain
                    //     });
                    //     blocklist_xhr.done(function() {
                    //         $this.parent().append(' (Blocked)');
                    //         $this.remove();
                    //     });
                    // });
                    $("td:eq(1)", nRow).html(domain);
                } else {
                    $("td:eq(1)", nRow).html("<span class='muted'>(Unknown)</span>");
                }
                $("td:eq(2)", nRow).addClass("numeric").text("$" + mopub.Utils.formatNumberWithCommas(aData[2]));
                $("td:eq(3)", nRow).addClass("numeric").text(mopub.Utils.formatNumberWithCommas(aData[3]));
                $("td:eq(4)", nRow).addClass("numeric").text(mopub.Utils.formatCurrency(aData[4]));
                return nRow;
            }
        });

        return table;
    }

    /*
     * Adds a domain to the in=page blocklist, along with an
     * anchor + click event to remove it over Ajax.
     */
    function addToBlocklist (domain) {
        var anchor = $("<a href='#'>Remove</a>").click(blocklistRemoveClickHandler);
        var list_item = $("<li></li>").html(domain + " ");
        list_item.append(anchor);
        $("#blocked_domains").append(list_item);
    }

    function blocklistRemoveClickHandler (event) {
        event.preventDefault();

        var anchor = $(this);
        var domain = anchor.attr('id');
        $("img", anchor.parent()).removeClass('hidden');
        var blocklist_xhr = $.post("/campaigns/marketplace/settings/blocklist/", {
            action: 'remove',
            blocklist: domain
        });

        blocklist_xhr.done(function (response) {
            $("img#" + domain).addClass('hidden');
            anchor.parent().fadeOut();
        });

        blocklist_xhr.error(function (response) {
            $("img#" + domain).addClass('hidden');
            Toast.error("There was an error adding to your blocklist. Please try again.");
        });
    }

    var MarketplaceController = {
        initializeIndex: function (bootstrapping_data) {

            // Fill in the stats data for each of the apps and
            // each of their adunits
            fetchAppStats(bootstrapping_data.app_keys);
            _.each(bootstrapping_data.app_keys, function(app_key) {
                fetchAdunitStats(app_key, bootstrapping_data.marketplace_active);
            });

            var table = makeCreativePerformanceTable(bootstrapping_data.pub_key,
                                                     bootstrapping_data.blocklist,
                                                     bootstrapping_data.start_date,
                                                     bootstrapping_data.end_date);

            /*
             * Click handling for the stats breakdown
             * REFACTOR: move this to a common place because it's everywhere
             */
            $('.stats-breakdown tr').click(function(e) {
                var row = $(this);
                if (!row.hasClass('active')) {
                    var table = row.parents('table');
                    $('tr.active', table).removeClass('active');
                    row.addClass('active');
                }
            });

            /*
             * Blindness settings
             */
            $("#blindness").click(function () {
                var loading_img = $("#blindness-spinner").show();
                var saving = $("#blindness-save-status .saving").show();

                var blindness_xhr = $.post("/campaigns/marketplace/settings/blindness/",{
                    activate: $(this).is(":checked")
                });

                blindness_xhr.done(function(data){
                    loading_img.hide();
                    saving.hide();
                    if (data.hasOwnProperty('success')) {
                        var saved = $("#blindness-save-status .saved").show();
                        setTimeout(function() { saved.fadeOut(); }, 1000);
                    } else {
                        var errored = $("#blindness-save-status .error").show();
                        setTimeout(function() {errored.fadeOut(); }, 1000);
                    }
                });
            });

            /*
             * Table sorting doesn't work the way we'd like when adunits have been
             * displayed. We'd like them to sort underneath their apps. Without
             * this formatter function, they sort independently.
             */
            $.tablesorter.addWidget({
                id: 'adunitSorting',
                format: function(table) {
                    var app_id_cache = {};

                    $('.adunit-row', table).each(function(iter, item) {
                        // find the app row for the adunit
                        var app_id = Marketplace.getAppId(item);
                        var app;
                        if (app_id_cache.hasOwnProperty(app_id)) {
                            app = app_id_cache(app_id);
                        } else {
                            app = $('.app-row#app-' + app_id);
                        }
                        // remove the adunit from it's current location
                        $(item).remove();
                        // and place it after the app row
                        app.after(item);
                    });
                }
            });

            /*
             * Set up the marketplace table. By default we're going to sort by app name.
             * Icons (header 0), price floors (header 6) and targeting (header 7) columns
             * can't be sorted because that just doesn't make sense fool.
             */
            // $('marketplace-apps').tablesorter({
            //     widgets: ['adunitSorting'],
            //     sortList: [[1, 0]],
            //     headers: { 0: { sorter: false}, 6: {sorter: false}, 7: {sorter: false} }
            // });

            /*
             * Functionality for blocking advertisers from the creatives performance table
             */
            $('a.block').click(function (event) {
                event.preventDefault();
                var block_link = $(this);
                var domain = $(this).attr('id');
                $.ajax({
                    type: 'post',
                    url: '/campaigns/marketplace/settings/blocklist/',
                    data: {
                        blocklist: domain,
                        action: "add"
                    },
                    success: function (a,b) {
                        block_link.text("Blocked").unbind("click").click(function(){
                            return false;
                        });
                    }
                });
            });

            /*
             * Make the lightswitches turn the Marketplace on and off.
             * They're all bound to the same selector so that any time someone
             * clicks the Marketplace On/Off switch, all of them get turned off.
             */
            $(".lightswitch").lightswitch(turnOn, turnOff);

            /*
             * Toasts for the top and bottom lightswitches. Toasts are little flash messages
             * that let the user know something has happened. These should be rolled up
             * into their own library and put in mopub.js. For now they're here because
             * this is the only place they're used.
             *
             * # REFACTOR: use the new kind of toast
             */
            $("#top_switch").click(function() {
                if ( $("#top_switch .switch").hasClass('on') ) {
                    $("#first_time_toast").fadeIn();
                    setTimeout(function() {
                        $("#first_time_toast").fadeOut();
                    }, 3000);
                }
            });

            $("#bottom_switch").click(function() {
                if ( $("#bottom_switch .switch").hasClass('off') ) {
                    $("#settings_toast").fadeIn();
                    setTimeout(function() {
                        $("#settings_toast").fadeOut();
                    }, 3000);
                }
            });

            /*
             * ## Blocklist adding/editing
             * Click/form handlers and ajax stuff for the blocklist
             * in the settings tab
             */
            $('#blocklist-submit').click(function(e) {
                e.preventDefault();
                var blocklist = $("textarea[name='blocklist']").val();
                var blocklist_xhr = $.post('/campaigns/marketplace/settings/blocklist/', {
                    action: 'add',
                    blocklist: blocklist
                });

                blocklist_xhr.done(function (response) {
                    var domains = response['new'];
                    $.each(domains, function(iter, domain) {
                        addToBlocklist(domain);
                    });
                    $("textarea[name='blocklist']").val('');
                });

                blocklist_xhr.error(function (response) {
                    Toast.warning(response);
                });
            });

            /*
             * ## Blocklist removal
             */
            $("a.blocklist_remove").click(blocklistRemoveClickHandler);

            /*
             * ## Content filtering
             */

            $("input.content_level").click(function(){
                var self = $(this);
                var filter_level = self.attr('value');
                var loading_img = $("#filter-spinner").show();
                var saving = $("#filter-save-status .saving").show();
                var result = $.post("/campaigns/marketplace/settings/content_filter/", {
                    filter_level: filter_level
                });

                result.success(function(data){
                    loading_img.hide();
                    saving.hide();
                    if (data.hasOwnProperty('success')) {
                        var saved = $("#filter-save-status .saved").show();
                        setTimeout(function() { saved.fadeOut(); }, 1000);

                    } else {
                        var errored = $("#filter-save-status .error").show();
                        setTimeout(function() {errored.fadeOut(); }, 1000);
                    }
                });
            });




            /*
             * F THIS.
             * REFACTOR.
             *
             * Everything here and below needs to not exist in this file, because
             * it already exists in two other files. Obvo refactor.
             */
            function getCurrentChartSeriesType() {
                var activeBreakdownsElem = $('#dashboard-stats .stats-breakdown .active');
                if (activeBreakdownsElem.attr('id') == 'stats-breakdown-cpm') return 'line';
                else return 'area';
            }

            $('.stats-breakdown tr').click(function(e) {
                $('#dashboard-stats-chart').fadeOut(100, function() {
                    mopub.Chart.setupDashboardStatsChart(getCurrentChartSeriesType());
                    $(this).show();
                });
            });

            var dailyStats = mopub.accountStats["daily"];
            mopub.dashboardStatsChartData = {
                pointStart: mopub.graphStartDate,
                pointInterval: 86400000,
                rev: [{ "Total": mopub.Stats.statArrayFromDailyStats(dailyStats, "rev")}],
                imp: [{ "Total": mopub.Stats.statArrayFromDailyStats(dailyStats, "imp")}],
                cpm: [{ "Total": mopub.Stats.statArrayFromDailyStats(dailyStats, "cpm")}]
            };
            mopub.Chart.setupDashboardStatsChart(getCurrentChartSeriesType());

            // set up dateOptions
            $('#dashboard-dateOptions input').click(function() {
                var option = $(this).val();
                var hash = document.location.hash;
                if(option == 'custom') {
                    $('#dashboard-dateOptions-custom-modal').dialog({
                        width: 570,
                        buttons: [
                            {
                                text: 'Set dates',
                                css: { fontWeight: '600' },
                                click: function() {
                                    var from_date=$('#dashboard-dateOptions-custom-from').xdatepicker("getDate");
                                    var to_date=$('#dashboard-dateOptions-custom-to').xdatepicker("getDate");
                                    var num_days=Math.ceil((to_date.getTime()-from_date.getTime())/(86400000)) + 1;

                                    var from_day=from_date.getDate();
                                    var from_month=from_date.getMonth()+1;
                                    var from_year=from_date.getFullYear();

                                    $(this).dialog("close");
                                    var location = document.location.href.replace(hash, '').replace(/\?.*/,'');
                                    document.location.href = location +
                                        '?r=' + num_days +
                                        '&s=' + from_year + "-" + from_month + "-" + from_day +
                                        hash;
                                }
                            },
                            {
                                text: 'Cancel',
                                click: function() {
                                    $(this).dialog("close");
                                }
                            }
                        ]
                        });
                } else {
                    // Tell server about selected option to get new data
                    var location = document.location.href.replace(hash,'').replace(/\?.*/,'');
                    document.location.href = location+'?r=' + option + hash;
                }
            });

            // set up stats breakdown dateOptions
            $('#stats-breakdown-dateOptions input').click(function() {
                $('.stats-breakdown-value').hide();
                $('.stats-breakdown-value.'+$(this).val()).show();
            });

            // set up custom dateOptions modal dialog
            $('#dashboard-dateOptions-custom-from').xdatepicker({
                defaultDate: '-15d',
                maxDate: '0d',
                onSelect: function(selectedDate) {
                    var other = $('#dashboard-dateOptions-custom-to');
                    var instance = $(this).data("datepicker");
                    var date = $.xdatepicker
                        .parseDate(instance.settings.dateFormat ||
                                   $.xdatepicker._defaults.dateFormat,
                                   selectedDate,
                                   instance.settings);
                    other.xdatepicker('option', 'minDate', date);
                }
            });
            $('#dashboard-dateOptions-custom-to').xdatepicker({
                defaultDate: '-1d',
                maxDate: '0d',
                onSelect: function(selectedDate) {
                    var other = $('#dashboard-dateOptions-custom-from');
                    var instance = $(this).data("datepicker");
                    var date = $.xdatepicker
                        .parseDate(instance.settings.dateFormat ||
                                   $.xdatepicker._defaults.dateFormat,
                                   selectedDate,
                                   instance.settings);
                    other.xdatepicker('option', 'maxDate', date);
                }
            });

        }
    };

    window.MarketplaceController = MarketplaceController;

})(this.jQuery, this._);

/*
 * # MoPub Global JS
 */

//For JSLint Validation:
//global console: true, Highcharts: true

//mopub singleton object
var mopub = mopub || {};
mopub.Utils = mopub.Utils || {};

/*
 * Make sure there's a console.log function in case we forgot to remove debug statements
 */
if (window.console === undefined) {
    window.console = {
        log: function() {}
    };
}

/*
 * # Global document.ready function
 * If you want something to happen everywhere, on every page,
 * it should go here.
 */
(function($) {
    
    var mopub = window.mopub || {};
    var Chart = window.Chart || {};
    var Stats = window.Stats || {};

    $(document).ready(function() {
        

        // export tables as xls/csv
        // id is the html table's id attribute
        // format (optional) is either 'csv' or 'xls'
        // filename (optional) desired name of output file with extension
        function export_table(id, format, filename) {
            if (format != 'csv')
                format = 'xls';

            filename = filename || 'ExportData.' + format;

            output = {
                'headers': [],
                'body': [],
            };

            $table = $('#' + id);

            $table.find('thead tr th').each(function() {
                output.headers.push($(this).text());
            });

            $table.find('tbody tr').each(function() {
                row = [];
                $(this).find('th, td').each(function() {
                    row.push($(this).text());
                });
                output.body.push(row);
            });

            output = escape(JSON.stringify(output));
            filename = escape(JSON.stringify(filename));

            // add and submit a hidden form to propagate POST data
            // submit 'table' (the json data), 'format' (xls or csv), and 'filename' (string including extension)
            table_export_url = '/inventory/table_export/'
            $table.append('<form id="hidden-export-form" action="' + table_export_url + '" method="POST">');
            $hidden_export_form = $('#hidden-export-form');
            $hidden_export_form.append($('<input type="hidden" name="table" value="' + output + '">'));
            $hidden_export_form.append($('<input type="hidden" name="format" value="' + format + '">'));
            $hidden_export_form.append($('<input type="hidden" name="filename" value="' + filename + '">'));
            $hidden_export_form.submit();
        }

        // marketplace hiding
        if ($('#is_admin_input').val()=='False') {
            $('.marketplace').hide();
        }

        // preload images (defined below)
        var JQUERY_UI_IMAGE_PATH = '/js/libs/jquery-ui-1.8.7.custom/css/mopub/images';
        $.preLoadImages(
            '/images/ui/ui-button-active.png',
            '/images/ui/ui-button-default.png',
            '/images/ui/ui-button-hover.png',
            '/images/ui/ui-icons-active.png',
            '/images/ui/ui-icons-focus.png',
            '/images/ui/ui-icons-hover.png',
            '/images/ui/ui-icons-progress.png',
            JQUERY_UI_IMAGE_PATH + '/ui-bg_highlight-hard_25_e57300_1x100.png',
            JQUERY_UI_IMAGE_PATH + '/ui-bg_highlight-hard_50_dddddd_1x100.png',
            JQUERY_UI_IMAGE_PATH + '/ui-bg_highlight-hard_100_f3f3f3_1x100.png',
            JQUERY_UI_IMAGE_PATH + '/ui-bg_inset-soft_25_595959_1x100.png',
            JQUERY_UI_IMAGE_PATH + '/ui-icons_0090d9_256x240.png',
            JQUERY_UI_IMAGE_PATH + '/ui-icons_cc2929_256x240.png',
            JQUERY_UI_IMAGE_PATH + '/ui-icons_ffffff_256x240.png',
            '/placeholders/image.gif'
        );

        // replace <legend> with <h2>
        $('legend').each(function() {
            var legend = $(this);
            var h2 = $('<h2>'+legend.html()+'</h2>');
            h2.attr('class', legend.attr('class'));
            h2.attr('id', legend.attr('id'));
            legend.replaceWith(h2);
        });

        // set up buttons
        $('.button').button().css({ visibility: 'visible' });

        // set up buttonsets
        $('.buttonset').buttonset().css({ visibility: 'visible' });

        // gray out any buttonsets that ought to be disabled
        $('.buttonset-start-disabled').buttonset();
        $('.buttonset-start-disabled').buttonset({ disabled: true });

        // set up selectmenus
        $('.selectmenu').selectmenu().css({ visibility: 'visible' });

        // set up validation to be run on form submit
        $('.validate').validate();

        // Tables with the 'sortable' class will be made sortable by default
        $(".sortable").tablesorter();

        // Tabify tabs
        $('.tabs').tabs();
        $('.pills').tabs();

        // Where is this used?
        // $(".tree").treeview();

        // Override default jQuery UI dialog options
        $.extend($.ui.dialog.prototype.options, {
            modal: true,
            resizable: false,
            draggable: false,
            width: 400
        });

        // Override default jQuery UI datepicker options
        $.xdatepicker.setDefaults({
            dayNamesMin: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        });

        // Set up form placeholders
        $('input[placeholder], textarea[placeholder]').placeholder({ preventRefreshIssues: true });

        // Set up text overflow elements
        $('#titlebar .breadcrumb h1, .dataTable-name .inner').textOverflow(' &hellip;');

        // Set up dropdowns
        $(".dropdown-head").mopub_dropdown('.dropdown');

        // Set up alert-message closing
        $(".alert-message .close").click(function() {
            $(this).parent().fadeOut();
        });

        $('.formFields-field-help-link[title]').click(function(e) { e.preventDefault(); });



        // Message Center
        // hide message center when page loads if there are no messages
        function hideMessageCenterIfNoMessages() {
            if($('.messageCenter-message').length === 0) {
                $('#messageCenter').hide();
            }
        }
        hideMessageCenterIfNoMessages();

        // Set up "More info" links
        $('.messageCenter-message-moreInfoLink').click(function(e) {
            e.preventDefault();
            var link = $(this);
            var info = $('.messageCenter-message-moreInfo', link.parents('.messageCenter-message'));
            // clone info (so the original doesn't get moved around) and make the dialog
            info.clone().dialog({
                buttons: { "Close": function() { $(this).dialog("close"); } },
                close: function(e, u) { $(this).remove(); } // remove clone
            });
        });

        // Set up "Hide this" links
        $('.messageCenter-message-hide').click(function(e) {
            e.preventDefault();
            var link = $(this);
            var message = link.parents('.messageCenter-message');
            message.fadeOut('fast', function() {
                message.remove();
                hideMessageCenterIfNoMessages();
            });
        });
        // TODO: tell server that message.attr('id') has been hidden

        // Set up stats breakdown
        // Should be done in backbone view
        /*
        $('.stats-breakdown tr').click(function(e) {
            var row = $(this);
            if (!row.hasClass('active')) {
                var table = row.parents('table');
                $('tr.active', table).removeClass('active');
                row.addClass('active');
            }
        });
        */

        // Set up highcharts default options
        Highcharts.setOptions({
            chart: {
                animation: false,
                backgroundColor: null,
                borderRadius: 0,
                margin: [30,0,30,45],
                height: 185
            },
            title: { text: null },
            lang: {
                loading: "Loading ..."
            },
            credits: { enabled: false },
            style: {
                fontFamily: '"myriad-pro-1", "myriad-pro-2", Helvetica, Arial, sans-serif'
            },
            plotOptions: {
                series: {
                    animation: false,
                    shadow: false,
                    stickyTracking: false
                },
                area: {
                    lineWidth: 4,
                    fillOpacity: 0.1,
                    stacking: 'normal',
                    marker: {
                        lineWidth: 2,
                        radius: 5,
                        symbol: 'circle',
                        states: {
                            hover: {
                                lineWidth: 2,
                                radius: 7
                            }
                        }
                    },
                    states: {
                        hover: {
                            lineWidth: 4
                        }
                    }
                }
            },
            xAxis: {
                endOnTick: false,
                gridLineWidth: 0.5,
                gridLineColor: '#dddddd',
                lineWidth: 1,
                lineColor: '#cccccc',
                type: 'datetime',
                labels: {
                    style: {
                        fontFamily: '"myriad-pro-1", "myriad-pro-2", Helvetica, Arial, sans-serif',
                        color: '#999',
                        fontSize: '10px'
                    },
                    y: 20
                },
                dateTimeLabelFormats: {
                    second: '%b %e %l:%M:%S%p',
                    minute: '%b %e %l:%M%p',
                    hour: '%b %e %l:%M%p',
                    day: '%b %e',
                    week: '%b %e',
                    month: '%b %Y',
                    year: '%Y'
                },
                tickColor: '#dddddd',
                tickLength: 5,
                tickWidth: 0.5
            },
            yAxis: {
                showFirstLabel: false,
                showLastLabel: true,
                gridLineWidth: 0.5,
                gridLineColor: '#dddddd',
                min: 0,
                title: {
                    text: null
                },
                labels: {
                    style: {
                        fontFamily: '"myriad-pro-1", "myriad-pro-2", Helvetica, Arial, sans-serif',
                        color: '#999',
                        fontSize: '10px'
                    },
                    x: -5
                }
            },
            legend: {
                borderColor: null,
                borderRadius: 0,
                borderWidth: 0,
                align: 'center',
                verticalAlign: 'top',
                y: -17,
                itemStyle: {
                    fontFamily: '"myriad-pro-1", "myriad-pro-2", Helvetica, Arial, sans-serif',
                    size: '12px',
                    cursor: 'pointer',
                    color: '#444444'
                },
                itemHoverStyle: {
                    color: '#e57300'
                },
                itemHiddenStyle: {
                    color: '#ccc'
                },
                lineHeight: 12,
                symbolPadding: 6,
                symbolWidth: 12
            },
            tooltip: {
                backgroundColor: "rgba(255, 255, 255, .9)",
                style: {
                    fontFamily: '"myriad-pro-1", "myriad-pro-2", Helvetica, Arial, sans-serif',
                    fontSize: '13px',
                    padding: '10px'
                }
            }
        });

        // Set up 'What's This?' dialogs
        $('.whatsthis').live('click', function(e) {
            e.preventDefault();
            $('#'+$(this).attr('id').replace('helpLink', 'helpContent')).dialog({
                buttons: { "Close": function() { $(this).dialog('close');} }
            });
        });


    }); // end $(document).ready

    function getUrlParameters()
    {
        var parameters = {};
        var url_params = window.location.search.slice(1).split('&');
        var param;
        for(var i = 0; i < url_params.length; i++)
        {
            param = url_params[i].split('=');
            parameters[param[0]] = param[1];
        }
        return parameters;
    }

    var url_parameters = getUrlParameters();



    /*
     * # MoPub-defined jQuery utility functions and extensions
     */

    /*
     * ## Image Preloader
     * Caches images for faster loading
     */
    var cache = [];
    $.preLoadImages = function() {
        var args_len = arguments.length;
        for (var i = args_len; i--;) {
            var cacheImage = document.createElement('img');
            cacheImage.src = arguments[i];
            cache.push(cacheImage);
        }
    };

    /*
     * ## Dropdown Menus
         *
             * Usage:
             *
             * `$(dropdown-trigger).dropdown(things-that-dropdown);`
             */
    $.fn.mopub_dropdown = function(selector) {
        var self = this;
        var over_trigger, over_body = false;

        // Make sure the dropdown starts closed (in case class="invisible" wasnt set)
        dropdownClose();

        function dropdownOpen() {
            if ($(selector).hasClass('invisible')); {
                $(selector).removeClass('invisible');
            }
            $(self).addClass('hovered');
        }

        function dropdownClose() {
            if (!$(selector).hasClass('invisible')) {
                $(selector).addClass('invisible');
            }
            $(self).removeClass('hovered');
        }

            // Set the hover states
        $(this).hover(function() {
            over_trigger = true;
        }, function () {
            over_trigger = false;
        });

        $(selector).hover(function() {
            over_body = true;
        }, function () {
            over_body = false;
        });

        // Open/close the dropdown if the state has changed
        // Breaks in firefox if setInterval isn't given a number for the time.
        setInterval(function() {
            if (over_trigger || over_body) {
                dropdownOpen();
            } else {
                dropdownClose();
            }
        }, 1);
    };


    /*
     * ## Activity utility functions
     */
    function isActive(item) {
        return item.hasClass('active');
    }

    function activate (element, container) {
        if (container.length > 1) {
            container.each(function(){
                $(this).removeClass('active');
            });
        } else {
            container.find('.active').removeClass('active');
        }
        element.addClass('active');
    }


    /*
     * ## Tabs
     * Turns a ul into horizontal tabs, that can be used to hide and show
     * sections of a page.
     *
     * Usage:
     * `<ul class="tabs">`
     *
     * ` <li class="active"> <a href="#s1">Section 1 </a> </li>`
     *
     * ` <li> <a href="#s2">Section 2 </a> </li>`
     *
     * `</ul>`
     *
     * `<div class="active tab-section" id="s1"></div>`
     *
     * `<div class="tab-section" id="s2"></div>`
     *
     * `$(".tabs").tabs();`
     *
     * TODO: Refactor so that the first tab/section are activated if nothing is activated by default
     */
    $.fn.tabs = function() {
        // find the sections within the page we've marked as tab activate-able
        var tab_sections = $(".tab-section");
        // bind the ul
        var ul = $(this);
        // get the <li>'s within the ul
        var list_items = $('li', ul);
        // add actions to each of the li/a clicks
        $.each(list_items, function(iter, item) {
            // prevent jumping around when a tab is clicked
            var anchor = $('a', item);
            $(anchor).click(function(event){
                event.preventDefault();
            });
            // activate the tab and its section on a click
            var href = anchor.attr('href');
            $(item).click(function(){
                activate($(this), ul);
                activate($(href), tab_sections);
                window.location.hash = href + "-tab";
            });

            if (window.location.hash == href + "-tab") {
                $(item).click();
            }
        });
    };


    /*
     * Escaping/unescaping HTML.
     *
     * Be careful: if you escape html thats already escaped, things get weird.
     */
    $.unescapeHTML = function (html) {
        return $("<div />").html(html).text();
    };

    $.escapeHTML = function (html) {
        return $("<div />").text(html).html();
    };


    /*
     * ## jQuery Lightswitch
     *
     * lightswitch takes two functions, an on function and an off function.
     * When the lightswitch in the page is clicked on or off, the the corresponding
     * function is called. If the function returns true, the switch is slid.
     *
     * Usage:
     *
     * `var on = function() {`
     *
     * `   console.log('BOOMSLAM');`
     *
     * `   return true;`
     *
     * `};`
     *
     *
     * `var off = function() {`
     *
     * `   console.log('SEE YA');`
     *
     * `   return true;`
     *
     * `};`
     *
     * `$(".lightswitch").lightswitch(on, off);`
     *
     * HTML:
     * <div class="lightswitch">
     *   <div class="switch on"></div>
     * </div>
     */
    $.fn.lightswitch = function (on_function, off_function) {

        if (typeof on_function == 'undefined') {
            on_function = function () {
                return true;
            };
        }

        if (typeof off_function == 'undefined') {
            off_function = function () {
                return true;
            };
        }

        var light_switch = $(this);
        var switcher = $('.switch', light_switch);

        light_switch.click(function () {
            if (switcher.hasClass('on')) {
                var result = off_function();
                if (result) {
                    switcher.removeClass('on').addClass('off');
                }

            } else if (switcher.hasClass('off')) {
                var result = on_function();
                if (result) {
                    switcher.removeClass('off').addClass('on');
                }
            } else {
                switcher.addClass('off');
            }
        });
    };

    $.fn.lightswitchOn = function () {
        var light_switch = $(this);
        var switcher = $('.switch', light_switch);
        switcher.removeClass('off').addClass('on');
    };

    $.fn.lightswitchOff = function () {
        var light_switch = $(this);
        var switcher = $('.switch', light_switch);
        switcher.removeClass('on').addClass('off');
    };

    mopub.Utils = mopub.Utils || {};

    /*
     * ## Mopub Utility
     */
    mopub.Utils.formatNumberWithCommas = function(string) {
        string += '';
        var x = string.split('.');
        var x1 = x[0];
        var x2 = x.length > 1 ? '.' + x[1] : '';
        var rgx = /(\d+)(\d{3})/;
        while (rgx.test(x1)) {
            var x1 = x1.replace(rgx, '$1' + ',' + '$2');
        }
        return x1 + x2;
    };

    mopub.Utils.formatCurrency = function(num) {
        return "$" + mopub.Utils.formatNumberWithCommas(num.toFixed(2));
    };

    mopub.Utils.formatNumberAsPercentage = function(string) {
        // We round to two decimal places.
        return (string*100).toFixed(2) + '%';
    };

    mopub.Utils.getKeysFromObject = function(object) {
        var keys = [];
        for (var key in object) {
            if (object.hasOwnProperty(key)) keys.push(key);
        }
        return keys;
    };

    /*
     * ## Stat sorting
     */
    Stats.sortStatsObjectsByStat = function(objects, statName) {
        objects.sort(function(a, b) {
            var statA = parseFloat(a["stats"]["sum"][statName]);
                var statB = parseFloat(b["stats"]["sum"][statName]);
            if (statA < statB) return 1;
            if (statA > statB) return -1;
            else return 0;
        });
        return objects;
    };

    /*
     * ## DOCUMENT THIS
     */
    Stats.statArrayFromDailyStats = function(arrayOfDailyStats, statName) {
        return $.map(arrayOfDailyStats, function(oneDayStats) {
            return parseFloat(oneDayStats[statName]);
        });
    };

    /*
     * ## DOCUMENT THIS
     */
    Stats.getGraphSummedStatsForStatName = function(statName, objects) {
        var result = [];

        var topThreePerformers = objects.splice(0, 3);
        var otherPerformers = objects;

        // Get stats for the top three performers.
        $.each(topThreePerformers, function(index, statsObject) {
                var name = statsObject["key"];
            var arrayOfDailyStats = statsObject["stats"]["daily_stats"];
            var graphStatsObject = {};
            graphStatsObject[name] = Stats.statArrayFromDailyStats(arrayOfDailyStats, statName);
            result.push(graphStatsObject);
        });

        if (otherPerformers.length == 0) return result;

        // Get stats for all other performers.
        var statsForOtherPerformers = Stats.sumDailyStatsAcrossStatsObjects(otherPerformers, statName);
        var otherDict = { "Others": statsForOtherPerformers };
        result.push(otherDict);

        return result;
    };

    /*
     * ## DOCUMENT THIS
     */
    Stats.sumDailyStatsAcrossStatsObjects = function(objects, statName) {
        var result = [];
        $.each(objects, function(index, statsObject) {
            var arrayOfDailyStats = statsObject["stats"]["daily_stats"];
            $.each(arrayOfDailyStats, function(dayIndex, oneDayStats) {
                if (!result[dayIndex]) result[dayIndex] = 0;
                result[dayIndex] += parseFloat(oneDayStats[statName]);
            });
        });
        return result;
    };

    /*
     * ## DOCUMENT THIS
     */
    Stats.getGraphCtrStats = function(objects) {
        var result = [];

        var topThreePerformers = objects.splice(0, 3);
        var otherPerformers = objects;

        // Get stats for the top campaigns.
        $.each(topThreePerformers, function(index, statsObject) {
            var name = statsObject["key"];
            var arrayOfDailyStats = statsObject["stats"]["daily_stats"];
            var graphStatsObject = {};
            graphStatsObject[name] = Stats.statArrayFromDailyStats(arrayOfDailyStats, "ctr");
            result.push(graphStatsObject);
        });

        if (otherPerformers.length == 0) return result;

        // Get stats for all other campaigns.
        var statsForOtherPerformers = Stats.getDailyCtrAcrossStatsObjects(otherPerformers);
        var otherDict = { "Others": statsForOtherPerformers };
        result.push(otherDict);

        return result;
    };

    /*
     * ## DOCUMENT THIS
     */
    Stats.getDailyCtrAcrossStatsObjects = function(objects) {
        var ctr = [];
        var clicks = Stats.sumDailyStatsAcrossStatsObjects(objects, "click_count");
        var impressions = Stats.sumDailyStatsAcrossStatsObjects(objects, "impression_count");

        for (var i = 0, len = clicks.length; i < len; i++) {
            ctr[i] = (impressions[i] === 0) ? 0 : clicks[i] / impressions[i];
        }
        return ctr;
    };

    /*
     * ## Dashboard Stats Chart
     */

    /*
     * ## Y-Axis formating utility functions
     *
     * There are a couple of different ways to format the y-axis labels.
     * Here are a couple of utility y-axis formatting functions.
     */
    Chart.moneyLabelFormatter = function() {
        return '$' + Highcharts.numberFormat(this.value, 0);
    };

    Chart.percentageLabelFormatter = function() {
        return Highcharts.numberFormat(this.value, 0) + '%';
    };

    Chart.numberLabelFormatter = function() {
        if (this.value >= 1000000000) {
            return Highcharts.numberFormat(this.value / 1000000000, 0) + "B";
        } else if (this.value >= 1000000) {
            return Highcharts.numberFormat(this.value / 1000000, 0) + "M";
        } else if (this.value >= 1000) {
            return Highcharts.numberFormat(this.value / 1000, 0) + "K";
        } else if (this.value > 0) {
            return Highcharts.numberFormat(this.value, 0);
        } else {
            return "0";
        }
    };

    /*
     * ## Tooltip Utility functions
     *
     * Like the y-axis formatting, tooltips change depending on the type
     * of data they feature. Here are a couple of common ones.
     */
    Chart.defaultTooltipFormatter = function() {
        var value = Highcharts.numberFormat(this.y, 0);
        var total = Highcharts.numberFormat(this.total, 0);
        var text = '<span style="font-size: 14px;">'
            + Highcharts.dateFormat('%A, %B %e, %Y', this.x)
            + '</span>'
            + '<br/>'
            + '<span style="padding: 0; '
            + 'font-weight: 600; '
            + 'color: ' + this.series.color
            + '">'
            + this.series.name
            + '</span>'
            + ': <strong style="font-weight: 600;">'
            + value
            + '</strong><br/>';
        return text;
    };

    /*
     * ## Chart default options
     */
    Chart.highChartDefaultOptions = {
        chart: {
            defaultSeriesType: 'line',
            margin: [30,0,30,45]
        },
        legend: {
            verticalAlign: "bottom",
            y: -7,
            enabled: true
        },
        yAxis: {
            labels: {
                formatter: Chart.numberLabelFormatter
            }
        },
        tooltip: {
            formatter: Chart.defaultTooltipFormatter
        }
    };

    /*
     * New way of setting up a stats chart. Let's use this.
     */
    Chart.createStatsChart = function(selector, data, extraOptions) {

        // extraOptions aren't required
        if (typeof extraOptions == 'undefined') {
            extraOptions = {};
        }

        // If the data isn't formatted correctly, bring up a chart error
        if (typeof data == 'undefined') {
            Chart.chartError();
            return;
        }

        // Each data item should have a color and a line width
        var colors = ['#0090d9', '#e57300', '#53a600', '#444444', '#60beef'];
        $.each(data, function(iter, item){
            if (typeof item.color == 'undefined') {
                item.color = colors[iter % colors.length];
            }
            item.lineWidth = 4;
        });

        // Create the highcharts options from the
        var options = $.extend(Chart.highChartDefaultOptions, {
            chart: {
                renderTo: selector.replace('#','')
            },
            series: data
        });

        // setup HighCharts chart
        var highchart = new Highcharts.Chart(options);
     };


    /*
     * Old chart stuff. Depricating.
     */
    Chart.insertStatsChart = function(selector, seriesType, data) {
        var metricElement = $(selector);
    };

    Chart.setupDashboardStatsChart = function(seriesType) {
        // get active metric from breakdown
        var metricElement = $('#dashboard-stats .stats-breakdown .active');
        if (metricElement === null || metricElement.length === 0) return;
        var metricElementIdComponents = metricElement.attr('id').split('-');
        var activeMetric = metricElementIdComponents[metricElementIdComponents.length - 1];

        // get data
        var data = mopub.dashboardStatsChartData;
        if (typeof data == 'undefined') {
            Chart.chartError();
            return;
        }

        // set up series
        var colors = ['#0090d9', '#e57300', '#53a600', '#444444'];
        var chartSeries = [];
        var activeData = data[activeMetric];
        if (typeof activeData == 'undefined') {
            Chart.chartError();
            return;
        }

        $.each(activeData, function(i, seriesObject) {
            var seriesName, seriesData, seriesLineWidth;
            var seriesColor = colors[i]

            $.each(seriesObject, function(name, value) {
                seriesName = name;
                if ($.isArray(value)) {
                    seriesData = value;
                } else {
                    seriesData = value.data;
                    seriesColor = value.color;
                }

                if (seriesType == 'line') {
                    seriesLineWidth = 3;
                } else seriesLineWidth = 4;
            });

            seriesAttributes = {name: seriesName,
                                data: seriesData,
                                color: seriesColor,
                                lineWidth: seriesLineWidth}
            chartSeries.push(seriesAttributes);
        });

        // setup HighCharts chart
        this.trafficChart = new Highcharts.Chart({
            chart: {
                renderTo: 'dashboard-stats-chart',
                defaultSeriesType: seriesType,
                marginTop: 0,
                marginBottom: 55,
                height: 185

            },
            plotOptions: {
                series: {
                    pointStart: data.pointStart,
                    pointInterval: data.pointInterval
                }
            },
            legend: {
                verticalAlign: "bottom",
                y: -7,
                enabled: (chartSeries.length > 1)
            },
            yAxis: {
                labels: {
                    formatter: function() {
                        if(activeMetric == 'rev' || activeMetric == 'cpm') {
                            return '$' + Highcharts.numberFormat(this.value, 0);
                        } else if(activeMetric == 'ctr') {
                            return Highcharts.numberFormat(this.value, 0) + '%';
                        } else {
                            if (this.value >= 1000000000) {
                                return Highcharts.numberFormat(this.value / 1000000000, 0) + "B";
                            } else if (this.value >= 1000000) {
                                return Highcharts.numberFormat(this.value / 1000000, 0) + "M";
                            } else if (this.value >= 1000) {
                                return Highcharts.numberFormat(this.value / 1000, 0) + "K";
                            } else if (this.value > 0) {
                                return Highcharts.numberFormat(this.value, 0);
                            } else {
                                return "0";
                            }
                        }
                        return "0";
                    }
                }
            },
            tooltip: {
                formatter: function() {
                    var text = '', value = '', total = '';
                    metric_translation = {att: 'attempts',
                                          clk: 'clicks',
                                          conv: 'conversions',
                                          imp: 'impressions',
                                          req: 'requests',
                                          cpm: 'CPM',
                                          rev: 'revenue',
                                          conv_rate: 'conversion rate',
                                          ctr: 'click through rate',
                                          fill_rate: 'fill rate', 
                                          usr: 'user count'};

                    // If the metric isn't in the dict use the unformatted name
                    var metric_name = metric_translation[activeMetric];
                    metric_name = metric_name ? metric_name : activeMetric;

                    if(activeMetric == 'rev' || activeMetric == 'cpm') {
                        value = '$' + Highcharts.numberFormat(this.y, 2);
                        if(data.total) {
                            total = '$' + Highcharts.numberFormat(this.total, 2) + ' total';
                        }
                    } else if (activeMetric == 'clk') {
                        value = Highcharts.numberFormat(this.y, 0) + ' ' + metric_name;
                        if(data.total) {
                            total = Highcharts.numberFormat(this.total, 0) + ' total ' + metric_name;
                        }
                    } else if (activeMetric == 'ctr') {
                        value = Highcharts.numberFormat(this.y*100, 2) + "% click through";
                    } else {
                        value = Highcharts.numberFormat(this.y, 0) + ' ' + metric_name;
                        if(data.total) {
                            total = Highcharts.numberFormat(this.total, 0) + ' total ' + metric_name;
                        }
                    }

                    text += '<span style="font-size: 14px;">' + Highcharts.dateFormat('%A, %B %e, %Y', this.x) + '</span><br/>';
                    text += '<span style="padding: 0; font-weight: 600; color: ' + this.series.color + '">' + this.series.name + '</span>' + ': <strong style="font-weight: 600;">' + value + '</strong><br/>';

                    if(chartSeries.length > 1) {
                        text += '<span style="font-size: 12px; color: #666;">';
                        if (this.total > 0 && total) {
                            text += '(' + Highcharts.numberFormat(this.percentage, 0) + '% of ' + total + ')';
                        } else if (total) {
                            text += '(' + total + ')';
                        }
                        text += '</span>';
                    }
                    return text;
                }
            },
            series: chartSeries
        });

        $('#dashboard-stats-chart').removeClass('chart-loading');
     };

    /*
     * ## Pie charts
     * Utility function for creating a pie chart with default options
     */
    Chart.setupPieChart = function (selector, title, chart_data) {

        this.impressionPieChart = new Highcharts.Chart({
            chart: {
                renderTo: selector,
                plotBackgroundColor: null,
                plotShadow: true,
                margin: 0
            },
            title: {
                text: title
            },
            tooltip: {
                formatter: function() {
                    return "<b>"+ this.point.name +"</b>: "+ this.point.total + " " + title;
                }
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: "pointer",
                    dataLabels: {
                        enabled: false,
                        color:  "#000000",
                        connectorColor: "#000000",
                        formatter: function() {
                            return "<b>"+ this.point.name +"</b>: "+ this.percentage.toFixed(2) +" %";
                        }
                    },
                    showInLegend: true
                }
            },
            legend: {
                verticalAlign: "bottom"
            },
            series: [{
                type: "pie",
                name: title,
                data: chart_data
            }]
        });

    };


    Chart.chartError = function() {
        $('#dashboard-stats-chart').removeClass('chart-loading').addClass('chart-error');
    };


    window.Chart = Chart;
    window.Stats = Stats;
    window.mopub = mopub;
    window.mopub.Stats = Stats;
    window.mopub.Chart = Chart;
    window.Mopub = mopub;


})(this.jQuery);


(function($){

    var config = window.ToastjsConfig = {
        defaultTimeOut: 3000,
        position: ["top", "right"],
        notificationStyles: {
            padding: "12px 18px",
            margin: "0 0 6px 0",
            backgroundColor: "#000",
            opacity: 0.8,
            color: "#fff",
            font: "normal 13px 'Droid Sans', sans-serif",
            borderRadius: "3px",
            boxShadow: "#999 0 0 12px",
            width: "300px"
        },
        notificationStylesHover: {
            opacity: 1,
            boxShadow: "#000 0 0 12px"
        },
        container: $("<div></div>")
    };

    $(document).ready(function() {
        config.container.css("position", "absolute");
        config.container.css("z-index", 9999);
        config.container.css(config.position[0], "12px");
        config.container.css(config.position[1], "12px");
        $("body").append(config.container);
    });

    function getNotificationElement() {
        return $("<div>").css(config.notificationStyles).hover(function() {
            $(this).css(config.notificationStylesHover);
        }, function() {
            $(this).css(config.notificationStyles);
        });
    }

    var Toast = window.Toast = {};

    Toast.notify = function(message, title, iconUrl, timeOut) {
        var notificationElement = getNotificationElement();

        timeOut = timeOut || config.defaultTimeOut;

        if (iconUrl) {
            var iconElement = $("<img/>", {
                src: iconUrl,
                css: {
                    width: 36,
                    height: 36,
                    display: "inline-block",
                    verticalAlign: "middle",
                    float: "left"
                }
            });
            notificationElement.append(iconElement);
        }

        var textElement = $("<div/>").css({
            display: 'inline-block',
            verticalAlign: 'middle',
            padding: '0 12px'
        });

        if (title) {
            var titleElement = $("<div/>");
            titleElement.append(document.createTextNode(title));
            titleElement.css("font-weight", "bold");
            textElement.append(titleElement);
        }

        if (message) {
            var messageElement = $("<div/>");
            messageElement.css("width", "230px");
            messageElement.css("float", "left");
            messageElement.html(message);
            textElement.append(messageElement);
        }

        notificationElement.delay(timeOut).fadeOut(function(){
            notificationElement.remove();
        });
        notificationElement.bind("click", function() {
            notificationElement.hide();
        });

        notificationElement.append(textElement);
        config.container.prepend(notificationElement);
    };

    Toast.info = function(message, title) {
        Toast.notify(message, title, "");
    };

    Toast.warning = function(message, title) {
        Toast.notify(message, title, "");
    };

    Toast.error = function(message, title) {
        Toast.notify(message, title, "/images/36x36-error.png");
    };

    Toast.success = function(message, title) {
        Toast.notify(message, title, "/images/36x36-success.png");
    };

}(this.jQuery));

(function($, _) {
    var toast_error = function () {
         var message = $("Please <a href='#'>refresh the page</a> and try again.")
            .click(function(e){
                e.preventDefault();
                window.location.reload();
            });
        Toast.error(message, "Error fetching app data.");
    };

    function initialize_campaign_data(campaign_data, apps, include_adunits) {
        // create mopub campaign
        // endpoint=all
        var mopub_campaign = new Campaign(campaign_data);

        var all_campaigns = [mopub_campaign];

        // create network campaign
        // endpoint=network
        if (campaign_data.reporting) {
            // Create copy of campaign_data
            var network_campaign_data = jQuery.extend({}, campaign_data);
            network_campaign_data.stats_endpoint = 'networks';
            var network_campaign = new Campaign(network_campaign_data);

            all_campaigns.push(network_campaign);
        }

        // Create CampaignView and fetch mopub campaign and network
        // campaign if campaign has reporting
        _.each(all_campaigns, function(campaign) {
            new CampaignView({
                model: campaign
            });

            campaign.fetch({
                error: function() {
                    campaign.fetch({
                        error: toast_error
                    });
                }
            });
        });

        var network_apps = [];
        _.each(all_campaigns, function(campaign) {
            _.each(apps, function(app) {
                var network_app = new App({id: app.id,
                                           campaign_id: campaign.id,
                                           stats_endpoint: campaign.get('stats_endpoint')});

                var app_view = new AppView({model: network_app,
                             endpoint_specific: true,
                             network: campaign.get('network')});
                app_view.el = '.' + campaign.id + '-apps-div';

                network_apps.push(network_app);
            });
        });

        if(include_adunits) {
            var adunits = new AdUnitCollection();
            adunits.campaign_id = mopub_campaign.id;
            adunits.stats_endpoint = mopub_campaign.get('stats_endpoint');

            new AdUnitCollectionView({collection: adunits,
                                      campaign: mopub_campaign});

            return [all_campaigns, network_apps, adunits];
        } else {
            return [all_campaigns, network_apps];
        }
    }

    var show_network_chart_data = true;
    var initialize_show_network = function() {
        // Use breakdown to switch charts
        $('.stats-breakdown tr').click(function(e) {
            $('#dashboard-stats .stats-breakdown .active').removeClass('active');
            $(this).addClass('active');
            $('#dashboard-stats-chart').fadeOut(100, function() {
                mopub.Chart.setupDashboardStatsChart('line');
                if (!show_network_chart_data) {
                    if (mopub.Chart.trafficChart.series.length != 1) {
                        mopub.Chart.trafficChart.series[1].hide();
                    }
                }
                $(this).show();
                });
            });

        $('#show-network').change(function() {
            if ($(this).is(':checked')) {
                $.cookie("show-network-data", "true");
                $('.network-data').show();
                $('.network-chart-data').show();
                $('.mopub-chart-data').hide();
                if (mopub.Chart.trafficChart) {
                    if (mopub.Chart.trafficChart.series.length != 1) {
                        mopub.Chart.trafficChart.series[1].show();
                    }
                    show_network_chart_data = true;
                }
            } else {
                $.cookie("show-network-data", null);
                $('.network-data').hide();
                $('.network-chart-data').hide();
                $('.mopub-chart-data').show();
                function hide_network_trafficChart_series() {
                    if (mopub.Chart.trafficChart) {
                        if (mopub.Chart.trafficChart.series.length != 1) {
                            mopub.Chart.trafficChart.series[1].hide();
                        }
                        show_network_chart_data = false;
                    } else {
                        setTimeout(hide_network_trafficChart_series, 50);//wait 50 millisecnds then recheck
                    }
                }
                hide_network_trafficChart_series()
            }
        });

        if (!$.cookie("show-network-data")) {
            $('#show-network').click();
        } else {
            $('#show-network').change();
        }
    }

    var NetworksController = { 
        initialize: function(bootstrapping_data) {
            var campaigns_data = bootstrapping_data.campaigns_data,
                apps = bootstrapping_data.apps,
                date_range = bootstrapping_data.date_range,
                graph_start_date = bootstrapping_data.graph_start_date;

            // TODO: move fuction to mopub.js
            initializeDateButtons();

            var all_campaigns = [];
            var apps_by_campaign = {};
            _.each(campaigns_data, function(campaign_data) {
                var result = initialize_campaign_data(campaign_data, apps, false);
                all_campaigns = all_campaigns.concat(result[0]);
                network_apps = apps_by_campaign[result[0][0].id] = result[1];
            });

            $('.show-apps').click(function() {
                var key = $(this).attr('id');
                var div = $('.' + key + '-apps-div');
                if (div.is(':hidden')) {
                    div.show();
                    $(this).children('span').text("Hide Apps");
                } else {
                    div.hide()
                    $(this).children('span').text("Show Apps");
                }
                // load the apps via ajax
                _.each(apps_by_campaign[key], function(network_app) {
                    network_app.fetch({
                        error: function() {
                            network_app.fetch({
                                error: toast_error
                            });
                        },
                    });
                });
            });

            var campaigns = new Campaigns(all_campaigns);

            // Load chart
            new NetworkGraphView({
                collection: campaigns,
                date_range: date_range,
                start_date: graph_start_date,
                line_graph: false,
                mopub_optimized: false,
            });

            new NetworkDailyCountsView({collection: campaigns});

            initialize_show_network();

            $('.appData').hover(
                function() {
                    $(this).find('.edit-link').show()
                },
                function() {
                    $(this).find('.edit-link').hide()
                }
            );

            $('#network-editSelect').change(function() {
                if ($(this).val()) {
                    window.location = $(this).val();
                }
                $(this).selectmenu('index', 0);
            });

            $('#network-editSelect-menu').find('li').first().hide();

            // TODO: move to a utils package
            // checks if email is valid
            function isValidEmailAddress(emailAddress) {
                var pattern = new RegExp(/^(\s*)(("[\w-+\s]+")|([\w-+]+(?:\.[\w-+]+)*)|("[\w-+\s]+")([\w-+]+(?:\.[\w-+]+)*))(@((?:[\w-+]+\.)*\w[\w-+]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][\d]\.|1[\d]{2}\.|[\d]{1,2}\.))((25[0-5]|2[0-4][\d]|1[\d]{2}|[\d]{1,2})\.){2}(25[0-5]|2[0-4][\d]|1[\d]{2}|[\d]{1,2})\]?$)/i);
                return pattern.test(emailAddress);
            };

            // taken from mopub-dashboard.js #appEditForm (could be combined)
            $('#networkSettingsForm-submit')
                .button({
                    icons: { secondary: "ui-icon-circle-triangle-e" }
                })

                .click(function(e) {
                    e.preventDefault();
                    $('#networkSettingsForm-loading').show();
                    $('#settings-form-message').hide();

                    // check if all emails are valid
                    var valid = true;
                    var list = $('#network-settingsForm textarea').val().split(',');
                    for (var i = 0; i < list.length; i++) {
                        if (!isValidEmailAddress(list[i])) {
                            valid = false;
                        }
                    }

                    if (valid) {
                        $.ajax({
                            type: 'POST',
                            url: '/ad_network_reports/settings/',
                            data : $('#networkForm').serialize(),
                            success : function(resp) {
                                $('#networkSettingsForm-loading').hide();
                                $('#network-settingsForm').slideUp('fast');
                            },
                            error : function(jqXHR, textStatus, errorThrown) {
                                $('#settings-form-message').html("Couldn't update settings.");
                                $('#settings-form-message').show();
                                $('#networkSettingsForm-loading').hide();
                            }
                        });
                    } else {
                        $('#settings-form-message')
                            .html("Please enter a valid email address or a list of valid email addresses.");
                        $('#settings-form-message').show();
                        $('#networkSettingsForm-loading').hide();
                    }
                });

            $('#networkSettingsForm-cancel')
                .click(function(e) {
                    e.preventDefault();
                    $('#network-settingsForm').slideUp('fast');
                });

            $('#network-settingsButton')
                .button({ icons: { primary: "ui-icon-wrench" } })
                .click(function(e) {
                    e.preventDefault();
                    if ($('#network-settingsForm').is(':visible')) {
                        $('#network-settingsForm').slideUp('fast');
                    } else {
                        $('#network-settingsForm').slideDown('fast');
                    }
                });

            $('.dailyCount-toggleButton')
                .button('option', {icons: { primary: 'ui-icon-triangle-1-s' }})
                .click(function(e) {
                    e.preventDefault();
                    if ($('#dailyCounts-individual').is(':hidden')) {
                        $('#dailyCounts-individual').slideDown('fast');
                        $(this).button('option', {icons: { primary: 'ui-icon-triangle-1-n' }});
                    } else {
                        $('#dailyCounts-individual').slideUp('fast');
                        $(this).button('option', {icons: { primary: 'ui-icon-triangle-1-s' }});
                    }
                });

        }
    }

    var EditNetworkController = {
        initialize: function(bootstrapping_data) {
            var network_type = bootstrapping_data.network_type,
                pretty_name = bootstrapping_data.pretty_name,
                adunits_for_app = bootstrapping_data.adunits_for_app,
                app_for_adunit = bootstrapping_data.app_for_adunit,
                account_key = bootstrapping_data.account_key,
                priors = bootstrapping_data.priors,
                city_priors = bootstrapping_data.city_priors,
                login_state = bootstrapping_data.login_state,
                LoginStates = bootstrapping_data.LoginStates;
            
            var saved_new_login = false;

            // set up tabIndex attributes for vertical tabbing
            var rows = $('table.inventory_table').children().not('thead').find('tr');
            rows.each(function(row_iter, row) {
                $(row).find('td').each(function(data_iter, data) {
                    $(data).find('input, textarea').attr('tabIndex', rows.length * data_iter + row_iter);
                });
            });

            // make necessary changes based on network type
            var pub_ids = {
                'admob': 'admob_pub_id',
                'adsense': 'adsense_pub_id',
                'brightroll': 'brightroll_pub_id',
                'ejam': 'ejam_pub_id',
                'inmobi': 'inmobi_pub_id',
                'jumptap': 'jumptap_pub_id',
                'millennial': 'millennial_pub_id',
                'mobfox': 'mobfox_pub_id'
            };

            var pub_id = pub_ids[network_type];

            $('#campaignForm-keyword-helpLink').click(function(e) {
                e.preventDefault();
                $('#campaignForm-keyword-helpContent').dialog({
                    buttons: { "Close": function() { $(this).dialog("close"); } }
                });
            });
            $('#campaignForm-customHtml-helpLink').click(function(e) {
                e.preventDefault();
                $('#campaignForm-customHtml-helpContent').dialog({
                    buttons: { "Close": function() { $(this).dialog("close"); }},
                    width: 700
                });
            });

            $('#network-settingsButton')
                .button({ icons: { primary: "ui-icon-wrench" } })
                .click(function(e) {
                    e.preventDefault();
                    if ($('#network-settingsForm').is(':visible')) {
                        $('#network-settingsForm').slideUp('fast');
                    } else {
                        $('#network-settingsForm').slideDown('fast');
                    }
                });

            // text entered for app level network ids should propogate to
            // children
            $('.app-pub-id')
                .keyup(function () {
                    var value = $(this).val();
                    var tbody = $(this).closest('tbody');
                    $(tbody).children().not('tr.main').find('input[name$="'+pub_id+'"]').each(function () {
                        if (!$(this).hasClass('initialized')) {
                            $(this).val(value);
                            var pub_id_value = value;
                            if (!value) {
                                pub_id_value = "Change Network ID";
                            }
                            $(this).closest('td').find('.pub-id-edit').text(pub_id_value);
                        }
                    });
                }).keyup();

            // perculate checked change up to global
            function update_global_active() {
                if($('.app-active').length == $('.app-active:checked').length) {
                    $('.global-active').attr("checked", "checked");
                } else {
                    $('.global-active').removeAttr("checked");
                }
            }

            // global enabled checkbox
            $('.global-active')
                .change(function() {
                    if($('.global-active').is(':checked')) {
                        $('.app-active').attr('checked', 'checked');
                        $('input[name$="active"]').attr('checked', 'checked');
                    } else {
                        $('.app-active').removeAttr("checked");
                        $('input[name$="active"]').removeAttr("checked");
                    }
                });

            // set up active checkbox's for app level
            $('.app-active')
                .change(function() {
                    var checkboxes = $(this).closest('tbody').find('input[name$="active"]');
                    if ($(this).is(':checked')) {
                        checkboxes.attr("checked", "checked");
                    } else {
                        checkboxes.removeAttr("checked");
                    }

                    update_global_active();
                });

            // perculate checked changes up
            $('input[name$="active"]')
                .change(function () {
                    var tbody = $(this).closest('tbody'); 
                    var key = $(this).attr('class');
                    if(tbody.find('input[name$="active"]:checked').length == tbody.find('input[name$="active"]').length) {
                        tbody.find('.app-active').attr("checked", "checked");
                    } else {
                        tbody.find('.app-active').removeAttr("checked");
                    }

                    update_global_active();

                    // If no ad network ID set up, show a tooltip
                    if ($(this).is(':checked')) {
                        var network_input = $(this).parents('tr').find('input[name$="'+pub_id+'"]');
                        var value = network_input.val();
                        if (!value) {
                            network_input.tooltip({
                                title: 'Enter the network ID to enable (<a href="#">help!</a>)',
                                trigger: 'manual',
                                placement:'top'
                            });
                            network_input.tooltip('show');
                        }
                    }
                    else {
                        $(this).parents('tr').find('input[name$="'+pub_id+'"]').tooltip('hide');
                    }
                });

            // set cpms when copy all cpm button is clicked for either 14 day
            // or 7 day
            _.each(['7-day', '14-day'], function(days) {
                // copy over cpms for all apps
                $('#copy-' + days).click(function() {
                    $('.inventory_table tbody').each(function() {
                        // if global cpm is open close it
                        if(!$('.global-cpm-input').is(':hidden')) {
                            $('.global-cpm-input').hide();
                            $('.global-cpm-close').show();

                            $('.app-cpm-input').show();
                            $('.app-cpm-close').hide();
                        }

                        var cpm = parseFloat($(this).find('.copy-' + days).text().replace('$', '')).toString();
                        var input = $(this).find('.app-cpm-input input');
                        // change app level cpm
                        input.val(cpm);
                        // change adunit level cpm
                        $(this).find('.cpm-input input').val(cpm);
                        });
                    });
                // copy over an individual app level cpm
                $('.copy-' + days).click(function() {
                    // if global cpm is open close it
                    if(!$('.global-cpm-input').is(':hidden')) {
                        $('.global-cpm-input').hide();
                        $('.global-cpm-close').show();

                        $('.app-cpm-input').show();
                        $('.app-cpm-close').hide();
                    }

                    var cpm = parseFloat($(this).parent().text().replace('$', '')).toString();
                    var tbody = $(this).closest('tbody')
                    var input = tbody.find('.app-cpm-input input');
                    // change app level cpm
                    input.val(cpm);
                    input.keyup();
                    // change adunit level cpm
                    tbody.find('.cpm-input input').val(cpm);
                    });
                });

            // set up 'show advanced settings' button
            $('#advanced')
                .button('option', {icons: { primary: 'ui-icon-triangle-1-s' }})
                .click(function() {
                    if ($('.advanced').is(':hidden')) {
                        $('.advanced').slideDown();
                        $(this).button('option', {icons: { primary: 'ui-icon-triangle-1-n' }});
                        $('.ui-button-text', this).text('Hide Advanced Settings');
                    } else {
                        $('.advanced').slideUp();
                        $(this).button('option', {icons: { primary: 'ui-icon-triangle-1-s' }});
                        $('.ui-button-text', this).text('Show Advanced Settings');
                    }
                });

            // TODO: merge this with controllers/campaigns.js form
            // select the appropriate campaign_type from the hash
            if (window.location.hash.substring(1) !== '') {
                $('select[name="campaign_type"]').val(window.location.hash.substring(1));
            }

            var validator = $('form#campaign_and_adgroup').validate({
                errorPlacement: function(error, element) {
                    element.parents('div').not(':hidden').first().append(error);
                },
                submitHandler: function(form) {
                    $(form).ajaxSubmit({
                        data: {ajax: true},
                        dataType: 'json',
                        success: function(jsonData, statusText, xhr, $form) {
                            $('#loading').hide();
                            if(jsonData.success) {
                                if (saved_new_login && login_state == LoginStates.NOT_SETUP) {
                                    data = "&account_key=" + account_key + "&network=" + network_type + '&req_type=pull';

                                    $.ajax({url: 'https://checklogincredentials.mopub.com',
                                        data: data,
                                        crossDomain: true,
                                        dataType: "jsonp",
                                    });
                                }
                                window.location = jsonData.redirect;
                                $('form#campaign_and_adgroup #submit').button({
                                    label: 'Success...',
                                    disabled: true
                                });
                            } else {
                                console.log(jsonData.errors);
                                validator.showErrors(jsonData.errors);
                                $('form#campaign_and_adgroup #submit').button({
                                    label: 'Try Again',
                                    disabled: false
                                });
                            }
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            $('#loading').hide();
                            $('form#campaign_and_adgroup #submit').button({
                                label: 'Try Again',
                                disabled: false
                            });
                        },
                        beforeSubmit: function(arr, $form, options) {
                            $('#loading').css('display', 'inline');
                            $('form#campaign_and_adgroup #submit').button({label: 'Submitting...',
                                                                           disabled: true});
                        }
                    });
                }
            });

            $('form#campaign_and_adgroup #submit')
                .button({ icons : { secondary : 'ui-icon-circle-triangle-e' } })
                .click(function(e) {
                    e.preventDefault();
                    $('form#campaign_and_adgroup').submit();
                });

            function setupLoginForm() {
                $('form#network-login-form .submit, form#campaign_and_adgroup .submit').click(function() {
                        if ($(this).closest('form').attr('id') == 'network-login-form') {
                            var data = $(this).closest('form').serialize();
                        } else {
                            // Hack to serialize sub-section of forms data.
                            // Add a new form and hide it.
                            $('#campaign_and_adgroup').append('<form id="form-to-submit" style="visibility:hidden;"></form>');
                            // Clone the fieldset into the new form.
                            $('#form-to-submit').html($(this).closest('.login-fields').clone());
                            // Serialize the data.
                            var data = $('#form-to-submit').serialize();
                            // Remove the form.
                            $('#form-to-submit').remove();
                        }
                        data += ("&account_key=" + account_key + "&network=" + network_type + '&req_type=check');

                        // Check if data submitted in the form is valid login
                        // information for the ad network
                        var message = $('.login-credentials-message');
                        $(message).html("Verifying login credentials...");

                        $.ajax({url: 'https://checklogincredentials.mopub.com',
                            data: data,
                            crossDomain: true,
                            dataType: "jsonp",
                            success: function(valid) {
                                // Upon success notify the user
                                if (valid) {
                                    $(message).html("MoPub is currently pulling data from "
                                                    + pretty_name + " using the following credentials.");
                                    var username = $('#id_' + network_type + '-username_str').val();
                                    var password = $('#id_' + network_type + '-password_str').val();
                                    var client_key = $('#id_' + network_type + '-client_key').val();

                                    $('#id_' + network_type + '-username_str').hide();
                                    $('#id_' + network_type + '-password_str').hide();
                                    $('#id_' + network_type + '-client_key').hide();

                                    $('#username').text(username);
                                    var hidden_password = "";
                                    $.each( password, function(c){
                                        hidden_password += "*";
                                    });
                                    $('#password').text(hidden_password);
                                    $('#client_key').text(client_key);
                                    $('.login-credentials-submit').hide();
                                    $('.login-credentials-settings').show();
                                    saved_new_login = true;
                                } else {
                                    $(message).html("Invalid login information.");
                                }
                            },
                        });
                });

                $('form#network-login-form .cancel').click(function () {
                    $('#network-settingsForm').slideUp();
                });
            }

            setupLoginForm();

            $('form#campaign_and_adgroup .cancel').click(function () {
                var fieldset = $(this).closest('.login-fields');

                $(this).removeClass('ui-state-hover');
                $('#network-login-form').html(fieldset.clone());

                // rebuild buttons
                // TODO: remove terrible designer buttons so hacks like this
                // aren't needed
                $('form#network-login-form .button').addClass('button-small');
                $('form#network-login-form .button').button();

                fieldset.slideUp(400, function () {
                    fieldset.remove();
                    $('#title-bar-button').show();
                });

                // re-initialize event handlers for the moved form
                setupLoginForm();
            });


            $("#edit-login").click(function() {
                $('#id_' + network_type + '-username_str').show();
                $('#id_' + network_type + '-password_str').show();
                $('#id_' + network_type + '-client_key').show();

                $('#username').text('');
                $('#password').text('');
                $('#client_key').text('');

                $('.login-credentials-submit').show();
                $('.login-credentials-settings').hide();
            });

            $('.network_type_dependant').each(function() {
                    $(this).toggle($(this).hasClass(network_type));
            });

            // device targeting
            $('input[name="device_targeting"]').change(function() {
                if($(this).val() == '0') {
                    $('#device_targeting').slideUp();
                }
                else {
                    $('#device_targeting').slideDown();
                }
            });

            // Show location-dependent fields when location targeting is turned on
            $('#campaign_and_adgroup input[name="region_targeting"]').click(function(e) {
                var loc_targ = $(this).val();
                $('.locationDependent', '#campaign_and_adgroup').hide();
                $('.' + loc_targ + '.locationDependent', '#campaign_and_adgroup').show();
                if ($(this).val() == 'all') {
                    $('li.token-input-city span.token-input-delete-token').each(function() {
                        $(this).click();
                    });
                }
            }).filter(':checked').click();

            $('td.pub-id-data').each(function () {
                var input = $(this).children('div').children('input[name$="'+pub_id+'"]');
                var value = input.val();

                // TODO: review
                // Always show the app-level input
                if (value || !$(this).hasClass('adunit')) {
                    input.show();
                    input.parents('td').find('.pub-id-edit').hide();
                }                
            });

            // Click the ad unit placeholder text to edit
            $('.pub-id-edit').click(function (event) {
                event.preventDefault();
                $(this).hide();
                var div = $(this).siblings('.pub-id-input')
                div.show();
                div.find('input').addClass('initialized');
            });
            $('.pub-id-edit').tooltip({
                title: "Set ID for this ad unit"
            });
            $('.cpm-edit').tooltip({
                title: "Set CPM for each unit"
            });            
            $('.app-cpm-close').tooltip({
                title: "Set CPM at the app level"
            });                        

            $('.pub-id-close').click(function (event) {
                event.preventDefault;
                var input_div = $(this).closest('.pub-id-input');
                input_div.hide();

                var value = input_div.children('input').val()
                if (value) {
                    $(this).closest('td').find('.pub-id-edit').text(value);
                } else {
                    $(this).closest('td').find('.pub-id-edit').text("Change Network ID");
                }
                $(this).closest('td').find('.pub-id-edit').show();
            });


            /* Setting cpm, custom_html and custom_native */
            var fields = [['cpm', 'input']]
            if(network_type == 'custom') {
                fields.push(['custom_html', 'textarea']);
            } else if(network_type == 'custom_native') {
                fields.push(['custom_method', 'input']);
            }

            _.each(fields, function(field_props) {
                var field = field_props[0];
                var type = field_props[1];

                // adunit level
                $('.' + field + '-input ' + type).keyup(function() {
                    var value = $(this).val();
                    var td = $(this).closest('td');
                    $(td).find('.' + field + '-value').text(value);
                }).keyup();

                $('.' + field + '-edit').click(function (event) {
                    if(!$('.global-' + field + '-input').is(':hidden')) {
                        $('.global-' + field + '-input').hide();
                        $('.global-' + field + '-close').show();

                        $('.app-' + field + '-input').show();
                        $('.app-' + field + '-close').hide();

                        // show app level fields
                        $('.app-' + field + '-input').show();
                        // hide app edit text
                        $('.app-' + field + '-close').hide();
                    }
                    event.preventDefault();
                    var tbody = $(this).closest('tbody');
                    // hide app level fields
                    tbody.find('.app-' + field + '-input').hide();
                    tbody.find('.app-' + field + '-close').show();
                    tbody.find('.app-' + field + '-close').text("Set app " + field.replace('_', ' '));
                    // show adunit level fields
                    tbody.find('.' + field + '-edit').hide();
                    tbody.find('.' + field + '-input').show();
                });

                // app level
                $('.app-' + field + '-input ' + type).keyup(function() {
                    var value = $(this).val();
                    var tbody = $(this).closest('tbody');
                    $(tbody).find('.' + field + '-input ' + type).val(value);
                    if(!value) {
                        value = "Set adunit " + field.replace('_', ' ');
                    }
                    $(tbody).find('.' + field + '-value').text(value);
                });

                $('.app-' + field + '-close').click(function (event) {
                    event.preventDefault;
                    if($('.global-' + field + '-input').is(':hidden')) {
                        elements = $(this);
                    } else {
                        $('.global-' + field + '-input').hide();
                        $('.global-' + field + '-close').show();

                        $('.app-' + field + '-input').show();
                        $('.app-' + field + '-close').hide();

                        elements = $('.app-' + field + '-close');
                    }

                    elements.each(function() {
                        var tbody = $(this).closest('tbody');
                        // copy value of first adunit input to all fields inputs
                        var value = tbody.find('.' + field + '-input ' + type).val();
                        tbody.find('.' + field + '-input ' + type).val(value);
                        tbody.find('.app-' + field + '-input ' + type).val(value);

                        if(!value) {
                            value = "Set adunit " + field.replace('_', ' ');
                        }
                        tbody.find('.' + field + '-value').text(value);

                        // show app level fields
                        tbody.find('.app-' + field + '-input').show();
                        // hide app edit text
                        tbody.find('.app-' + field + '-close').hide();

                        // hide adunit fields for app
                        tbody.find('.' + field + '-input').hide();
                        // show adunit edit text
                        tbody.find('.' + field + '-edit').show();
                    });
                });

                // global level
                $('.global-' + field + '-input ' + type).keyup(function() {
                    var value = $(this).val();
                    $('.' + field + '-value').text(value);
                    $('.' + field + '-input ' + type).val(value);
                    $('.app-' + field + '-input ' + type).val(value);

                    if(!value) {
                        $('.' + field + '-value').text("Set adunit " + field.replace('_', ' '));
                        value = "Set app " + field.replace('_', ' ');
                    }
                    $('.app-' + field + '-close').text(value);
                });

                $('.global-' + field + '-close').click(function (event) {
                    event.preventDefault;
                    // copy value of first adunit to all field inputs
                    var value = $('.' + field + '-input ' + type).val();
                    $('.global-' + field + '-input ' + type).val(value);
                    $('.' + field + '-value').text(value);
                    $('.' + field + '-input ' + type).val(value);
                    $('.app-' + field + '-input ' + type).val(value);

                    if(!value) {
                        $('.' + field + '-value').text("Set adunit " + field.replace('_', ' '));
                        value = "Set app " + field.replace('_', ' ');
                    }
                    $('.app-' + field + '-close').text(value);

                    // show global field
                    $('.global-' + field + '-input').show();
                    // hide global edit text
                    $('.global-' + field + '-close').hide();

                    // hide adunit fields for app
                    $('.' + field + '-input').hide();
                    // hide app fields for app
                    $('.app-' + field + '-input').hide();
                    // show adunit edit text
                    $('.' + field + '-edit').show();
                    // show app edit text
                    $('.app-' + field + '-close').show();
                });
            });

            // Initialize active
            $('input[name$="active"]').change();


            /* Initialize cpm, custom_html and custom_native */
            _.each(fields, function(field_props) {
                var field = field_props[0];
                var type = field_props[1];

                var all_apps_equal = true;
                var global_value = $('.adunit-row .' + field + '-input ' + type).val();
                $('.app-tbody').each(function() {
                    var all_adunits_equal = true;
                    var value = $(this).find('.adunit-row .' + field + '-input ' + type).val();
                    // check if all adunits have the same value for the field
                    $(this).find('.adunit-row .' + field + '-input ' + type).each(function() {
                        if(value != $(this).val()) {
                            all_adunits_equal = false;
                        }
                    });

                    if(all_adunits_equal) {
                        if(global_value != value) {
                            all_apps_equal = false;
                        }

                        $(this).find('.adunit-row .' + field + '-input').hide();
                        $(this).find('.adunit-row .' + field + '-edit').show();

                        $(this).find('.app-' + field + '-input ' + type).val(value);
                        $(this).find('.app-' + field + '-input').show();
                        $(this).find('.app-' + field + '-close').hide();
                    } else {
                        all_apps_equal = false;
                    }
                });

                if(all_apps_equal) {
                    var value = $('.app-' + field + '-input ' + type).val();

                    $('.app-' + field + '-input').hide();
                    $('.app-' + field + '-close').show();

                    $('.global-' + field + '-close').hide();
                    $('.global-' + field + '-input ' + type).val(value);
                    $('.global-' + field + '-input').show();

                    if(!value) {
                        $('.' + field + '-value').text("Set adunit " + field.replace('_', ' '));
                        value = "Set app " + field.replace('_', ' ');
                    }
                    $('.app-' + field + '-close').text(value);
                }
            });

            var MODAL_FIELDS = ([['allocation_percentage', '%, '], ['daily_frequency_cap', '/d '],
                ['hourly_frequency_cap', '/h']]);
            var ALL_KEYS = _.keys(app_for_adunit).concat(_.keys(adunits_for_app)).concat(['global']);
            function check_global(text, global_values) {
                // text and global_values are candidates for global values
                var all_equal = true;
                // check if all apps are the same
                _.each(_.keys(adunits_for_app), function(app_key) {
                    if(text != $('#' + app_key + '-options-edit').text()) {
                        all_equal = false;
                    }
                });

                var global_text = '';
                if(!all_equal || text == 'Set app options') {
                    global_text = 'Set global options';
                    global_values = ['','',''];
                } else {
                    global_text = text;
                }
                
                $('#global-options-edit').text(global_text);
                // Clear global fields
                _.each(_.zip(MODAL_FIELDS, global_values), function(field) {
                    var field_name = field[0][0];
                    var value = field[1];
                    $('#id_global-' + field_name).val(value);
                });
            }

            /* Advanced Options Modal */
            function modal_ok(row, modal_div) {
                var key = row.attr('id').replace('-row', '');
                var app_div = $(modal_div).parent();

                var values = [];
                var text = '';
                _.each(MODAL_FIELDS, function(field) {
                    var field_name = field[0];
                    var field_term = field[1];
                    var value = $('#id_' + key + '-' + field_name).val();
                    values.push(value);
                    if(value != undefined && value != '' &&
                            (field_name.indexOf("_frequency_cap") == -1 || value != '0') &&
                            (field_name.indexOf("_percentage") == -1 || value != '100.0')) {
                        text += value + field_term;
                    }
                });
                if(!text) {
                    text = "None"
                }

                if($(row).hasClass('adunit-row')) {
                    app_key = app_for_adunit[key];
                    // adunit level
                    $('#' + key + '-options-edit').text(text);

                    var all_equal = true;
                    _.each(adunits_for_app[app_key], function(adunit_key) {
                        if(text != $('#' + adunit_key + '-options-edit').text()) {
                            all_equal = false;
                        }
                    });

                    if(all_equal) {
                        var app_text = text;
                        var app_values = values;
                    } else {
                        var app_text = 'Set app options';
                        var app_values = ['','',''];
                    }

                    // perculate to app level
                    $('#' + app_key + '-options-edit').text(app_text);
                    // Clear app fields
                    _.each(_.zip(MODAL_FIELDS, app_values), function(field) {
                        var field_name = field[0][0];
                        var value = field[1];
                        $(app_div).find('#id_' + app_key + '-' + field_name).val(value);
                    });

                    // perculate to global level
                    check_global(app_text, app_values);
                } else if($(row).hasClass('app-row')) {
                    // app level
                    _.each(adunits_for_app[key].concat(key), function(key) {
                        $('#' + key + '-options-edit').text(text);

                        // update all adunit fields
                        _.each(_.zip(MODAL_FIELDS, values), function(field) {
                            var field_name = field[0][0];
                            var value = field[1];
                            $('#id_' + key + '-' + field_name).val(value);
                        });
                    });

                    // perculate to global level
                    check_global(text, values);

                } else {
                    // global level
                    var selector = $(modal_div).parent().parent();
                    _.each(ALL_KEYS, function(key) {
                        $('#' + key + '-options-edit').text(text);

                        // update all fields
                        _.each(_.zip(MODAL_FIELDS, values), function(field) {
                            var field_name = field[0][0];
                            var value = field[1];
                            $('#id_' + key + '-' + field_name).val(value);
                        });
                    });
                }
            }

            // open advanced options modal for global app or adunit
            _.each(ALL_KEYS, function(key) {
                $('#' + key + '-options-edit').click(function() {
                    var row = $('#' + key + '-row');
                    var modal_div = $('#' + key + '-options');
                    // open the correct modal
                    $(modal_div).show();
                    $(modal_div).modal('show');

                    $(modal_div).find('.save').click(function() { 
                        modal_ok(row, modal_div);
                        $(modal_div).modal('hide');
                    });

                    $(modal_div).find('.close').click(function() {
                        $(modal_div).modal('hide');
                    });
                });
            });

            /* Initialize advanced options and active fields */
            // mimic an entry for each adunit to prepopulate settings
            // at app and global levels
            _.each(_.flatten(_.values(adunits_for_app)), function(adunit_key) {
                adunit_row = $('#' + adunit_key + '-row')

                // prepopulate advanced options modals
                var modal_div = $('#' + adunit_key +'-options');
                modal_ok(adunit_row, modal_div);
            });

            /* GEO TARGETING */
            var geo_s = 'http://api.geonames.org/searchJSON?username=MoPub&';
            var pre = {type: 'country', data: []};
            var city_pre = {type: 'city', data: []};

            for (var count = 0; count < countries.length; count++) {
                var dat = countries[count];
                if ($.inArray(dat.code, priors) != -1) {
                    pre.data.push(dat);
                }
                if (pre.length == priors.length) {
                    break;
                }
            }
            //city is ll:ste:name:ccode;
            for (var i in city_priors) {
                if (city_priors.hasOwnProperty(i)) {
                    var datas = city_priors[i].split(':');
                    var ll = datas[0].split(',');
                    var ste = datas[1];
                    var name = datas[2];
                    var ccode = datas[3];
                    city_pre.data.push(
                            { lat: ll[0],
                              lng: ll[1],
                              countryCode: ccode,
                              adminCode1: ste,
                              name: name
                              });
                }
            }
            $('#city_ta').tokenInput(geo_s, {
                country: 'US',
                doImmediate: false,
                hintText: 'Type in a city name',
                queryParam: 'name_startsWith',
                featureClass: 'P',
                prePopulate: city_pre,
                contentType: 'json',
                type: 'city',
                minChars: 3,
                method: 'get'
            });
            //Verify that all cities in city_pre are in the SINGLE country that is pre

            $('#geo_pred_ta').tokenInput(null, {
                data: countries,
                hintText: 'Type in a country name',
                formatResult: function( row ) {
                    return row.name;
                },
                formatMatch: function( row, i, max ){
                    return [row.name, row.code];
                },
                prePopulate: pre
            });

            // Show location-dependent fields when location targeting is turned on
            $('#campaign_and_adgroup input[name="region_targeting"]').click(function(e) {
                var loc_targ = $(this).val();
                $('.locationDependent', '#campaign_and_adgroup').hide();
                $('.' + loc_targ + '.locationDependent', '#campaign_and_adgroup').show();
                if ($(this).val() == 'all') {
                    $('li.token-input-city span.token-input-delete-token').each(function() {
                        $(this).click();
                    });
                }
            }).filter(':checked').click();

        }
    }

    var NetworkDetailsController = { 
        initialize: function(bootstrapping_data) {
            var campaign_data = bootstrapping_data.campaign_data,
                apps = bootstrapping_data.apps,
                graph_start_date = bootstrapping_data.graph_start_date;

            initializeDateButtons();

            var result = initialize_campaign_data(campaign_data, apps, true);
            var all_campaigns = result[0];
            var network_apps = result[1];
            var adunits = result[2];


            _.each(network_apps, function(network_app) {
                network_app.fetch({
                    error: function() {
                        network_app.fetch({
                            error: toast_error
                        });
                    },
                });
            });

            adunits.fetch({
                error: function() {
                    adunits.fetch({
                        error: toast_error
                    });
                },
            });

            // create campaigns collection
            campaigns = new Campaigns(all_campaigns);

            new NetworkGraphView({
                collection: campaigns,
                start_date: graph_start_date,
                line_graph: true,
                mopub_optimized: false,
            });

            initialize_show_network();

            $('#network-settingsButton')
                .button({ icons: { primary: "ui-icon-wrench" } })

            $('#delete-network')
                .click(function () {
                    var key = $(this).attr('id');
                    var div = $('.' + key);
                    div.dialog({
                        buttons: {
                            "Delete": function() {
                                $.post('/networks/delete',
                                    {campaign_key: campaign_data.id},
                                    function() {
                                      window.location = '/networks';
                                });
                                },
                            "Cancel": function() { $(this).dialog('close');} }
                    });
                });

            $('#network-editActive').change(function () {
                var hidden_li = $('#network-editActive-menu').find('li:hidden');
                var shown_li = $('#network-editActive-menu').find('li:not(:hidden)');
                hidden_li.show();
                shown_li.hide();

                $.post('/networks/pause', { campaign_key: campaign_data.id,
                                             active: $(this).val() } );
            });

            $('#network-editActive-menu').find('li').first().hide();

            }
    }

    window.NetworkDetailsController = NetworkDetailsController;
    window.NetworksController = NetworksController;
    window.EditNetworkController = EditNetworkController;
})(window.jQuery, window._);


$(function() {
    // TODO: document
    /*
     *   adgroups_data
     *   graph_start_date
     *   today
     *   yesterday
     *   ajax_query_string
     */

    var toast_error = function () {
         var message = $("Please <a href='#'>refresh the page</a> and try again.")
            .click(function(e){
                e.preventDefault();
                window.location.reload();
            });
        Toast.error(message, "Error fetching app data.");
    };

    var NetworksController = {

        initialize: function(bootstrapping_data) {
            var adgroups_data = bootstrapping_data.adgroups_data,
                graph_start_date = bootstrapping_data.graph_start_date,
                today = bootstrapping_data.today,
                yesterday = bootstrapping_data.yesterday,
                ajax_query_string = bootstrapping_data.ajax_query_string;

            var adgroups = new AdGroups(adgroups_data);

            var graph_view = new CollectionGraphView({
                collection: adgroups,
                start_date: graph_start_date,
                today: today,
                yesterday: yesterday
            });

            var adgroups_view = new AdGroupsView({
                collection: adgroups,
                el: '#adgroups',
                title: 'Ad Networks',
                type: 'network'
            });
            adgroups_view.render();

            adgroups.each(function(adgroup) {
                adgroup.fetch({
                    data: ajax_query_string,
                    error: function () {
                        adgroup.fetch({
                            error: toast_error
                        });
                    }
                });
            });

            // TODO: move to views
            // date picker
            // set up dateOptions
            $('#dashboard-dateOptions input').click(function() {
                var option = $(this).val();
                    var hash = document.location.hash;
                if(option == 'custom') {
                    $('#dashboard-dateOptions-custom-modal').dialog({
                        width: 570,
                        buttons: [
                            {
                                text: 'Set dates',
                                css: { fontWeight: '600' },
                                click: function() {
                                    var from_date=$('#dashboard-dateOptions-custom-from').xdatepicker("getDate");
                                    var to_date=$('#dashboard-dateOptions-custom-to').xdatepicker("getDate");
                                    var num_days=Math.ceil((to_date.getTime()-from_date.getTime())/(86400000)) + 1;

                                    var from_day=from_date.getDate();
                                    var from_month=from_date.getMonth()+1;
                                    var from_year=from_date.getFullYear();

                                    $(this).dialog("close");
                                    var location = document.location.href.replace(hash, '').replace(/\?.*/,'');
                                    document.location.href = location+'?r='+num_days+'&s='+from_year+"-"+from_month+"-"+from_day + hash;
                                }
                            },
                            {
                                text: 'Cancel',
                                click: function() {
                                    $(this).dialog("close");
                                }
                            }
                        ]
                    });
                } else {
                    // Tell server about selected option to get new data
                    var location = document.location.href.replace(hash,'').replace(/\?.*/,'');
                    document.location.href = location+'?r=' + option + hash;
                }
            });


            // set up custom dateOptions modal dialog
            $('#dashboard-dateOptions-custom-from').xdatepicker({
                defaultDate: '-15d',
                maxDate: '0d',
                    onSelect: function(selectedDate) {
                        var other = $('#dashboard-dateOptions-custom-to');
                        var instance = $(this).data("datepicker");
                        var date = $.xdatepicker.parseDate(instance.settings.dateFormat ||
                                                          $.xdatepicker._defaults.dateFormat,
                                                          selectedDate,
                                                          instance.settings);
                        other.xdatepicker('option', 'minDate', date);
                    }
        });

            $('#dashboard-dateOptions-custom-to').xdatepicker({
                defaultDate: '-1d',
                maxDate: '0d',
                onSelect: function(selectedDate) {
                    var other = $('#dashboard-dateOptions-custom-from');
                    var instance = $(this).data("datepicker");
                    var date = $.xdatepicker.parseDate(instance.settings.dateFormat ||
                                                      $.xdatepicker._defaults.dateFormat,
                                                      selectedDate,
                                                      instance.settings);
                    other.xdatepicker('option', 'maxDate', date);
                }
            });

            var self = this;
            // stats breakdown
            $('.stats-breakdown tr').click(function(e) {
                var row = $(this);
                if(!row.hasClass('active')) {
                    row.siblings().removeClass('active');
                    row.addClass('active');
                    $('#dashboard-stats-chart').fadeOut(100, function() {
                        graph_view.show_chart();
                    });
                }
            });

            $('#stats-breakdown-dateOptions input').click(function() {
                $('.stats-breakdown-value').hide();
                $('.stats-breakdown-value.'+$(this).val()).show();
            });

            $('.stats-breakdown-value').hide();
            $('.stats-breakdown-value.all').show();

            // Ad Campaign button
            $("#add_campaign_button").button({
                icons : { primary : 'ui-icon-circle-plus'}
            });


            // AdGroups form
            var actions = ['pause', 'resume', 'activate', 'archive', 'delete'];
            $.each(actions, function(iter, action) {
                $('#campaignForm-' + action).click(function(e) {
                    e.preventDefault();
                    $('#campaignForm')
                        .find("#action")
                        .attr("value", action)
                        .end()
                        .submit();
                });
            });
        }
    };

    window.NetworksController = NetworksController;
});

/*
	MoPub Public Site JS
*/

// global mopub object
var mopub = mopub || {};

(function($){
	// dom ready
	$(document).ready(function() {
				
		/*---------------------------------------/
		/ UI
		/---------------------------------------*/
		
		// Header icons
		$('#header-icons a').css({ opacity: 0.25 }).hover(function() {
			$(this).stop().animate({ opacity: 0.75 }, 200);
		}, function() {
			$(this).stop().animate({ opacity: 0.25 }, 400);
		});

	});
})(this.jQuery);

/*
 * # MoPub Publisher/Inventory Javascript
 * ## Client-side functionality for the following pages:
 * * Inventory
 * * Dashboard
 * * App detail
 * * Adunit detail
 * * App creation
 * * Sign up flow
 * * Geographical targeting (deprecated)
 */

var mopub = mopub || {};

(function($, Backbone, _){


    /*
     * ## Helpers for DashboardController
     */
    var toast_error = function () {
        var message = $("Please <a href='#'>refresh the page</a> and try again.")
            .click(function(e){
                e.preventDefault();
                window.location.reload();
            });
        Toast.error(message, "Error fetching app data.");
    };



    /*
     * Refactor/remove
     */
    function getCurrentChartSeriesType() {
        var activeBreakdownsElem = $('#dashboard-stats .stats-breakdown .active');
        if (activeBreakdownsElem.attr('id') == 'stats-breakdown-ctr') return 'line';
        else return 'area';
    }

    /*
     * Refactor/remove
     */
    function populateGraphWithAccountStats(stats, start_date) {
        if (!stats.hasOwnProperty("all_stats")) return;
        
        var dailyStats = stats["all_stats"]["||"]["daily_stats"];

        mopub.dashboardStatsChartData = {
            pointStart: start_date,
            pointInterval: 86400000,
            req: [{ "Total": mopub.Stats.statArrayFromDailyStats(dailyStats, "req")}],
            imp: [{ "Total": mopub.Stats.statArrayFromDailyStats(dailyStats, "imp")}],
            clk: [{ "Total": mopub.Stats.statArrayFromDailyStats(dailyStats, "clk")}],
            usr: [{ "Total": mopub.Stats.statArrayFromDailyStats(dailyStats, "usr")}]
        };

        mopub.Chart.setupDashboardStatsChart(getCurrentChartSeriesType());
    }

    /*
     * ## fetchAppStats
     * Fetches all app stats using a list of app keys and renders
     * them into table rows that have already been created in the
     * page. Useful for decreasing page load time along with `fetchAdunitStats`.
     */
    function fetchAppStats (app_keys) {
        _.each(app_keys, function(app_key) {
            var app = new App({id: app_key, stats_endpoint: 'all'});
            app.bind('change', function(current_app) {
                var appView = new AppView({ model: current_app, el: '#dashboard-apps' });
                appView.renderInline();
            });
            app.fetch({
                error: function() {
                    app.fetch({
                        error: toast_error
                    });
                }
            });
        });
    }

    /*
     * ## fetchAdunitStats
     * Fetches AdUnit stats for an app over ajax and renders them in already
     * existing table rows. This method is useful for decreasing page load time.
     * Uses a parent app's key to bootstrap the fetch.
     */
    function fetchAdunitStats (app_key) {
        var adunits = new AdUnitCollection();
        adunits.app_id = app_key;
        adunits.stats_endpoint = 'all';
        // Once the adunits have been fetched from the server,
        // render them as well as the app's price floor range
        adunits.bind('reset', function(adunits_collection) {
            // Create the views and render each adunit row
            _.each(adunits_collection.models, function(adunit) {
                var adunitView = new AdUnitView({ model: adunit, el: '#dashboard-apps' });
                adunitView.renderInline();
            });
        });

        adunits.fetch({
            success: function(data){
                // Trigger any event handlers that have been attached to the table.
                // Shouldn't this only trigger for the table that the adunit stats are
                // being placed in?
                $('table').trigger('update');
                $("#" + app_key + "-img").hide();
            },
            error: function () {
                adunits.fetch({
                    error: toast_error
                });
            }
        });
    }

    /*
     * ## initializeNewAppForm
     * Loads all click handlers/visual stuff/ajax loading for
     * the app form.
     */
    function initializeNewAppForm() {

        initializeiOSAppSearch();

        $('#appForm-submit')
            .button({
                icons: { secondary: "ui-icon-circle-triangle-e" }
            })
            .click(function(e) {
                e.preventDefault();
                $('#appForm').submit();
            });

        $('#appForm input[name="app_type"]').click(function(e) {
            $('#appForm .appForm-platformDependent')
                .removeClass('iphone')
                .removeClass('android')
                .addClass($(this).val());
        }).filter(':checked').click();

        // Search button
        $('#appForm-search-button')
            .button({ icons: { primary: "ui-icon-search" }})
            .click(function(e) {
                e.preventDefault();
                if ($(this).button( "option", "disabled" )) {
                    return;
                }

                $('#searchAppStore-loading').show();

                $('#dashboard-searchAppStore-custom-modal').dialog({
                    buttons: [
                        {
                            text: 'Cancel',
                            click: function() {
                                $('#searchAppStore-results').html('');
                                $(this).dialog("close");
                            }
                        }
                    ]
                });
                var name = $('#appForm input[name="name"]').val();
                var script = document.createElement("script");
                script.src = 'http://ax.itunes.apple.com'
                    + '/WebObjects/MZStoreServices.woa/wa/wsSearch'+
                    + '?entity=software&limit=10&callback=loadedArtwork&term='
                    + name;
                var head = document.getElementsByTagName("head")[0];
                (head || document.body).appendChild( script );
            });

        if ($('#appForm-name').val() === '') {
            $('#appForm-search-button').button("disable");
            $('#appForm-search').button("disable");
            $('#appForm-market-search-button').button("disable");
            $('#appForm-market-search').button("disable");
        }

        $('#appForm-name').keyup(function(e) {
            // Show/hide the app search button
            var name = $.trim($(this).val());
            var type = $('input:radio[name="app_type"]:checked').val();

            if (name.length) {
                $('#appForm-search-button').button("enable");
                $('#appForm-market-search-button').button('enable');
            } else {
                $('#appForm-search-button').button("disable");
                $('#appForm-market-search-button').button('disable');
            }
            if (e.keyCode == 13) {
                if (type == 'iphone') {
                    $('#appForm-search-button').click();
                } else if (type == 'android') {
                    $('#appForm-market-search-button').click();
                }
            }
        });

        $('#appForm-changeIcon-link').click(function (e) {
            e.preventDefault();
            $(this).hide();
            $('#appForm-icon-upload').show();
            $('#appForm input[name="img_url"]').val('');
        });

        $('input[name="app_type"]').click(function(e) {
            $('#appForm .appForm-platformDependent')
                .removeClass('iphone')
                .removeClass('android')
                .removeClass('mweb')
                .addClass($(this).val());
        }).filter(':checked').click(); // make sure we're in sync when the page Loads
    }

    function initializeEditAppForm() {
        // Set up all of the handlers from the new app form for the new
        // app form.
        initializeNewAppForm();

        // Handler for submitting the edit app form over ajax.
        // If the form submit is successful, the page will reload.
        // If not, the errors will eb displayed.
        $('#appForm.appEditForm').ajaxForm({
            data: { ajax: true },
            dataType: 'json',
            success: function(jsonData, statusText, xhr, $form) {

                // Hide the loading spinner
                $('#appEditForm-loading').hide();

                // Reload the page if the form save was successful
                if (jsonData.success) {
                    window.location.reload();
                } else {
                    // Remove the existing errors before we add the new ones.
                    $('.form-error-text', "#appForm").remove();

                    $.each(jsonData.errors, function (iter, item) {
                        var name = item[0];
                        var error_div = $("<div>").append(item[1]).addClass('form-error-text');

                        $("input[name=" + name + "]", "#appForm")
                            .addClass('error')
                            .parent().append(error_div);

                        $("select[name=" + name + "]", "#appForm")
                            .addClass('error')
                            .parent().append(error_div);
                    });
                    // reimplement the onload event
                    initializeNewAppForm();
                    window.location.hash = '';
                    window.location.hash = 'appForm';
                }
            }
        });

        // When the 'submit' button is clicked, show the loading spinner
        // and submit the form.
        $('#appEditForm-submit')
            .button({
                icons: { secondary: "ui-icon-circle-triangle-e" }
            })
            .click(function(e) {
                e.preventDefault();
                $('#appEditForm-loading').show();
                $('#appForm').submit();
            });

        // When the 'cancel' button is clicked, hide the form by sliding it up
        $('#appEditForm-cancel')
            .click(function(e) {
                e.preventDefault();
                $('#dashboard-appEditForm').slideUp('fast');
            });

        // When the 'edit app settings' button is click, hide/show the app form
        $('#dashboard-apps-editAppButton')
            .button({
                icons: { primary: "ui-icon-wrench" }
            })
            .click(function(e) {
                e.preventDefault();
                if ($('#dashboard-appEditForm').is(':visible')) {
                    $('#dashboard-appEditForm').slideUp('fast');
                } else {
                    $('#dashboard-appEditForm').slideDown('fast');
                }
            });
    }


    /*
     * ## initializeNewAdunitForm
     * Loads all click handlers/visual stuff/ajax loading for
     * the app form.
     */
    function initializeNewAdunitForm() {

        // Set up device format selection UI
        $("#adunit-device_format_phone")
            .parent()
            .buttonset();

        $("#adunit-device_format_phone").click(function(e){
            $('#adForm-tablet-container').hide();
            $('#adForm-phone-container')
                .show()
                .find('input[type="radio"]')[0].click();
        });

        // Click handler for the tablet format
        $('#adunit-device_format_tablet').click(function(e){
            $('#adForm-phone-container').hide();
            $('#adForm-tablet-container')
                .show()
                .find('input[type="radio"]')[0].click();
        });

        // Slide up/down handler for the form div
        $('#dashboard-apps-addAdUnitButton')
            .button({
                icons: { primary: "ui-icon-circle-plus" }
            })
            .click(function(e) {
                e.preventDefault();
                if ($('#dashboard-adunitAddForm').is(':visible'))
                    $('#dashboard-adunitAddForm').slideUp('fast');
                else
                    $('#dashboard-adunitAddForm').slideDown('fast');
            });

        // Submitting over ajax
        $('#adunitAddForm-submit')
            .button({
                icons: { secondary: "ui-icon-circle-triangle-e" }
            })
            .click(function(e) {
                e.preventDefault();
                $('#adunitForm-loading').show();
                $('#adunitAddForm').submit();
            });

        // Cancel button that hides the form
        $('#adunitAddForm-cancel')
            .click(function(e) {
                e.preventDefault();
                $('#dashboard-adunitAddForm').slideUp('fast', function() {
                    $('#dashboard-apps-addAdUnitButton').show();
                });
            });

        $('#adunitAddForm').ajaxForm({
            data: { ajax: true },
            dataType: 'json',
            success: function(jsonData, statusText, xhr, $form) {
                $('#adunitForm-loading').hide();
                if (jsonData.success) {
                    window.location.reload();
                } else {
                    // reimplement the onload event
                    initializeNewAppForm();
                    initializeNewAdunitForm();
                    window.location.hash = '';
                    window.location.hash = 'adunitForm';
                }
            }
        });

        function setDefaultAdUnitName(id) {
            var nameField = $('#appForm-adUnitName');

            // Object that maps id to default ad unit name
            var defaultBannerNames = {
                'appForm-adUnitFormat-banner': 'Banner Ad',
                'appForm-adUnitFormat-tablet-banner': 'Banner Ad',
                'appForm-adUnitFormat-medium': 'Mrect Ad',
                'appForm-adUnitFormat-tablet-medium': 'Mrect Ad',
                'appForm-adUnitFormat-full': 'Fullscreen Ad',
                'appForm-adUnitFormat-full-tablet': 'Fullscreen Ad', // sigh not a typo
                'appForm-adUnitFormat-custom': 'Custom Ad',
                'appForm-adUnitFormat-tablet-custom': 'Custom Ad',
                'appForm-adUnitFormat-tablet-leaderboard': 'Leaderboard Ad',
                'appForm-adUnitFormat-wide-tablet-skyscraper': 'Skyscraper Ad'
            };

            // If the current ad name is a default, we can replace it at will
            $.each(defaultBannerNames, function(key, value) {
                if (nameField.val() === value) {
                    nameField.val(defaultBannerNames[id]);
                    // break out of the loop
                    return false;
                }
            });
        };

        // Set up format selection UI for phone
        $('#adForm-phone-formats').each(function() {
            var container = $(this);

            $('input[type="radio"]', container).click(function(e) {
                var radio = $(this);
                var formatContainer = radio.parents('.adForm-format');
                $('.adForm-format-image').css({ opacity: 0.5 });
                $('.adForm-format-image', formatContainer).css({ opacity: 1 });

                var $full_onlys = $(".full_only");
                var $banner_onlys = $(".banner_only");
                if ($(this).attr("id") == "appForm-adUnitFormat-full-tablet" ||
                    $(this).attr("id") == "appForm-adUnitFormat-full"){
                    $full_onlys.show();
                    $banner_onlys.hide();
                } else {
                    $full_onlys.hide();
                    $banner_onlys.show();
                }

                var $custom_onlys = $(".custom_only");
                if ($(this).attr("id") == "appForm-adUnitFormat-tablet-custom" ||
                    $(this).attr("id") == "appForm-adUnitFormat-custom") {
                    $custom_onlys.show();
                } else {
                    $custom_onlys.hide();
                }

                setDefaultAdUnitName($(this).attr("id"));

            }).filter(':checked').click();

            $('.adForm-format-image', container).click(function(e) {
                var image = $(this);
                var formatContainer = image.parents('.adForm-format');
                $('input[type="radio"]', formatContainer).click();
            });

            $('.adForm-format-details input[type="text"]', container).focus(function() {
                var input = $(this);
                var formatContainer = input.parents('.adForm-format');
                $('input[type="radio"]', formatContainer).click();
            });
        });

        // Set up format selection UI for tablet
        $('#adForm-tablet-formats').each(function(){
            var container = $(this);
            //bind radio buttons to images
            $(this).find('input[type="radio"]').click(function(e) {
                var index = $(this).parent().index();
                var images = $("#adForm-images-container");
                images.children().hide();
                var image = images.children()[index];
                $(image).show().css({ opacity: 1 });

                var $full_onlys = $(".full_only");
                var $banner_onlys = $(".banner_only");
                if ($(this).attr("id") == "appForm-adUnitFormat-full-tablet" ||
                    $(this).attr("id") == "appForm-adUnitFormat-full"){
                    $full_onlys.show();
                    $banner_onlys.hide();
                } else {
                    $full_onlys.hide();
                    $banner_onlys.show();
                }

                var $custom_onlys = $(".custom_only");
                if ($(this).attr("id") == "appForm-adUnitFormat-tablet-custom" ||
                    $(this).attr("id") == "appForm-adUnitFormat-custom"){
                    $custom_onlys.show();
                } else {
                    $custom_onlys.hide();
                }

                setDefaultAdUnitName($(this).attr("id"));

            }).first().click(); //initialize by activating the first
        });

        //initialize checked elements
        $("#adunit-device_format_phone").parent().children()
            .filter(':checked')
            .click()
            .each(function() {
                var deviceFormat = $(this).val(); //either tablet or phone
                var container = "#adForm-" + deviceFormat + "-container";
                $(container).find('.possible-format').click();
            });
        }

    /*
     * ## initializeEditAdunitForm
     * Like the app editing form, the adunit editing form is done
     * over ajax and is displayed in div that slides in and out of
     * the page.
     */
    function initializeEditAdunitForm() {

        initializeNewAdunitForm();

        $('#dashboard-apps-editAdUnitButton')
            .button({ icons: { primary: "ui-icon-wrench" } })
            .click(function(e) {
                e.preventDefault();
                if ($('#dashboard-adunitEditForm').is(':visible'))
                    $('#dashboard-adunitEditForm').slideUp('fast');
                else
                    $('#dashboard-adunitEditForm').slideDown('fast');
            });

        $('#adunitEditForm-submit')
            .button({
                icons: { secondary: "ui-icon-circle-triangle-e" }
            })
            .click(function(e) {
                e.preventDefault();
                $('#adunitForm-loading').show();
                $('#adunitAddForm').submit();
            });

        $('#adunitEditForm-cancel')
            .click(function(e) {
                e.preventDefault();
                $('#dashboard-adunitEditForm').slideUp('fast');
            });

        $('#adunitAddForm').ajaxForm({
            data: {
                ajax: true
            },
            dataType: 'json',
            success: function(jsonData, statusText, xhr, $form) {
                $('#adunitForm-loading').hide();
                if (jsonData.success) {
                    window.location.reload();
                } else {

                    // reimplement the onload event
                    initializeNewAppForm();
                    initializeNewAdunitForm();
                    window.location.hash = '';
                    window.location.hash = 'adunitForm';
                }
            }
        });
    }

    /*
     * ## initializeDailyCounts
     * Initializes click handlers in the daily counts section for the
     * app/adunit detail pages.
     */
    function initializeDailyCounts() {

        var button = $('.appData-details-toggleButton');
        button.button();

        var individual_daily_counts = $("#appData-individual");

        button.click(function(e) {
            e.preventDefault();
            if (individual_daily_counts.hasClass("hidden")) {
                individual_daily_counts.removeClass("hidden");
                button.button('option', 'label', 'Hide Details');
            } else {
                individual_daily_counts.addClass("hidden");
                button.button('option', 'label', 'Show Details');
                button.button();
            }
        });
    }

    /*
     * ## initializeDateButtons
     * Loads all click handlers/visual stuff for the date buttons. Used
     * on a ton of pages, probably could be refactored by someone brave
     * enough.
     */
    function initializeDateButtons () {
        $('#dashboard-dateOptions input').click(function() {
            var option = $(this).val();
            if (option == 'custom') {
                $('#dashboard-dateOptions-custom-modal').dialog({
                    width: 570,
                    buttons: [
                        {
                            text: 'Set dates',
                            css: { fontWeight: '600' },
                            click: function() {
                                var from_date = $('#dashboard-dateOptions-custom-from').xdatepicker("getDate");
                                var to_date = $('#dashboard-dateOptions-custom-to').xdatepicker("getDate");
                                var num_days = Math.ceil((to_date.getTime()-from_date.getTime())/(86400000)) + 1;

                                var from_day = from_date.getDate();
                                // FYI, months are indexed from 0
                                var from_month = from_date.getMonth() + 1;
                                var from_year = from_date.getFullYear();

                                $(this).dialog("close");
                                var location = document.location.href.replace(/\?.*/,'');
                                document.location.href = location
                                    + '?r=' + num_days
                                    + '&s=' + from_year + "-" + from_month + "-" + from_day;
                            }
                        },
                        {
                            text: 'Cancel',
                            click: function() {
                                $(this).dialog("close");
                            }
                        }
                    ]
                });
            } else {
                // Tell server about selected option to get new data
                var location = document.location.href.replace(/\?.*/,'');
                document.location.href = location + '?r=' + option;
            }
        });


        // set up stats breakdown dateOptions
        $('#stats-breakdown-dateOptions input').click(function() {
            $('.stats-breakdown-value').hide();
            $('.stats-breakdown-value.'+$(this).val()).show();
        });

        // set up custom dateOptions modal dialog
        $('#dashboard-dateOptions-custom-from').xdatepicker({
            defaultDate: '-15d',
            maxDate: '0d',
            onSelect: function(selectedDate) {
                var other = $('#dashboard-dateOptions-custom-to');
                var instance = $(this).data("datepicker");
                var date = $.xdatepicker.parseDate(instance.settings.dateFormat
                                                  || $.xdatepicker._defaults.dateFormat,
                                                  selectedDate,
                                                  instance.settings);
                other.xdatepicker('option', 'minDate', date);
            }
        });

        $('#dashboard-dateOptions-custom-to').xdatepicker({
            defaultDate: '-1d',
            maxDate: '0d',
            onSelect: function(selectedDate) {
                var other = $('#dashboard-dateOptions-custom-from');
                var instance = $(this).data("datepicker");
                var date = $.xdatepicker.parseDate(instance.settings.dateFormat ||
                                                  $.xdatepicker._defaults.dateFormat,
                                                  selectedDate,
                                                  instance.settings);
                other.xdatepicker('option', 'maxDate', date);
            }
        });
    }

    /*
     * ## initializeDeleteForm
     * Deleting apps/adunits is done with a form that's submitted via a dialog.
     * The ajax submitting of the form and the dialog popup are done here.
     */
    function initializeDeleteForm() {
        $('#dashboard-delete-link').click(function(e){
            e.preventDefault();
            $('#dashboard-delete-modal').dialog({
                buttons: [
                    {
                        text: 'Delete',
                        click: function() {
                            $(this).dialog('close');
                            $('#dashboard-deleteForm').submit();
                        }
                    },
                    {
                        text: 'Cancel',
                        click: function() {
                            $(this).dialog('close');
                        }
                    }
                ]
            });
        });
    }

    /*
     * ## initializeiOSAppSearch
     * Sets up the iTunes app store searching functionality for creating new apps.
     */
    function initializeiOSAppSearch() {
        // Search button
        $('#appForm-search-button')
            .button({ icons: { primary: "ui-icon-search" }})
            .click(function(e) {
                e.preventDefault();
                if ($(this).button( "option", "disabled" )) {
                    return;
                }

                $('#searchAppStore-loading').show();

                $('#dashboard-searchAppStore-custom-modal').dialog({
                    buttons: [
                        {
                            text: 'Cancel',
                            click: function() {
                                $('#searchAppStore-results').html('');
                                $(this).dialog("close");
                            }
                        }
                    ]
                });
                var name = $('#appForm input[name="name"]').val();
                var script = document.createElement("script");
                script.src = 'http://ax.itunes.apple.com/WebObjects/MZStoreServices.woa/wa/wsSearch?'
                    + 'entity=software&limit=10&callback=loadedArtwork&term='
                    + name;
                var head = document.getElementsByTagName("head")[0];
                (head || document.body).appendChild( script );
            });
    }

    /*
     * # initializeCommon
     * This function groups together a couple of pieces of functionality that are used on
     * all of the publisher pages (inventory, app, adunit stuff)
     */
    function initializeCommon() {
        initializeDateButtons();
        // Use breakdown to switch charts
        $('.stats-breakdown tr').click(function(e) {
            $('#dashboard-stats-chart').fadeOut(100, function() {
                mopub.Chart.setupDashboardStatsChart(getCurrentChartSeriesType());
                $(this).show();
            });
        });

        $('.stats-breakdown tr').click(function(e) {
            var row = $(this);
            if (!row.hasClass('active')) {
                var table = row.parents('table');
                $('tr.active', table).removeClass('active');
                row.addClass('active');
            }
        });

        $('.appData-id').each(function() {
            var id = $(this);
            var td = id.parents('tr');
            td.hover(
                function() {
                    id.show();
                },
                function() {
                    id.hide();
                });
        });
    }


    /*
     * ## Dashboard Controller
     */
    var DashboardController = {
        initializeIndex: function (bootstrapping_data) {

            // Adds click handlers for the top date buttons and stats breakdown
            // date buttons, and click handlers for the stats breakdown graph-
            // changing
            initializeCommon();

            // Populate the graph
            // REFACTOR: use CollectionGraphView
            populateGraphWithAccountStats(bootstrapping_data.account_stats,
                                          bootstrapping_data.start_date);

            // Populate the app/adunit stats table
            fetchAppStats(bootstrapping_data.app_keys);
            _.each(bootstrapping_data.app_keys, function(app_key) {
                fetchAdunitStats(app_key);
            });

            // Add icon to the 'Add an app' button
            // Remove later with new button treatment
            $('#dashboard-apps-addAppButton')
                .button({ icons: { primary: "ui-icon-circle-plus" } });

            // Do Dashboard export
            $('#publisher-dashboard-exportSelect')
                .change(function(e) {
                    e.preventDefault();
                    var val = $(this).val();
                    if (val != 'exp') {
                        $('#dashboardExportForm')
                .find('#appExportType')
                            .val(val)
                            .end()
                            .submit();
                    }
                    $(this).selectmenu('index', 0);
                });


            // Hide unneeded li entry
            $('#publisher-dashboard-exportSelect-menu').find('li').first().hide();
        },


        initializeGeo: function (bootstrapping_data) {
            initializeCommon();
            mopub.Chart.setupDashboardStatsChart(getCurrentChartSeriesType());
        },

        initializeAppDetail: function (bootstrapping_data) {
            initializeCommon();
            initializeEditAppForm();
            initializeNewAdunitForm();
            initializeDeleteForm();
            initializeiOSAppSearch();
            initializeDailyCounts();
            mopub.Chart.setupDashboardStatsChart(getCurrentChartSeriesType());

            // Do Campaign Export Select stuff
            $('#publisher-app-exportSelect')
                .change(function(e) {
                    e.preventDefault();
                    var val = $(this).val();
                    if (val != 'exp') {
                    $('#appExportForm')
                            .find('#appExportType')
                            .val(val)
                            .end()
                            .submit();
                    }
                    $(this).selectmenu('index', 0);
                });

            // Hide unneeded li entry
            $('#publisher-app-exportSelect-menu').find('li').first().hide();

            fetchAppStats([bootstrapping_data.app_key]);
            fetchAdunitStats(bootstrapping_data.app_key);
        },

        initializeAdunitDetail: function (bootstrapping_data) {
            initializeCommon();
            initializeDeleteForm();
            initializeDailyCounts();
            initializeEditAdunitForm();

            mopub.Chart.setupDashboardStatsChart(getCurrentChartSeriesType());

            $('#advertisers-testAdServer')
                .button({ icons : {secondary : 'ui-icon-circle-triangle-e'} })
                .click(function(e) {
                    e.preventDefault();
                    $('#adserverTest').dialog({
                        buttons: {
                            "Close": function() {
                                $(this).dialog("close");
                            }
                        }
                    });
                    $('#adserverTest-iFrame').attr('src',$('#adserverTest-iFrame-src').text());
                });
        },

        initializeAppCreate: function (bootstrapping_data) {
            initializeCommon();
            initializeNewAppForm();
            initializeNewAdunitForm();
        }
    };

    window.DashboardController = DashboardController;
    
})(this.jQuery, this.Backbone, this._);

/* REFACTOR */
var artwork_json;

// fuck you
function loadedArtwork(json) {
    if (!$('#dashboard-searchAppStore-custom-modal').dialog("isOpen"))
        return;

    $('#searchAppStore-results').html('');
    $('#searchAppStore-loading').hide();
    $('#dashboard-searchAppStore-custom-modal').dialog("close");

    artwork_json = json;
        var resultCount = json['resultCount'];
    if (resultCount == 0) {
        $('#searchAppStore-results').append("<div class='adForm-appSearch-text' />")
            .append("No results found");
        $('#dashboard-searchAppStore-custom-modal').dialog("open");
        return;
    }
    for (var i=0;i<resultCount;i++) {
        if (i > 10 ) {
            break;
        }
        var app = json['results'][i];

        $('#searchAppStore-results')
            .append($("<div class='adForm-appSearch' />")
                    .append($("<div class='adForm-appSearch-img' />")
                            .append($("<img />")
                                    .attr("src",app['artworkUrl60'])
                                    .width(40)
                                    .height(40)
                                   )
                            .append($("<span />"))
                           )
                    .append($("<div class='adForm-appSearch-text' />")
                            .append($("<span />")
                                    .append($("<a href=\"#\" onclick=\"selectArtwork("+i
                                              +");return false\";>"+app['trackName']+"</a>"))
                                    .append("<br />"+app['artistName'])
                                   )
                           )
                    .append($("<div class='clear' />"))
                   );
    }

    $('#dashboard-searchAppStore-custom-modal').dialog("open");
}

function selectArtwork(index) {
    $('#searchAppStore-results').html('');
    $('#appForm-icon').html('');
    $('#dashboard-searchAppStore-custom-modal').dialog("close");

    var app = artwork_json.results[index];
    var type = $('input:radio[name="app_type"]:checked').val();

    var form = $('app_form');
    $('#appForm input[name="name"]').val(app['trackName']);
    $('#appForm input[name="description"]').val(app['description']);
    if ( type == 'iphone' )
        $('#appForm input[name="url"]').val(app['trackViewUrl']);
    else if ( type == 'android' )
        $('#appForm input[name="package"]').val(app['trackViewUrl']);
    $('#appForm input[name="img_url"]').val(app['artworkUrl60']);
    $('#appForm select[name="primary_category"]').val(app['primaryGenreName'].toLowerCase());
    $('#appForm select[name="secondary_category"]').val(app['genres'][1].toLowerCase());

    $('#appForm-icon').append($("<img />")
                              .attr("src",app.artworkUrl60)
                              .width(40)
                              .height(40)
                              .append($("<span />")) );
}

(function($) {

 $(document).ready(function() {


     function addPlaceholder() {
        $('.reportData-placeholder').hide();
        $('table').each(function() {
            visible = $(this).find('.reportData:visible');
            if (visible.length === 0) {
                $(this).find('.reportData-placeholder').show();
            }
        });
     }
     addPlaceholder();

    $('input[name="start"]').xdatepicker().change(function (e) {
        var dte = new Date($(this).val());
        $('input[name="end"]').xdatepicker('option', 'minDate', dte);
    });

    $('input[name="end"]').xdatepicker({maxDate: new Date()}).change(function (e) {
        var dte = new Date($(this).val());
        $('input[name="start"]').xdatepicker('option', 'maxDate', dte);
    });

    function rep_validate(form) {
        /* Check a form for selectmenu-required selectmenus
         * check for date-requireds
         * If any invalid, flag as invalid (with the pretty red colors)
         * and return False
         * if nothing invalid, return True
         */
        var success = true;
        $('#d1Error').hide();
        $('#dateError').hide();
        $('select.selectmenu-required').each(function() {
            if ($(this).val() == '') {
                $('#d1Error').show();
                success = false;
            }
        });
        $('.date-required').each(function() {
            $(this).removeClass('form-error');
            if ($(this).val() == '') {
                $(this).addClass('form-error');
                $('#dateError').show();
                success = false;
            }
        });
        return success;
    }

    var sub_label;
    if (window.location.pathname == '/reports/') {
        sub_label = 'Run';
    }
    else {
        sub_label = 'Save';
    }

    $('#reportCreateForm-submit')
    .button({
        label: sub_label,
        icons: {secondary: 'ui-icon-circle-triangle-e' }})
    .click(function(e) {
            e.preventDefault();
            if (rep_validate($('#reportCreateForm'))) {
                $('#reportCreateForm').submit();
            }
            else {
                $('#formError').show();
            }
    });

    $('#reports-view-runReportButton').button({
        icons: {secondary: 'ui-icon-circle-triangle-e' }});

    function ajaxSave() {
        $.ajax({
            url:'http://' + window.location.host + '/reports/save/' + $('#reportKey').val() + '/',
            success: function() {
                $('#reports-view-toIndex').click();
            }
        });
    }

     $('#reports-view-saveAsButton').button({icons: {secondary: 'ui-icon-check'}})
         .click(function(e) {
             e.preventDefault();
             $('#saveAs').val('True');
             $('#reportName-input').val('Copy of '+ $('#reportName-input').val());
             $('.dim-selectmenu').selectmenu('disable');
             $('#interval').selectmenu('disable');
             $('#start-input').xdatepicker('disable');
             $('#end-input').xdatepicker('disable');
             $('#reportCreateForm-submit').button({label: 'Save As'});
             $('#sched_interval').selectmenu('index', 0).change();
             $('#reportForm-container').dialog({width:750});
        });

     $('#reportCreateForm-cancel').button()
         .click(function(e) {
             e.preventDefault();
             $('#reports-reportAddForm').slideUp('fast');
         });

     $('#reports-addReportButton').button({icons: {primary: 'ui-icon-circle-plus'}})
         .click(function(e){
                e.preventDefault();
             var report_form = $('#reports-reportAddForm');
             if (report_form.is(':hidden')) {
                 $('#reports-reportAddForm').slideDown('fast');
             }
             else {
                 $('#reports-reportAddForm').slideUp('fast');
             }
         });

     $('#reports-view-editReportButton').button({icons: {primary: 'ui-icon-wrench'}})
         .click(function(e) {
             e.preventDefault();
             $('#saveAs').val('False');
             $('#reportCreateForm-submit').button({label: 'Save'});
             var report_form = $('#reportForm-container');
             report_form.dialog({width:750});
         });


     $('#reportCreateForm-cancel')
         .button()
         .click(function(e) {
             e.preventDefault();
             $('.dim-selectmenu').selectmenu('enable');
             $('#interval').selectmenu('enable');
             $('#start-input').xdatepicker('enable');
             $('#end-input').xdatepicker('enable');
             revert_state(form_state);
             $(this).parents('#reportForm-container')
                 .dialog('close');
         });

     $('#reportUpdateForm-cancel')
         .button()
         .click(function(e) {
             e.preventDefault();
             $(this).parents('#reportFormSaveAs-container')
                 .dialog('close');
         });

     $('#reportUpdateForm-submit')
         .button()
         .click(function(e) {
             e.preventDefault();
            if($('#start-input').xdatepicker('isDisabled')) {
                $('#start-input').xdatepicker('enable');
            }
            if($('#end-input').xdatepicker('isDisabled')) {
                $('#end-input').xdatepicker('enable');
            }
            $(this).parents('form').submit();
         });

     $('#reports-view-exportSelect')
         .change(function(e) {
             e.preventDefault();
             var val = $(this).val();
             if (val != 'exp') {
                 $('#reportExportForm')
                     .find('#report-exportFtype')
                     .val(val)
                     .end()
                     .submit();
             }
             $(this).selectmenu('index', 0);
        });

    $('#reports-view-exportSelect-menu').find('li').first().hide();

    $('#reports-view-exportButton')
        .click(function(e) {
            e.preventDefault();
            $('#reportExportForm').submit();
        });



    $('.int-selectmenu').selectmenu({
        style: 'popup',
        maxHeight:300,
        width:115
    });

    $('#sched_interval').selectmenu({
        style:'popup',
        maxHeight:300,
        width:135,
    });

    function fix_date(dte) {
        if (dte < 10) {
            return '0' + dte;
        }
        return dte;
    }

    function format_date(dte) {
        return fix_date(dte.getMonth() + 1) + '/' + fix_date(dte.getDate()) + '/' + dte.getFullYear();
    }


    var update = true;
    $('#interval')
        .change(function(e) {
            update = false;
            var val = $(this).val();
            var today = new Date();
            if (val != 'custom') {
                $('#interval-toggle').val(2);
                var one_day = 1000*60*60*24
                switch (val) {
                    case 'yesterday':
                        today.setTime(today.getTime() - one_day);
                        var dte = format_date(today);
                        $('#end-input').val(dte).change();
                        $('#start-input').val(dte).change();
                        break;
                    case '7days':
                        var dte = format_date(today);
                        $('#end-input').val(dte).change();
                        today.setTime(today.getTime() - (7*one_day));
                        dte = format_date(today);
                        $('#start-input').val(dte).change();
                        break;
                    case 'lmonth':
                        var this_mo = today.getMonth();
                        while (today.getMonth() == this_mo) {
                            today.setTime(today.getTime() - one_day);
                        }
                        var dte = format_date(today);
                        $('#end-input').val(dte).change();
                        today.setDate(1);
                        dte = format_date(today);
                        $('#start-input').val(dte).change();
                        break;
                }
            }
            else {
                return;
            }
        }).change();

    $('.date-field')
        .change(function(e) {
            var inter_val = $('#interval-toggle').val()
            if ($('#interval-toggle').val() == 0) {
                $('#interval').selectmenu('index', 3);
            }
            else {
                $('#interval-toggle').val(inter_val - 1);
            }
        });

    var selects = $('.dim-selectmenu').selectmenu({
        style: 'popup',
        maxHeight:320,
        width:110
    });

    d1_sel = $(selects[0]);
    d2_sel = $(selects[1]);
    d3_sel = $(selects[2]);

    function revert_state(state) {
        d1_sel.selectmenu('index', state.d1);
        d1_validate($('#d1'));
        d2_sel.selectmenu('index', state.d2);
        d2_validate($('#d2'));
        d3_sel.selectmenu('index', state.d3);
        $('#end-input').val(state.end);
        $('#start-input').val(state.start);
        $('#interval').selectmenu('index', state.interv);
        $('#sched_interval').selectmenu('index', state.sched_interv);
        // Trigger those on change events what whatttt
        $('#interval').change();
        $('#sched_interval').change();
        $("#reportName-input").val(state.name);
        if (state.email) {
            $('#email-input-checkbox').attr('checked');
        }
        else {
            $('#email-input-checkbox').removeAttr('checked');
        }
    }

    function get_form_state() {
        return build_state( sel_state(d1_sel),
                            sel_state(d2_sel),
                            sel_state(d3_sel),
                            sel_state($('#interval')),
                            sel_state($('#sched_interval')),
                            $('#end-input').val(),
                            $('#start-input').val(),
                            $('#reportName-input').val(),
                            $('#email-input-checkbox')
                          );
    }
    function build_state(d1, d2, d3, interv, sched_interv, end, start, name, email) {
        return {
            d1: d1,
            d2: d2,
            d3: d3,
            interv: interv,
            sched_interv: sched_interv,
            end: end,
            start: start,
            name: name,
            email:email.is(':checked'),
        };
    }
    function sel_state(obj) {
        return obj.selectmenu('index');
    }
    //Get the state of the form so we go back to this on cancel
    var form_state = get_form_state();


    $('#d1').change(
        function(e) {
            if ($(this).val() != '') {
                $('#d1Error').hide();
            }
            e.preventDefault();
            d1_validate($(this));
            d2_validate($('#d2'));
        }).change();


    function d1_validate(obj) {
            var idx = obj.selectmenu('index');
            //start with everything enabled
            for (var i = 0; i < 14; i++) {
                d3_sel.selectmenu('enable', i);
                d2_sel.selectmenu('enable', i);
            }
            var d2_idx = d2_sel.selectmenu("index");
            var d3_idx = d3_sel.selectmenu("index");
            $('#d2-show').show();
            switch(obj.val()) {
                case '':
                    d2_sel.selectmenu("index", 0);
                    d3_sel.selectmenu("index", 0);
                    $('#d2-show').hide();
                    $('#d3-show').hide();
                    break;
                case 'adunit':
                    if (d2_idx == 2) {
                        d2_sel.selectmenu("index", 0);
                    }
                    if (d3_idx == 2) {
                        d3_sel.selectmenu("index", 0);
                    }
                    d2_sel.selectmenu('disable', '2');
                    d3_sel.selectmenu('disable', '2');

                case 'app':
                    if (d2_idx == 1) {
                        d2_sel.selectmenu("index", 0);
                    }
                    if (d3_idx == 1) {
                        d3_sel.selectmenu("index", 0);
                    }
                    d2_sel.selectmenu('disable', '1');
                    d3_sel.selectmenu('disable', '1');
                    break;

                case 'creative':
                    if (d2_idx == 5) {
                        d2_sel.selectmenu("index", 0);
                    }
                    if (d3_idx == 5) {
                        d3_sel.selectmenu("index", 0);
                    }
                    d2_sel.selectmenu('disable', '5');
                    d3_sel.selectmenu('disable', '5');

                case 'campaign':
                    if (d2_idx == 4) {
                        d2_sel.selectmenu("index", 0);
                    }
                    if (d3_idx == 4) {
                        d3_sel.selectmenu("index", 0);
                    }
                    d2_sel.selectmenu('disable', '4');
                    d3_sel.selectmenu('disable', '4');

                case 'priority':
                    if (d2_idx == 3) {
                        d2_sel.selectmenu("index", 0);
                    }
                    if (d3_idx == 3) {
                        d3_sel.selectmenu("index", 0);
                    }
                    d2_sel.selectmenu('disable', '3');
                    d3_sel.selectmenu('disable', '3');
                    break;
                case 'hour':
                    if (d2_idx == 9) {
                        d2_sel.selectmenu("index", 0);
                    }
                    if (d3_idx == 9) {
                        d3_sel.selectmenu("index", 0);
                    }
                    d2_sel.selectmenu('disable', '9');
                    d3_sel.selectmenu('disable', '9');
                case 'day':
                    if (d2_idx == 8) {
                        d2_sel.selectmenu("index", 0);
                    }
                    if (d3_idx == 8) {
                        d3_sel.selectmenu("index", 0);
                    }
                    d2_sel.selectmenu('disable', '8');
                    d3_sel.selectmenu('disable', '8');
                case 'week':
                    if (d2_idx == 7) {
                        d2_sel.selectmenu("index", 0);
                    }
                    if (d3_idx == 7) {
                        d3_sel.selectmenu("index", 0);
                    }
                    d2_sel.selectmenu('disable', '7');
                    d3_sel.selectmenu('disable', '7');
                case 'month':
                    if (d2_idx == 6) {
                        d2_sel.selectmenu("index", 0);
                    }
                    if (d3_idx == 6) {
                        d3_sel.selectmenu("index", 0);
                    }
                    d2_sel.selectmenu('disable', '6');
                    d3_sel.selectmenu('disable', '6');
                    break;
                case 'country':
                    if (d2_idx == 10) {
                        d2_sel.selectmenu("index", 0);
                    }
                    if (d3_idx == 10) {
                        d3_sel.selectmenu("index", 0);
                    }
                    d2_sel.selectmenu('disable', '10');
                    d3_sel.selectmenu('disable', '10');
                    break;
                case 'marketing':
                    if (d2_idx == 11) {
                        d2_sel.selectmenu('index', 0);
                    }
                    if (d3_idx == 11) {
                        d3_sel.selectmenu('index', 0);
                    }
                    d2_sel.selectmenu('disable', 11);
                    d3_sel.selectmenu('disable', 11);
                    break;
                case 'os_ver':
                    if (d2_idx == 13) {
                        d2_sel.selectmenu('index', 0);
                    }
                    if (d3_idx == 13) {
                        d3_sel.selectmenu('index', 0);
                    }
                    d2_sel.selectmenu('disable', 13);
                    d3_sel.selectmenu('disable', 13);
                case 'os':
                    if (d2_idx == 12) {
                        d2_sel.selectmenu('index', 0);
                    }
                    if (d3_idx == 12) {
                        d3_sel.selectmenu('index', 0);
                    }
                    d2_sel.selectmenu('disable', 12);
                    d3_sel.selectmenu('disable', 12);
                    break;
                default:
                    break;
            }
    }

    $('#d2').change(
        function(e) {
            e.preventDefault();
            d1_validate($('#d1'));
            d2_validate($(this));
        });

    $('.update-button').change(
        function(e) {
            e.preventDefault();
            if (!obj_equals(form_state, get_form_state())) {
                $('#reportCreateForm-submit').button({label:'Save and Run'});
            }
            else {
                $('#reportCreateForm-submit').button({label:'Save'});
            }
        }).change();



function obj_equals(x, y) {
    for(p in y) {
        if(typeof(x[p])=='undefined') {return false;}
    }
    for(p in y) {
        if (y[p]) {
            switch(typeof(y[p])) {
              case 'object':
                if (!y[p].equals(x[p])) { return false }; break;
              case 'function':
                if (typeof(x[p])=='undefined' || (p != 'equals' && y[p].toString() != x[p].toString())) { return false; }; break;
            default:
                if (y[p] != x[p]) { return false; }
            }
        }
        else {
            if (x[p]) {
                return false;
            }
        }
    }
    for(p in x){
        if(typeof(y[p])=='undefined') {return false;}
    }
    return true;
}




     function d2_validate(obj) {
         var idx = obj.selectmenu('index');
        //start with everything enabled
        var d3_idx = d3_sel.selectmenu("index");
        $('#d3-show').show();
        switch(obj.val()) {
            case '':
                d3_sel.selectmenu("index", 0);
                $('#d3-show').hide();
                break;
            case 'adunit':
                if (d3_idx == 2) {
                    d3_sel.selectmenu("index", 0);
                }
                d3_sel.selectmenu('disable', '2');
            case 'app':
                if (d3_idx == 1) {
                    d3_sel.selectmenu("index", 0);
                }
                d3_sel.selectmenu('disable', '1');
                break;

            case 'creative':
                if (d3_idx == 5) {
                    d3_sel.selectmenu("index", 0);
                }
                d3_sel.selectmenu('disable', '5');
            case 'campaign':
                if (d3_idx == 4) {
                    d3_sel.selectmenu("index", 0);
                }
                d3_sel.selectmenu('disable', '4');
            case 'priority':
                if (d3_idx == 3) {
                    d3_sel.selectmenu("index", 0);
                }
                d3_sel.selectmenu('disable', '3');
                break;

            case 'hour':
                if (d3_idx == 9) {
                    d3_sel.selectmenu("index", 0);
                }
                d3_sel.selectmenu('disable', '9');
            case 'day':
                if (d3_idx == 8) {
                    d3_sel.selectmenu("index", 0);
                }
                d3_sel.selectmenu('disable', '8');
            case 'week':
                if (d3_idx == 7) {
                    d3_sel.selectmenu("index", 0);
                }
                d3_sel.selectmenu('disable', '7');
            case 'month':
                if (d3_idx == 6) {
                    d3_sel.selectmenu("index", 0);
                }
                d3_sel.selectmenu('disable', '6');
                break;
            case 'country':
                if (d3_idx == 10) {
                    d3_sel.selectmenu("index", 0);
                }
                d3_sel.selectmenu('disable', '10');
                break;
            case 'marketing':
                if (d3_idx == 11) {
                    d3_sel.selectmenu('index', 0);
                }
                d3_sel.selectmenu('disable', 11);
                break;
            case 'os_ver':
                if (d3_idx == 13) {
                    d3_sel.selectmenu('index', 0);
                }
                d3_sel.selectmenu('disable', 13);
            case 'os':
                if (d3_idx == 12) {
                    d3_sel.selectmenu('index', 0);
                }
                d3_sel.selectmenu('disable', 12);
                break;
            default:
                break;
        }
    }


    $("#sched_interval")
    .change(function(e) {
        $('.schedule-help').hide();
        $('.schedule-help.'+$(this).val()).show();
    }).change();

    $("#email-input-checkbox")
    .change(function(e) {
        if ($(this).attr('checked')) {
            $('#email-recipients').show();
        } else {
            $('#email-recipients').hide();
        }
    }).change();

    $('#reportStateChangeForm-delete')
        .click(function(e) {
            e.preventDefault();
            $('#reportStateChangeForm').find('#action').val('delete').end().submit();
        });

 });
})(this.jQuery);

(function() {

    var ua = function(browser){
        var agent = navigator.userAgent.toLowerCase();
        return agent.indexOf(browser) !== -1;
    };

    var get_browser = function() {
        if ('msie 7') {
            return 'ie7';
        }

        if ('msie 8') {
            return 'ie8';
        }

        if ('msie 9') {
            return 'ie9';
        }

        if ('msie 10') {
            return 'ie10';
        }

        if ('msie') {
            return 'ie>=6';
        }

        if (ua('opera')) {
            return 'opera';
        }

        if (ua('safari')) {
            if (ua('chrome')) {
                return 'webkit';
            }
            return 'safari';
        } else {
            if (ua('mozilla')) {
                return 'mozilla';
            }
        }

        // leave this one for last because it can appear in
        // non-chrome webkit browsers
        if (ua('chrome')) {
            return 'chrome';
        }

        return 'unorthodox';
    };

    window.Browser = {
        get_browser: get_browser
    };

})();

(function () {

    function checkReport(retry_num) {
        //If exists returns data, otherwise returns False
        var id = $('#reportKey').val();

        if (id){
            $.ajax({
                url: '/reports/check/'+id+'/?retry='+retry_num,
                success: writeReport
            });
        }
    }

    function writeReport(report) {
        if (report.data == 'none') {
            window.retry++;
            setTimeout('checkReport(' + window.retry + ')', 2500);
            //setup another ajaxmagic
            return;
        }

        $('#preloader').hide();
        $('#table-goes-here').append(report.data);
        buildTable($('#report-table'));
    }

    function buildTable(table) {
        table.dataTable({
            bJQueryUI: true,
            aLengthMenu: [[50,100,-1], [50, 100, 'All']],
            iDisplayLength : 50,
            aoColumnDefs: [
                {
                    asSorting: ['desc', 'asc'],
                    aTargets: [0,1,2,3,4]
                }
            ],
            aaSorting: [[ 1, 'asc' ]]
        });
    }

    var ReportsController = {

        initializeReports: function () {
            window.retry = 0;
            checkReport(0);
        }
    };

    window.ReportsController = ReportsController;

})();

/*
 * Tinycon - A small library for manipulating the Favicon
 * Tom Moor, http://tommoor.com
 * Copyright (c) 2012 Tom Moor
 * MIT Licensed
 * @version 0.1
*/

(function(){
	
	var Tinycon = {};
	var currentFavicon = null;
	var originalFavicon = null;
	var originalTitle = document.title;
	var faviconImage = null;
	var canvas = null;
	var options = {};
	var defaults = {
		width: 7,
		height: 9,
		font: '10px arial',
		colour: '#ffffff',
		background: '#F03D25',
		fallback: true
	};
	
	var ua = function(browser){
		var agent = navigator.userAgent.toLowerCase();
		return agent.indexOf(browser) !== -1;
	};
	
	var browser = {
		chrome: ua('chrome'),
		webkit: ua('chrome') || ua('safari'),
		safari: ua('safari') && !ua('chrome'),
		mozilla: ua('mozilla') && !ua('chrome') && !ua('safari')
	};
	
	// private
	var getFaviconTag = function(){
		
		var links = document.getElementsByTagName('link');
		
		for(var i=0; i < links.length; i++) {
			if (links[i].getAttribute('rel') === 'icon') {
				return links[i];
			}
		}
		
		return false;
	};
	
	var removeFaviconTag = function(){
	
		var links = document.getElementsByTagName('link');
		var head = document.getElementsByTagName('head')[0];
		
		for(var i=0; i < links.length; i++) {
			if (links[i].getAttribute('rel') === 'icon') {
				head.removeChild(links[i]);
			}
		}
	};
	
	var getCurrentFavicon = function(){
		
		if (!originalFavicon || !currentFavicon) {
			var tag = getFaviconTag();
			originalFavicon = currentFavicon = tag ? tag.getAttribute('href') : '/favicon.ico';
		}

		return currentFavicon;
	};
	
	var getCanvas = function (){
		
		if (!canvas) {
			canvas = document.createElement("canvas");
			canvas.width = 16;
			canvas.height = 16;
		}
		
		return canvas;
	};
	
	var setFaviconTag = function(url){
		removeFaviconTag();
		
		var link = document.createElement('link');
		link.type = 'image/x-icon';
		link.rel = 'icon';
		link.href = url;
		document.getElementsByTagName('head')[0].appendChild(link);
	};
	
	var log = function(message){
		if (window.console) window.console.log(message);
	};
	
	var drawFavicon = function(num, colour) {

		// fallback to updating the browser title if unsupported
		if (!getCanvas().getContext || (!browser.chrome && !browser.mozilla)) {
			return updateTitle(num);
		}
		
		var context = getCanvas().getContext("2d");
		var colour = colour || '#000000';
		var num = num || 0;
		
		faviconImage = new Image();
		faviconImage.onload = function() {
			
			// clear canvas  
			context.clearRect(0, 0, 16, 16);

			// draw original favicon
			context.drawImage(faviconImage, 0, 0);
			
			// draw bubble over the top
			if (num > 0) drawBubble(context, num, colour);
			
			// refresh tag in page
			refreshFavicon();
		};
		
		faviconImage.src = getCurrentFavicon();
	};
	
	var updateTitle = function(num) {
		
		if (options.fallback) {
			if (num > 0) {
				document.title = '('+num+') ' + originalTitle;
			} else {
				document.title = originalTitle;
			}
		}
	};
	
	var drawBubble = function(context, num, colour) {
		
		// bubble needs to be larger for double digits
		var len = (num+"").length-1;
		var width = options.width + (6*len);
		var w = 16-width;
		var h = 16-options.height;

		// webkit seems to render fonts lighter than firefox
		context.font = (browser.webkit ? 'bold ' : '') + options.font;
		context.fillStyle = options.background;
		context.strokeStyle = options.background;
		context.lineWidth = 1;
		
		// bubble
		context.fillRect(w,h,width-1,options.height);
		
		// rounded left
		context.beginPath();
		context.moveTo(w-0.5,h+1);
		context.lineTo(w-0.5,15);
		context.stroke();
		
		// rounded right
		context.beginPath();
		context.moveTo(15.5,h+1);
		context.lineTo(15.5,15);
		context.stroke();
		
		// bottom shadow
		context.beginPath();
		context.strokeStyle = "rgba(0,0,0,0.3)";
		context.moveTo(w,16);
		context.lineTo(15,16);
		context.stroke();
		
		// number
		context.fillStyle = options.colour;
		context.textAlign = "right";
		context.textBaseline = "top";
		
		// unfortunately webkit/mozilla are a pixel different in text positioning
		context.fillText(num, 15, browser.webkit ? 6 : 7);  
	};
	
	var refreshFavicon = function(){
		// check support
		if (!getCanvas().getContext) return;
		
		setFaviconTag(getCanvas().toDataURL());
	};
	
	
	// public
	Tinycon.setOptions = function(custom){
		options = {};
		
		for(var i in defaults){
			options[i] = custom[i] ? custom[i] : defaults[i];
		}
		return this;
	};
	
	Tinycon.setImage = function(url){
		currentFavicon = url;
		refreshFavicon();
		return this;
	};
	
	Tinycon.setBubble = function(num, colour){
		
		// validate
		if(isNaN(num)) return log('Bubble must be a number');
		
		drawFavicon(num, colour);
		return this;
	};
	
	Tinycon.reset = function(){
		Tinycon.setImage(originalFavicon);
	};
	
	Tinycon.setOptions(defaults);
	window.Tinycon = Tinycon;
})();

(function($){

    var config = window.ToastjsConfig = {
        defaultTimeOut: 3000,
        position: ["top", "right"],
        notificationStyles: {
            padding: "12px 18px",
            margin: "0 0 6px 0",
            backgroundColor: "#000",
            opacity: 0.8,
            color: "#fff",
            font: "normal 13px 'Droid Sans', sans-serif",
            borderRadius: "3px",
            boxShadow: "#999 0 0 12px",
            width: "300px"
        },
        notificationStylesHover: {
            opacity: 1,
            boxShadow: "#000 0 0 12px"
        },
        container: $("<div></div>")
    };

    $(document).ready(function() {
        config.container.css("position", "absolute");
        config.container.css("z-index", 9999);
        config.container.css(config.position[0], "12px");
        config.container.css(config.position[1], "12px");
        $("body").append(config.container);
    });

    function getNotificationElement() {
        return $("<div>").css(config.notificationStyles).hover(function() {
            $(this).css(config.notificationStylesHover);
        }, function() {
            $(this).css(config.notificationStyles);
        });
    }

    var Toast = window.Toast = {};

    Toast.notify = function(message, title, iconUrl, timeOut) {
        var notificationElement = getNotificationElement();

        timeOut = timeOut || config.defaultTimeOut;

        if (iconUrl) {
            var iconElement = $("<img/>", {
                src: iconUrl,
                css: {
                    width: 36,
                    height: 36,
                    display: "inline-block",
                    verticalAlign: "middle"
                }
            });
            notificationElement.append(iconElement);
        }

        var textElement = $("<div/>").css({
            display: 'inline-block',
            verticalAlign: 'middle',
            padding: '0 12px'
        });

        if (title) {
            var titleElement = $("<div/>");
            titleElement.append(document.createTextNode(title));
            titleElement.css("font-weight", "bold");
            textElement.append(titleElement);
        }

        if (message) {
            var messageElement = $("<div/>");
            messageElement.append(document.createTextNode(message));
            textElement.append(messageElement);
        }

        notificationElement.delay(timeOut).fadeOut(function(){
            notificationElement.remove();
        });
        notificationElement.bind("click", function() {
            notificationElement.hide();
        });

        notificationElement.append(textElement);
        config.container.prepend(notificationElement);
    };

    Toast.info = function(message, title) {
        Toast.notify(message, title, "");
    };

    Toast.warning = function(message, title) {
        Toast.notify(message, title, "");
    };

    Toast.error = function(message, title) {
        Toast.notify(message, title, "/images/36x36-error.png");
    };

    Toast.success = function(message, title) {
        Toast.notify(message, title, "/images/36x36-success.png");
    };

}(this.jQuery));

/*
 * jQuery Plugin: Tokenizing Autocomplete Text Entry
 * Version 1.1
 *
 * Copyright (c) 2009 James Smith (http://loopj.com)
 * Licensed jointly under the GPL and MIT licenses,
 * choose which one suits your project best!
 *
 */

(function($) {

$.fn.tokenInput = function (url, options) {
    var settings = $.extend({
        url: url,
        hintText: "Type in a search term",
        noResultsText: "No results",
        searchingText: "Searching...",
        searchDelay: 300,
        minChars: 1,
        tokenLimit: null,
        jsonContainer: null,
        method: "GET",
        contentType: "json",
        queryParam: "q",
        onResult: null,
        onAdd: null,
        onDelete: null,
        doImmediate:true,
        country:'US',
        featureClass: null,
        featureCode:null,
        maxRows: 10
   }, options);

    settings.classes = $.extend({
        tokenList: "token-input-list",
        token: "token-input-token",
        tokenDelete: "token-input-delete-token",
        selectedToken: "token-input-selected-token",
        highlightedToken: "token-input-highlighted-token",
        dropdown: "token-input-dropdown",
        dropdownItem: "token-input-dropdown-item",
        dropdownItem2: "token-input-dropdown-item2",
        selectedDropdownItem: "token-input-selected-dropdown-item",
        inputToken: "token-input-input-token"
    }, options.classes);

    return this.each(function () {
        var list = new $.TokenList(this, settings);
    });
};

$.TokenData = function(data,type) {
    var raw = data;
    var name;
    var input;
    var id;
    var code; 
    function city_input() {
        var value = raw.lat + ',' + raw.lng + ':' + raw.adminCode1 + ':' + raw.name + ':' + raw.countryCode;
        return $('<input type="hidden" class="' + raw.countryCode + '" name="cities" id="' + raw.name.replace(/ /gi, '_') + '" value="' + value + '" />');
    }
    function country_input() {
        return $('<input type="hidden" name="geo" id="' + code + '" value="' + code + '" />');
    }

    if (type == 'city') {
        name = raw.name + ", " + raw.adminCode1;
        input = city_input;
        id = raw.name;
    }
    else if (type == 'country') {
        code = (raw.data === undefined) ? raw.code : raw.data.code;
        name = (raw.data === undefined) ? raw.name : raw.data.name;
        input = country_input;
        id = code;
    }


    return {
        name: name,
        input: input,
        raw: data,
        type: type,
        id: id
    };
}

$.TokenList = function (input, settings) {
    //
    // Variables
    //
    // Input box position "enum"
    var POSITION = {
        BEFORE: 0,
        AFTER: 1,
        END: 2
    };

    // Keys "enum"
    var KEY = {
        BACKSPACE: 8,
        TAB: 9,
        RETURN: 13,
        ESC: 27,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        COMMA: 188
    };

    // Save the tokens
    var saved_tokens = [];
    
    // Keep track of the number of tokens in the list
    var token_count = 0;
    var token_id    = 0;

    // Basic cache to save on db hits
    var cache = new $.TokenList.Cache( settings );

    // Keep track of the timeout
    var timeout;

    // Create a new text input an attach keyup events
    var input_box = $("<input class=\"token-input-field\" type=\"text\"  autocomplete=\"off\">")
        .css({
            outline: "none"
        })
        .focus(function () {
            if (settings.tokenLimit === null || settings.tokenLimit != token_count) {
                show_dropdown_hint();
            }
            $(this).addClass('focused');
            if( !token_list.hasClass('focused')) {
                token_list.addClass('focused');
            }
            if( $(this).val() ) {
              setTimeout(function(){do_search(settings.doImmediate);}, 5);
           }
        })
        .blur(function () {
            $(this).removeClass('focused');
            token_list.removeClass('focused');
            hide_dropdown();
        })
        .keydown(function (event) {
            var previous_token;
            var next_token;

            switch(event.keyCode) {
                case KEY.LEFT:
                case KEY.RIGHT:
                case KEY.UP:
                case KEY.DOWN:
                    if(!$(this).val()) {
                        previous_token = input_token.prev();
                        next_token = input_token.next();

                        if((previous_token.length && previous_token.get(0) === selected_token) || (next_token.length && next_token.get(0) === selected_token)) {
                            // Check if there is a previous/next token and it is selected
                            if(event.keyCode == KEY.LEFT || event.keyCode == KEY.UP) {
                                deselect_token($(selected_token), POSITION.BEFORE);
                            } else {
                                deselect_token($(selected_token), POSITION.AFTER);
                            }
                        } else if((event.keyCode == KEY.LEFT || event.keyCode == KEY.UP) && previous_token.length) {
                            // We are moving left, select the previous token if it exists
                            select_token($(previous_token.get(0)));
                        } else if((event.keyCode == KEY.RIGHT || event.keyCode == KEY.DOWN) && next_token.length) {
                            // We are moving right, select the next token if it exists
                            select_token($(next_token.get(0)));
                        }
                    } else {
                        var dropdown_item = null;

                        if(event.keyCode == KEY.DOWN || event.keyCode == KEY.RIGHT) {
                            dropdown_item = $(selected_dropdown_item).next();
                        } else {
                            dropdown_item = $(selected_dropdown_item).prev();
                        }

                        if(dropdown_item.length) {
                            select_dropdown_item(dropdown_item);
                        }
                        return false;
                    }
                    break;

                case KEY.BACKSPACE:
                    previous_token = input_token.prev();

                    if(!$(this).val().length) {
                        if(selected_token) {
                            delete_token($(selected_token));
                        } else if(previous_token.length) {
                            select_token($(previous_token.get(0)));
                        }

                        return false;
                    } else if($(this).val().length == 1) {
                        hide_dropdown();
                    } else {
                        // set a timeout just long enough to let this function finish.
                        setTimeout(function(){do_search(settings.doImmediate);}, 5);
                   }
                    break;

                case KEY.TAB:
                case KEY.RETURN:
                case KEY.COMMA:
                  if(selected_dropdown_item) {
                    add_token($(selected_dropdown_item));
                    return false;
                  }
                  break;

                case KEY.ESC:
                  hide_dropdown();
                  return true;

                default:
                    if(is_printable_character(event.keyCode)) {
                      // set a timeout just long enough to let this function finish.
                      setTimeout(function(){do_search(settings.doImmediate);}, 5);
                    }
                    break;
            }
        });

    // Keep a reference to the original input box
    var hidden_input = $(input)
                           .hide()
                           .focus(function () {
                               input_box.focus();
                           })
                           .blur(function () {
                               input_box.blur();
                           });

    // Keep a reference to the selected token and dropdown item
    var selected_token = null;
    var selected_dropdown_item = null;

    // The list to store the token items in
    var token_list = $("<ul />")
        .addClass(settings.classes.tokenList)
        .insertBefore(hidden_input)
        .click(function (event) {
            $(this).addClass('focused');
            var li = get_element_from_event(event, "li");
            if(li && li.get(0) != input_token.get(0)) {
                toggle_select_token(li);
                return false;
            } else {
                input_box.focus();

                if(selected_token) {
                    deselect_token($(selected_token), POSITION.END);
                }
            }
        })
        .mouseover(function (event) {
            var li = get_element_from_event(event, "li");
            if(li && selected_token !== this) {
                li.addClass(settings.classes.highlightedToken);
            }
        })
        .mouseout(function (event) {
            var li = get_element_from_event(event, "li");
            if(li && selected_token !== this) {
                li.removeClass(settings.classes.highlightedToken);
            }
        })
        .mousedown(function (event) {
            // Stop user selecting text on tokens
            var li = get_element_from_event(event, "li");
            if(li){
                return false;
            }
        });


    // The list to store the dropdown items in
    var dropdown = $("<div>")
        .addClass(settings.classes.dropdown)
        .insertAfter(token_list)
        .hide();

    // The token holding the input box
    var input_token = $("<li />")
        .addClass(settings.classes.inputToken)
        .appendTo(token_list)
        .append(input_box);

    //
    //
    // Functions
    //

 
  //If more than two countries exist, select Everywhere, disable other options, and get rid of all of their inputs
  function verify_token_inputs() {
    var countries = $('.token-input-country').length;
    //more than one country
    if (countries > 1) {
        //delete all other tokens
        $('.token-input-city').each( function(i) {
           delete_token($(this));
        });
        $('.token-input-state').each( function(i) {
           delete_token($(this));
        });
        //disable everything else
        $('input[name="location-targeting"]').each(
            function(i) {
                if ($(this).val() != 'all') { 
                    $(this).attr('disabled', true);
                }
                //Select "Everywhere"
                else {
                    $(this).click();
                }
        });
    } 
    // turn all buttons back on
    else {
        $('input[name="location-targeting"]').each(
            function(i) {
                $(this).attr('disabled', false);
        });
    }
    
    // Only show countryNumDpdnt things that match the current number
    // of countries in the input
    var children = $('#geo_pred_ta').children().length;
    $('.countryNumDependent').hide();
    $('.countryNumDependent.' + children).show();

  }



    // Pre-populate list if items exist
    function init_list () {
        var li_data = settings.prePopulate.data;
        if(li_data && li_data.length) {
            for(var i in li_data) {
                var token_data = new $.TokenData(li_data[i], settings.prePopulate.type);
                var this_token = $("<li><p>"+ token_data.name+"</p> </li>")
                    .addClass(settings.classes.token);
                if (token_data.type == 'city') {
                    this_token.addClass('token-input-city')
                    .addClass(token_data.raw.countryCode);
                }
                else if (token_data.type == 'country') {
                    this_token.addClass('token-input-country');
                }
                    this_token.insertBefore(input_token);
                $("<span>&times;</span>")
                    .addClass(settings.classes.tokenDelete)
                    .appendTo(this_token)
                    .click(function () {
                        delete_token($(this).parent());
                        return false;
                    });
                $.data(this_token.get(0), "tokeninput", token_data); 

                // Clear input box and make sure it keeps focus
                input_box
                    .val("")
                    .focus();

                // Don't show the help dropdown, they've got the idea
                hide_dropdown();

                // Save this token id
                token_data.input().appendTo( hidden_input ); 
            }
        }
        input_box.blur();
    }

    init_list();
    verify_token_inputs();

    function is_printable_character(keycode) {
        if((keycode >= 48 && keycode <= 90) ||      // 0-1a-z
           (keycode >= 96 && keycode <= 111) ||     // numpad 0-9 + - / * .
           (keycode >= 186 && keycode <= 192) ||    // ; = , - . / ^
           (keycode >= 219 && keycode <= 222)       // ( \ ) '
          ) {
              return true;
          } else {
              return false;
          }
    }

    // Get an element of a particular type from an event (click/mouseover etc)
    function get_element_from_event (event, element_type) {
        return $(event.target).closest(element_type);
    }

    // Inner function to a token to the list
    function insert_token(datas) {
      var value = datas.name;
      var token_type;
      var this_token = $("<li><p>"+ value +"</p> </li>");
          
      if (datas.type == 'city') {
          this_token.addClass('token-input-city')
          .addClass(datas.raw.countryCode);
      }/*
      else if (datas.type == 'state') {
          token_type = 'token-input-state';
      }*/
      else if (datas.type == 'country') {
          this_token.addClass('token-input-country');
      }
      this_token.addClass(settings.classes.token)
      .insertBefore(input_token);

      // The 'delete token' button
      $("<span>x</span>")
          .addClass(settings.classes.tokenDelete)
          .appendTo(this_token)
          .click(function () {
              delete_token($(this).parent());
              return false;
          });
      $.data(this_token.get(0), "tokeninput", datas); 
      return this_token;
    }

    // Add a token to the token list based on user input
    function add_token(item) {
        //Make sure token stuff is okay before adding a new one
        verify_token_inputs();
        var li_data = $.data(item.get(0), "tokeninput");
        var this_token = insert_token(li_data);
        var callback = settings.onAdd;

        // Clear input box and make sure it keeps focus
        input_box
            .val("")
            .focus();

        // Don't show the help dropdown, they've got the idea
        hide_dropdown();

        //XXX IMPORTANT XXX
        //order for id_string should be:
        // [country], region], city]
        // so US is US, California is US,CA and San Francisco is US,CA,SF (or some something like that)
        // This is because the django forms are going to take this id, split it on ',' and then assign
        // the first value as country_name, 2nd as region_name, and 3rd as city_name 
        li_data.input().appendTo(hidden_input);

        token_count++;
        //Strictly increasing number so we can name the hidden inputs
        token_id++;
        
        if(settings.tokenLimit !== null && token_count >= settings.tokenLimit) {
            input_box.hide();
            hide_dropdown();
        }
				
				// Execute the onAdd callback if defined
				if($.isFunction(callback)) {
				  callback(li_data.id);
				}
        //make sure token stuff is okay after adding a new one
        verify_token_inputs();
    }

    // Select a token in the token list
    function select_token (token) {
        token.addClass(settings.classes.selectedToken);
        selected_token = token.get(0);

        // Hide input box
        input_box.val("");

        // Hide dropdown if it is visible (eg if we clicked to select token)
        hide_dropdown();
    }

    // Deselect a token in the token list
    function deselect_token (token, position) {
        token.removeClass(settings.classes.selectedToken);
        selected_token = null;

        if(position == POSITION.BEFORE) {
            input_token.insertBefore(token);
        } else if(position == POSITION.AFTER) {
            input_token.insertAfter(token);
        } else {
            input_token.appendTo(token_list);
        }

        // Show the input box and give it focus again
        input_box.focus();
    }

    // Toggle selection of a token in the token list
    function toggle_select_token (token) {
        if(selected_token == token.get(0)) {
            deselect_token(token, POSITION.END);
        } else {
            if(selected_token) {
                deselect_token($(selected_token), POSITION.END);
            }
            select_token(token);
        }
    }

    // Delete a token from the token list
    function delete_token (token) {
        // Remove the id from the saved list
        var token_data = $.data(token.get(0), "tokeninput");
        var callback = settings.onDelete;
        // Delete the token
        token.remove();
        selected_token = null;
        //TODO delete the hidden field wooo
        // Show the input box and give it focus again
        input_box.focus();
        // Delete this token's id from hidden input
        if (token_data === undefined) {
            return;
        }
        var r_id = token_data.id.replace(/ /gi, '_');
        var r_nme = token_data.name.replace(/ /gi, '_');
        $('#'+ r_id).remove();
        $('#'+ r_nme).remove();
        
        if (token_data.type == 'country') {
            $('li.'+token_data.id+'.token-input-city').each( function(i) {
                    delete_token($(this));
                });
        }
        
        token_count--;
       
        if ($('.token-input-country').length === 0) {
            $('#advertiser-LocationSpec-all').click();
        }
        
        if (settings.tokenLimit !== null) {
            input_box
                .show()
                .val("")
                .focus();
        }
        
				
        // Execute the onDelete callback if defined
        if($.isFunction(callback)) {
          callback(token_data.id);
        }
        //verify inputs after token has been removed
        verify_token_inputs();
    }

    // Hide and clear the results dropdown
    function hide_dropdown () {
        dropdown.hide().empty();
        selected_dropdown_item = null;
    }

    function show_dropdown_searching () {
        dropdown
            .html("<p>"+settings.searchingText+"</p>")
            .show();
    }

    function show_dropdown_hint () {
        dropdown
            .html("<p>"+settings.hintText+"</p>")
            .show();
    }

    // Highlight the query part of the search term
	function highlight_term(value, term) {
        var ret_val = value.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + term + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<b>$1</b>");
		return ret_val; 
	}

    var slide_state = false;
    // Populate the results dropdown with some results
    function populate_dropdown (query, results) {
        var type = results.type;
        results = results.data;
        if(results && results.length) {
            var drop_clone = dropdown.clone();
            drop_clone.empty();
            var dropdown_ul = $("<ul>")
                .appendTo(drop_clone)
                .mouseover(function (event) {
                    select_dropdown_item(get_element_from_event(event, "li"));
                })
                .mousedown(function (event) {
                    add_token(get_element_from_event(event, "li"));
                    return false;
                });
            if ( !slide_state ) {
                dropdown_ul.hide();
            }
            var name;
            for(var i in results) {
                if (results.hasOwnProperty(i)) {
                    var tokenData = new $.TokenData(results[i],type);
                    var this_li = $("<li>"+highlight_term(tokenData.name, query)+"</li>")
                                      .appendTo(dropdown_ul);
                    if(i%2) {
                        this_li.addClass(settings.classes.dropdownItem);
                    } else {
                        this_li.addClass(settings.classes.dropdownItem2);
                    }
                    //JSLint doesn't like this, but needs to be == because '0' == 0 evals to true, but '0' === 0 does NOT
                    if(i == 0) {
                        select_dropdown_item(this_li);
                    }
                    $.data(this_li.get(0), "tokeninput", tokenData); 
                }
            }
            dropdown.replaceWith(drop_clone);
            dropdown = drop_clone;
            dropdown.show();
            if (!slide_state) {
                slide_state = true;
                dropdown_ul.slideDown("fast");
            }

        } else {
            slide_state = false;
            dropdown
                .html("<p>"+settings.noResultsText+"</p>")
                .show();
        }
    }

    // Highlight an item in the results dropdown
    function select_dropdown_item (item) {
        if(item) {
            if(selected_dropdown_item) {
                deselect_dropdown_item($(selected_dropdown_item));
            }

            item.addClass(settings.classes.selectedDropdownItem);
            selected_dropdown_item = item.get(0);
        }
    }

    // Remove highlighting from an item in the results dropdown
    function deselect_dropdown_item (item) {
        item.removeClass(settings.classes.selectedDropdownItem);
        selected_dropdown_item = null;
    }

    // Do a search and show the "searching" dropdown if the input is longer
    // than settings.minChars
    function do_search(immediate) {
        var query = input_box.val().toLowerCase();

        if (query && query.length) {
            if(selected_token) {
                deselect_token($(selected_token), POSITION.AFTER);
            }
            if (query.length >= settings.minChars) {
                show_dropdown_searching();
                if (immediate) {
                    run_search(query);
                } else {
                    clearTimeout(timeout);
                    timeout = setTimeout(function(){run_search(query);}, settings.searchDelay);
                }
            } else if (query.length > 0) {
                show_dropdown_hint();
            }
            else {
                hide_dropdown();
            }
        }
    }

    // Do the actual search
    function run_search(query) {
        //Don't run with the query given, run with what's actually in the search box
        query = input_box.val().toLowerCase();
        var cached_results = cache.get(query);
        if(cached_results) {
            var pop = {type:'country', data:cached_results};
            populate_dropdown(query, pop);
        } else {
			var queryStringDelimiter = settings.url.indexOf("?") < 0 ? "?" : "&";
			var callback = function(results) {
			  if($.isFunction(settings.onResult)) {
			      results = settings.onResult.call(this, results);
			  }
              cache.add(query, settings.jsonContainer ? results[settings.jsonContainer] : results);
              var pop = {type: settings.type, data:results.geonames}; 
              populate_dropdown(query, pop); 
            };
            
            if(settings.method == "POST") {
			    $.post(settings.url + queryStringDelimiter + settings.queryParam + "=" + encodeURIComponent(query), {}, callback, settings.contentType);
		    } else {
                var q_url = settings.url + queryStringDelimiter + settings.queryParam + "=" + encodeURIComponent(query);
                if (settings.featureClass !== null) {
                    q_url += '&featureClass=' + encodeURIComponent(settings.featureClass);
                }
                if (settings.featureCode !== null) {
                    q_url += "&featureCode=" + encodeURIComponent(settings.featureCode);
                }
                q_url += '&country=';
                if ($('input[name="geo"]').val() !== undefined) {
                   q_url += encodeURIComponent($('input[name="geo"]').val());
                }
                else {
                    q_url += encodeURIComponent(settings.country);
                }
                q_url += '&maxRows=' + settings.maxRows;
		        $.get(q_url, {}, callback, settings.contentType);
		    }
       }
    }
};

// Really basic cache for the results
$.TokenList.Cache = function (options) {
    var settings = $.extend({
        max_size: 50,
        matchContains: true
    }, options);

    function matchSubset( s, sub ) {
        if ( !options.matchCase ) {
            s = s.toLowerCase();
        }
        var i = s.indexOf( sub );
        if ( i == -1 ) {
            return false;
        }
        return i === 0 || options.matchContains;
    }


    var data = {};
    var size = 0;

    var flush = function () {
        data = {};
        size = 0;
    };
    
    function res_sort( query ) {
        function actual_sort( a, b ) {
            return q_dist( query, a.value ) - q_dist( query, b.value );
        }
        return actual_sort;
    }
    
    function q_dist( query, value ) {
        return value.length - query.length;
    }


    function get(q) {
        if (!options.cacheLength || !size) {
            return null;
        }
        if ( !options.url && settings.matchContains ){
           var csub = [];
           for ( var k in data ) {
               if( k.length > 0 ) {
                   var c = data[k];
                   $.each( c, function( i, x ) {
                      if (matchSubset( x.value, q ) ) {
                          var add = true;
                          for( var idx in csub ) {
                              var dat = csub[idx]; 
                              if ( x.result == dat.result ) {
                                  add = false;
                                  break;
                              }
                          }
                          if (add) {
                            csub.push(x);
                            }
                        }
                    });
               } 
           }
           return csub.sort(res_sort(q));
        }
        else if( data[q] ) {
            return data[q];
        }
        else if (settings.matchSubset) {
            for (var i = q.length - 1; i >= 1; i--) {
                var c = data[ q.substr( 0, i ) ];
                if (c) {
                    var csub = [];
                    $.each( c, function( i, x ) {
                        if( matchSubset( x.value, q ) ){
                            csub[csub.length] = x;
                        }
                    });
                    return csub;
                }
            }
        }
        return null;
    }

    function populate() {
        if (!options.data ) {return false;}
        var stMatchSets = {},
            nullData = 0;

        if (!options.url) {options.cacheLength = 1;}

        stMatchSets[""] = [];

        for (var i = 0, ol = options.data.length; i < ol; i++ ) {
            var rawValue = options.data[i];
            rawValue = (typeof rawValue == "string" ) ? [rawValue] : rawValue;

            var values = options.formatMatch( rawValue, i+1, options.data.length );
            for (var j = 0; j < values.length; j++) {
                var value = values[j];
                if (value === false)
                    {continue;}
                var firstChar = value.charAt( 0 ).toLowerCase();
                if (!stMatchSets[ firstChar ] )
                    {stMatchSets[ firstChar ] = [];}
                var row = {
                     value: value,
                     data: rawValue,
                     result: options.formatResult && options.formatResult( rawValue ) || value
                 };
                 stMatchSets[ firstChar ].push( row );
                 if ( nullData++ < options.max ) {
                     stMatchSets[""].push( row );
                 }
            }
        }
        $.each( stMatchSets, function( i, value ) {
            options.cacheLength++;
            add( i, value );
        });
    }
    setTimeout(populate, 25);

            
                           

    function add(query, results) {
        if(size > settings.max_size) {
            flush();
        }

        if(!data[query]) {
            size++;
        }
        data[query] = results;
    }

    return {
        flush: flush,
        get: get,
        populate: populate,
        add: add
    };
    

//    this.get = function (query) {
//        return data[query];
//    };
};

})(jQuery);

